-file("lib/type_check/builtin.ex", 1).

-module('Elixir.TypeCheck.Builtin').

-compile([no_auto_import, {inline_size, 1080}]).

-export(['MACRO-lazy'/2,
         '__info__'/1,
         '__type_check_spec_for_any/0__'/0,
         '__type_check_spec_for_as_boolean/1__'/0,
         '__type_check_spec_for_atom/0__'/0,
         '__type_check_spec_for_module/0__'/0,
         '__type_check_spec_for_term/0__'/0,
         any/0,
         arity/0,
         as_boolean/1,
         atom/0,
         binary/0,
         bitstring/0,
         boolean/0,
         byte/0,
         char/0,
         charlist/0,
         fixed_list/1,
         fixed_map/1,
         fixed_tuple/1,
         float/0,
         'fun'/0,
         function/0,
         guarded_by/2,
         integer/0,
         keyword/0,
         keyword/1,
         lazy_explicit/3,
         list/0,
         list/1,
         literal/1,
         map/0,
         map/2,
         mfa/0,
         module/0,
         named_type/2,
         neg_integer/0,
         no_return/0,
         non_neg_integer/0,
         none/0,
         number/0,
         one_of/1,
         one_of/2,
         pos_integer/0,
         range/1,
         range/2,
         term/0,
         tuple/0,
         tuple/1]).

-spec '__info__'(attributes |
                 compile |
                 functions |
                 macros |
                 md5 |
                 module |
                 deprecated) -> any().

'__info__'(module) -> 'Elixir.TypeCheck.Builtin';
'__info__'(functions) ->
    [{'__type_check_spec_for_any/0__', 0},
     {'__type_check_spec_for_as_boolean/1__', 0},
     {'__type_check_spec_for_atom/0__', 0},
     {'__type_check_spec_for_module/0__', 0},
     {'__type_check_spec_for_term/0__', 0},
     {any, 0},
     {arity, 0},
     {as_boolean, 1},
     {atom, 0},
     {binary, 0},
     {bitstring, 0},
     {boolean, 0},
     {byte, 0},
     {char, 0},
     {charlist, 0},
     {fixed_list, 1},
     {fixed_map, 1},
     {fixed_tuple, 1},
     {float, 0},
     {'fun', 0},
     {function, 0},
     {guarded_by, 2},
     {integer, 0},
     {keyword, 0},
     {keyword, 1},
     {lazy_explicit, 3},
     {list, 0},
     {list, 1},
     {literal, 1},
     {map, 0},
     {map, 2},
     {mfa, 0},
     {module, 0},
     {named_type, 2},
     {neg_integer, 0},
     {no_return, 0},
     {non_neg_integer, 0},
     {none, 0},
     {number, 0},
     {one_of, 1},
     {one_of, 2},
     {pos_integer, 0},
     {range, 1},
     {range, 2},
     {term, 0},
     {tuple, 0},
     {tuple, 1}];
'__info__'(macros) -> [{lazy, 1}];
'__info__'(Key = attributes) ->
    erlang:get_module_info('Elixir.TypeCheck.Builtin', Key);
'__info__'(Key = compile) ->
    erlang:get_module_info('Elixir.TypeCheck.Builtin', Key);
'__info__'(Key = md5) ->
    erlang:get_module_info('Elixir.TypeCheck.Builtin', Key);
'__info__'(deprecated) -> [].

any() ->
    nil,
    _super_result@1 = 'any (overridable 1)'(),
    case case case erlang:is_map(_super_result@1) of
                  false ->
                      {error,
                       {#{'__struct__' => 'Elixir.TypeCheck.Builtin.FixedMap',
                          keypairs =>
                              [{'__struct__',
                                #{'__struct__' =>
                                      'Elixir.TypeCheck.Builtin.Literal',
                                  value => 'Elixir.TypeCheck.Builtin.Any'}}]},
                        not_a_map,
                        #{},
                        _super_result@1}};
                  true -> {ok, []}
              end
             of
             {ok, []} ->
                 case begin
                          _@2 = maps:keys(_super_result@1),
                          case ['__struct__'] -- _@2 of
                              [] -> {ok, []};
                              _@3 ->
                                  {error,
                                   {#{'__struct__' =>
                                          'Elixir.TypeCheck.Builtin.FixedMap',
                                      keypairs =>
                                          [{'__struct__',
                                            #{'__struct__' =>
                                                  'Elixir.TypeCheck.Builtin.Literal',
                                              value =>
                                                  'Elixir.TypeCheck.Builtin.Any'}}]},
                                    missing_keys,
                                    #{keys => _@3},
                                    _super_result@1}}
                          end
                      end
                     of
                     {ok, []} ->
                         case begin
                                  _@4 = [],
                                  case {case maps:get('__struct__',
                                                      _super_result@1)
                                            of
                                            _@9
                                                when _@9 =:=
                                                         'Elixir.TypeCheck.Builtin.Any' ->
                                                {ok, []};
                                            _ ->
                                                {error,
                                                 {#{'__struct__' =>
                                                        'Elixir.TypeCheck.Builtin.Literal',
                                                    value =>
                                                        'Elixir.TypeCheck.Builtin.Any'},
                                                  not_same_value,
                                                  #{},
                                                  maps:get('__struct__',
                                                           _super_result@1)}}
                                        end,
                                        '__struct__'}
                                      of
                                      {{ok, _@10}, _@11} ->
                                          _@12 = _@10 ++ _@4,
                                          {ok, _@12};
                                      _@5 ->
                                          case _@5 of
                                              {{error, _@7}, _@8} ->
                                                  {error,
                                                   {#{'__struct__' =>
                                                          'Elixir.TypeCheck.Builtin.FixedMap',
                                                      keypairs =>
                                                          [{'__struct__',
                                                            #{'__struct__' =>
                                                                  'Elixir.TypeCheck.Builtin.Literal',
                                                              value =>
                                                                  'Elixir.TypeCheck.Builtin.Any'}}]},
                                                    value_error,
                                                    #{problem => _@7,
                                                      key => _@8},
                                                    _super_result@1}};
                                              _@6 ->
                                                  erlang:error({with_clause,
                                                                _@6})
                                          end
                                  end
                              end
                             of
                             {ok, _@13} -> {ok, _@13};
                             _@1 -> _@1
                         end;
                     _@1 -> _@1
                 end;
             _@1 -> _@1
         end
        of
        {ok, _@14} -> nil;
        {error, _@15} ->
            erlang:error('Elixir.TypeCheck.TypeError':exception({'__type_check_spec_for_any/0__'(),
                                                                 return_error,
                                                                 #{problem =>
                                                                       _@15,
                                                                   arguments =>
                                                                       []},
                                                                 _super_result@1}))
    end,
    _super_result@1.

'any (overridable 1)'() ->
    'Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.Any',
                             #{'__struct__' => 'Elixir.Macro.Env',
                               aliases => [], context => nil,
                               context_modules => ['Elixir.TypeCheck.Builtin'],
                               contextual_vars => [],
                               current_vars => {#{}, #{}},
                               file =>
                                   <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                     "nal/elixir/type_check/lib/type_check/builtin."
                                     "ex">>,
                               function => {any, 0},
                               functions =>
                                   [{'Elixir.TypeCheck.Builtin',
                                     [{any, 0},
                                      {arity, 0},
                                      {as_boolean, 1},
                                      {atom, 0},
                                      {binary, 0},
                                      {bitstring, 0},
                                      {boolean, 0},
                                      {byte, 0},
                                      {char, 0},
                                      {charlist, 0},
                                      {fixed_list, 1},
                                      {fixed_map, 1},
                                      {fixed_tuple, 1},
                                      {float, 0},
                                      {'fun', 0},
                                      {function, 0},
                                      {guarded_by, 2},
                                      {integer, 0},
                                      {keyword, 0},
                                      {keyword, 1},
                                      {lazy_explicit, 3},
                                      {list, 0},
                                      {list, 1},
                                      {literal, 1},
                                      {map, 0},
                                      {map, 2},
                                      {mfa, 0},
                                      {module, 0},
                                      {named_type, 2},
                                      {neg_integer, 0},
                                      {no_return, 0},
                                      {non_neg_integer, 0},
                                      {none, 0},
                                      {number, 0},
                                      {one_of, 1},
                                      {one_of, 2},
                                      {pos_integer, 0},
                                      {range, 1},
                                      {range, 2},
                                      {term, 0},
                                      {tuple, 0},
                                      {tuple, 1}]},
                                    {'Elixir.Kernel',
                                     [{'!=', 2},
                                      {'!==', 2},
                                      {'*', 2},
                                      {'+', 1},
                                      {'+', 2},
                                      {'++', 2},
                                      {'-', 1},
                                      {'-', 2},
                                      {'--', 2},
                                      {'/', 2},
                                      {'<', 2},
                                      {'<=', 2},
                                      {'==', 2},
                                      {'===', 2},
                                      {'=~', 2},
                                      {'>', 2},
                                      {'>=', 2},
                                      {abs, 1},
                                      {apply, 2},
                                      {apply, 3},
                                      {binary_part, 3},
                                      {bit_size, 1},
                                      {byte_size, 1},
                                      {ceil, 1},
                                      {'div', 2},
                                      {elem, 2},
                                      {exit, 1},
                                      {floor, 1},
                                      {'function_exported?', 3},
                                      {get_and_update_in, 3},
                                      {get_in, 2},
                                      {hd, 1},
                                      {inspect, 1},
                                      {inspect, 2},
                                      {is_atom, 1},
                                      {is_binary, 1},
                                      {is_bitstring, 1},
                                      {is_boolean, 1},
                                      {is_float, 1},
                                      {is_function, 1},
                                      {is_function, 2},
                                      {is_integer, 1},
                                      {is_list, 1},
                                      {is_map, 1},
                                      {is_map_key, 2},
                                      {is_number, 1},
                                      {is_pid, 1},
                                      {is_port, 1},
                                      {is_reference, 1},
                                      {is_tuple, 1},
                                      {length, 1},
                                      {'macro_exported?', 3},
                                      {make_ref, 0},
                                      {map_size, 1},
                                      {max, 2},
                                      {min, 2},
                                      {node, 0},
                                      {node, 1},
                                      {'not', 1},
                                      {pop_in, 2},
                                      {put_elem, 3},
                                      {put_in, 3},
                                      {'rem', 2},
                                      {round, 1},
                                      {self, 0},
                                      {send, 2},
                                      {spawn, 1},
                                      {spawn, 3},
                                      {spawn_link, 1},
                                      {spawn_link, 3},
                                      {spawn_monitor, 1},
                                      {spawn_monitor, 3},
                                      {struct, 1},
                                      {struct, 2},
                                      {'struct!', 1},
                                      {'struct!', 2},
                                      {throw, 1},
                                      {tl, 1},
                                      {trunc, 1},
                                      {tuple_size, 1},
                                      {update_in, 3}]}],
                               lexical_tracker => nil, line => 36,
                               macro_aliases => [],
                               macros =>
                                   [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                    {'Elixir.TypeCheck.Macros',
                                     [{'@', 1},
                                      {'opaque!', 1},
                                      {'spec!', 1},
                                      {'type!', 1},
                                      {'typep!', 1}]},
                                    {'Elixir.Kernel',
                                     [{'!', 1},
                                      {'&&', 2},
                                      {'..', 2},
                                      {'<>', 2},
                                      {'alias!', 1},
                                      {'and', 2},
                                      {binding, 0},
                                      {binding, 1},
                                      {def, 1},
                                      {def, 2},
                                      {defdelegate, 2},
                                      {defexception, 1},
                                      {defguard, 1},
                                      {defguardp, 1},
                                      {defimpl, 2},
                                      {defimpl, 3},
                                      {defmacro, 1},
                                      {defmacro, 2},
                                      {defmacrop, 1},
                                      {defmacrop, 2},
                                      {defmodule, 2},
                                      {defoverridable, 1},
                                      {defp, 1},
                                      {defp, 2},
                                      {defprotocol, 2},
                                      {defstruct, 1},
                                      {destructure, 2},
                                      {get_and_update_in, 2},
                                      {'if', 2},
                                      {in, 2},
                                      {is_nil, 1},
                                      {is_struct, 1},
                                      {'match?', 2},
                                      {'or', 2},
                                      {pop_in, 1},
                                      {put_in, 2},
                                      {raise, 1},
                                      {raise, 2},
                                      {reraise, 2},
                                      {reraise, 3},
                                      {sigil_C, 2},
                                      {sigil_D, 2},
                                      {sigil_N, 2},
                                      {sigil_R, 2},
                                      {sigil_S, 2},
                                      {sigil_T, 2},
                                      {sigil_U, 2},
                                      {sigil_W, 2},
                                      {sigil_c, 2},
                                      {sigil_r, 2},
                                      {sigil_s, 2},
                                      {sigil_w, 2},
                                      {to_char_list, 1},
                                      {to_charlist, 1},
                                      {to_string, 1},
                                      {unless, 2},
                                      {update_in, 2},
                                      {use, 1},
                                      {use, 2},
                                      {'var!', 1},
                                      {'var!', 2},
                                      {'|>', 2},
                                      {'||', 2}]},
                                    {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     [{'if_recompiling?', 1}, {recompile, 2}]}],
                               module => 'Elixir.TypeCheck.Builtin',
                               prematch_vars => warn,
                               requires =>
                                   ['Elixir.Application',
                                    'Elixir.Kernel',
                                    'Elixir.Kernel.Typespec',
                                    'Elixir.TypeCheck',
                                    'Elixir.TypeCheck.Builtin',
                                    'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                    'Elixir.TypeCheck.Internals.ToTypespec',
                                    'Elixir.TypeCheck.Macros'],
                               tracers => [elixir_lexical],
                               unused_vars => {#{}, 0}, vars => []}).

arity() ->
    'Elixir.TypeCheck.Builtin':range(#{'__struct__' =>
                                           'Elixir.Range',
                                       first => 0, last => 255}).

as_boolean(_@1) ->
    case {case case case {ok, []} of
                        {ok, _@7} -> {ok, [{x, _@1} | _@7]};
                        {error, _@8} ->
                            {error,
                             {#{'__struct__' =>
                                    'Elixir.TypeCheck.Builtin.NamedType',
                                name => x,
                                type =>
                                    #{'__struct__' =>
                                          'Elixir.TypeCheck.Builtin.Any'}},
                              named_type,
                              #{problem => _@8},
                              _@1}}
                    end
                   of
                   {ok, _@9} ->
                       _@10 = 'Elixir.Enum':into(_@9, #{}),
                       #{x := _x@1} = _@10,
                       case 'Elixir.TypeCheck.Type':'is_type?'(_x@1) of
                           _@11 when _@11 =:= false orelse _@11 =:= nil ->
                               {error,
                                {#{'__struct__' =>
                                       'Elixir.TypeCheck.Builtin.Guarded',
                                   guard =>
                                       {{'.',
                                         [{line, 18}],
                                         [{'__aliases__',
                                           [{counter,
                                             {'Elixir.TypeCheck.Type', 11}},
                                            {line, 18}],
                                           ['TypeCheck', 'Type']},
                                          'is_type?']},
                                        [{line, 18}],
                                        [{x, [{line, 18}], nil}]},
                                   type =>
                                       #{'__struct__' =>
                                             'Elixir.TypeCheck.Builtin.NamedType',
                                         name => x,
                                         type =>
                                             #{'__struct__' =>
                                                   'Elixir.TypeCheck.Builtin.Any'}}},
                                 guard_failed,
                                 #{bindings => _@10},
                                 _@1}};
                           _ -> {ok, _@9}
                       end;
                   {error, _@12} ->
                       {error,
                        {#{'__struct__' => 'Elixir.TypeCheck.Builtin.Guarded',
                           guard =>
                               {{'.',
                                 [{line, 18}],
                                 [{'__aliases__',
                                   [{counter, {'Elixir.TypeCheck.Type', 11}},
                                    {line, 18}],
                                   ['TypeCheck', 'Type']},
                                  'is_type?']},
                                [{line, 18}],
                                [{x, [{line, 18}], nil}]},
                           type =>
                               #{'__struct__' =>
                                     'Elixir.TypeCheck.Builtin.NamedType',
                                 name => x,
                                 type =>
                                     #{'__struct__' =>
                                           'Elixir.TypeCheck.Builtin.Any'}}},
                         type_failed,
                         #{problem => _@12},
                         _@1}}
               end
              of
              {ok, _@13} -> {ok, [{t, _@1} | _@13]};
              {error, _@14} ->
                  {error,
                   {#{'__struct__' => 'Elixir.TypeCheck.Builtin.NamedType',
                      name => t,
                      type =>
                          #{'__struct__' => 'Elixir.TypeCheck.Builtin.Guarded',
                            guard =>
                                {{'.',
                                  [{line, 18}],
                                  [{'__aliases__',
                                    [{counter, {'Elixir.TypeCheck.Type', 11}},
                                     {line, 18}],
                                    ['TypeCheck', 'Type']},
                                   'is_type?']},
                                 [{line, 18}],
                                 [{x, [{line, 18}], nil}]},
                            type =>
                                #{'__struct__' =>
                                      'Elixir.TypeCheck.Builtin.NamedType',
                                  name => x,
                                  type =>
                                      #{'__struct__' =>
                                            'Elixir.TypeCheck.Builtin.Any'}}}},
                    named_type,
                    #{problem => _@14},
                    _@1}}
          end,
          0,
          #{'__struct__' => 'Elixir.TypeCheck.Builtin.NamedType',
            name => t,
            type =>
                #{'__struct__' => 'Elixir.TypeCheck.Builtin.Guarded',
                  guard =>
                      {{'.',
                        [{line, 18}],
                        [{'__aliases__',
                          [{counter, {'Elixir.TypeCheck.Type', 11}},
                           {line, 18}],
                          ['TypeCheck', 'Type']},
                         'is_type?']},
                       [{line, 18}],
                       [{x, [{line, 18}], nil}]},
                  type =>
                      #{'__struct__' => 'Elixir.TypeCheck.Builtin.NamedType',
                        name => x,
                        type =>
                            #{'__struct__' =>
                                  'Elixir.TypeCheck.Builtin.Any'}}}}}
        of
        {{ok, _@15}, _@16, _@17} -> nil;
        _@2 ->
            case _@2 of
                {{error, _@4}, _@5, _@6} ->
                    erlang:error('Elixir.TypeCheck.TypeError':exception({{'__type_check_spec_for_as_boolean/1__'(),
                                                                          param_error,
                                                                          #{index
                                                                                =>
                                                                                _@5,
                                                                            problem
                                                                                =>
                                                                                _@4},
                                                                          [_@1]},
                                                                         [{file,
                                                                           <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                                                             "nal/elixir/type_check/lib/type_check/builtin."
                                                                             "ex">>},
                                                                          {line,
                                                                           1}]}));
                _@3 -> erlang:error({with_clause, _@3})
            end
    end,
    _super_result@1 = 'as_boolean (overridable 1)'(_@1),
    case case case {ok, []} of
                  {ok, _@18} -> {ok, [{x, _super_result@1} | _@18]};
                  {error, _@19} ->
                      {error,
                       {#{'__struct__' => 'Elixir.TypeCheck.Builtin.NamedType',
                          name => x,
                          type =>
                              #{'__struct__' =>
                                    'Elixir.TypeCheck.Builtin.Any'}},
                        named_type,
                        #{problem => _@19},
                        _super_result@1}}
              end
             of
             {ok, _@20} ->
                 _@21 = 'Elixir.Enum':into(_@20, #{}),
                 #{x := _x@2} = _@21,
                 case 'Elixir.TypeCheck.Type':'is_type?'(_x@2) of
                     _@22 when _@22 =:= false orelse _@22 =:= nil ->
                         {error,
                          {#{'__struct__' => 'Elixir.TypeCheck.Builtin.Guarded',
                             guard =>
                                 {{'.',
                                   [{line, 18}],
                                   [{'__aliases__',
                                     [{counter, {'Elixir.TypeCheck.Type', 11}},
                                      {line, 18}],
                                     ['TypeCheck', 'Type']},
                                    'is_type?']},
                                  [{line, 18}],
                                  [{x, [{line, 18}], nil}]},
                             type =>
                                 #{'__struct__' =>
                                       'Elixir.TypeCheck.Builtin.NamedType',
                                   name => x,
                                   type =>
                                       #{'__struct__' =>
                                             'Elixir.TypeCheck.Builtin.Any'}}},
                           guard_failed,
                           #{bindings => _@21},
                           _super_result@1}};
                     _ -> {ok, _@20}
                 end;
             {error, _@23} ->
                 {error,
                  {#{'__struct__' => 'Elixir.TypeCheck.Builtin.Guarded',
                     guard =>
                         {{'.',
                           [{line, 18}],
                           [{'__aliases__',
                             [{counter, {'Elixir.TypeCheck.Type', 11}},
                              {line, 18}],
                             ['TypeCheck', 'Type']},
                            'is_type?']},
                          [{line, 18}],
                          [{x, [{line, 18}], nil}]},
                     type =>
                         #{'__struct__' => 'Elixir.TypeCheck.Builtin.NamedType',
                           name => x,
                           type =>
                               #{'__struct__' =>
                                     'Elixir.TypeCheck.Builtin.Any'}}},
                   type_failed,
                   #{problem => _@23},
                   _super_result@1}}
         end
        of
        {ok, _@24} -> nil;
        {error, _@25} ->
            erlang:error('Elixir.TypeCheck.TypeError':exception({'__type_check_spec_for_as_boolean/1__'(),
                                                                 return_error,
                                                                 #{problem =>
                                                                       _@25,
                                                                   arguments =>
                                                                       [_@1]},
                                                                 _super_result@1}))
    end,
    _super_result@1.

'as_boolean (overridable 1)'(_type@1) -> _type@1.

atom() ->
    nil,
    _super_result@1 = 'atom (overridable 1)'(),
    case case case erlang:is_map(_super_result@1) of
                  false ->
                      {error,
                       {#{'__struct__' => 'Elixir.TypeCheck.Builtin.FixedMap',
                          keypairs =>
                              [{'__struct__',
                                #{'__struct__' =>
                                      'Elixir.TypeCheck.Builtin.Literal',
                                  value => 'Elixir.TypeCheck.Builtin.Atom'}}]},
                        not_a_map,
                        #{},
                        _super_result@1}};
                  true -> {ok, []}
              end
             of
             {ok, []} ->
                 case begin
                          _@2 = maps:keys(_super_result@1),
                          case ['__struct__'] -- _@2 of
                              [] -> {ok, []};
                              _@3 ->
                                  {error,
                                   {#{'__struct__' =>
                                          'Elixir.TypeCheck.Builtin.FixedMap',
                                      keypairs =>
                                          [{'__struct__',
                                            #{'__struct__' =>
                                                  'Elixir.TypeCheck.Builtin.Literal',
                                              value =>
                                                  'Elixir.TypeCheck.Builtin.Atom'}}]},
                                    missing_keys,
                                    #{keys => _@3},
                                    _super_result@1}}
                          end
                      end
                     of
                     {ok, []} ->
                         case begin
                                  _@4 = [],
                                  case {case maps:get('__struct__',
                                                      _super_result@1)
                                            of
                                            _@9
                                                when _@9 =:=
                                                         'Elixir.TypeCheck.Builtin.Atom' ->
                                                {ok, []};
                                            _ ->
                                                {error,
                                                 {#{'__struct__' =>
                                                        'Elixir.TypeCheck.Builtin.Literal',
                                                    value =>
                                                        'Elixir.TypeCheck.Builtin.Atom'},
                                                  not_same_value,
                                                  #{},
                                                  maps:get('__struct__',
                                                           _super_result@1)}}
                                        end,
                                        '__struct__'}
                                      of
                                      {{ok, _@10}, _@11} ->
                                          _@12 = _@10 ++ _@4,
                                          {ok, _@12};
                                      _@5 ->
                                          case _@5 of
                                              {{error, _@7}, _@8} ->
                                                  {error,
                                                   {#{'__struct__' =>
                                                          'Elixir.TypeCheck.Builtin.FixedMap',
                                                      keypairs =>
                                                          [{'__struct__',
                                                            #{'__struct__' =>
                                                                  'Elixir.TypeCheck.Builtin.Literal',
                                                              value =>
                                                                  'Elixir.TypeCheck.Builtin.Atom'}}]},
                                                    value_error,
                                                    #{problem => _@7,
                                                      key => _@8},
                                                    _super_result@1}};
                                              _@6 ->
                                                  erlang:error({with_clause,
                                                                _@6})
                                          end
                                  end
                              end
                             of
                             {ok, _@13} -> {ok, _@13};
                             _@1 -> _@1
                         end;
                     _@1 -> _@1
                 end;
             _@1 -> _@1
         end
        of
        {ok, _@14} -> nil;
        {error, _@15} ->
            erlang:error('Elixir.TypeCheck.TypeError':exception({'__type_check_spec_for_atom/0__'(),
                                                                 return_error,
                                                                 #{problem =>
                                                                       _@15,
                                                                   arguments =>
                                                                       []},
                                                                 _super_result@1}))
    end,
    _super_result@1.

'atom (overridable 1)'() ->
    'Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.Atom',
                             #{'__struct__' => 'Elixir.Macro.Env',
                               aliases => [], context => nil,
                               context_modules => ['Elixir.TypeCheck.Builtin'],
                               contextual_vars => [],
                               current_vars => {#{}, #{}},
                               file =>
                                   <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                     "nal/elixir/type_check/lib/type_check/builtin."
                                     "ex">>,
                               function => {atom, 0},
                               functions =>
                                   [{'Elixir.TypeCheck.Builtin',
                                     [{any, 0},
                                      {arity, 0},
                                      {as_boolean, 1},
                                      {atom, 0},
                                      {binary, 0},
                                      {bitstring, 0},
                                      {boolean, 0},
                                      {byte, 0},
                                      {char, 0},
                                      {charlist, 0},
                                      {fixed_list, 1},
                                      {fixed_map, 1},
                                      {fixed_tuple, 1},
                                      {float, 0},
                                      {'fun', 0},
                                      {function, 0},
                                      {guarded_by, 2},
                                      {integer, 0},
                                      {keyword, 0},
                                      {keyword, 1},
                                      {lazy_explicit, 3},
                                      {list, 0},
                                      {list, 1},
                                      {literal, 1},
                                      {map, 0},
                                      {map, 2},
                                      {mfa, 0},
                                      {module, 0},
                                      {named_type, 2},
                                      {neg_integer, 0},
                                      {no_return, 0},
                                      {non_neg_integer, 0},
                                      {none, 0},
                                      {number, 0},
                                      {one_of, 1},
                                      {one_of, 2},
                                      {pos_integer, 0},
                                      {range, 1},
                                      {range, 2},
                                      {term, 0},
                                      {tuple, 0},
                                      {tuple, 1}]},
                                    {'Elixir.Kernel',
                                     [{'!=', 2},
                                      {'!==', 2},
                                      {'*', 2},
                                      {'+', 1},
                                      {'+', 2},
                                      {'++', 2},
                                      {'-', 1},
                                      {'-', 2},
                                      {'--', 2},
                                      {'/', 2},
                                      {'<', 2},
                                      {'<=', 2},
                                      {'==', 2},
                                      {'===', 2},
                                      {'=~', 2},
                                      {'>', 2},
                                      {'>=', 2},
                                      {abs, 1},
                                      {apply, 2},
                                      {apply, 3},
                                      {binary_part, 3},
                                      {bit_size, 1},
                                      {byte_size, 1},
                                      {ceil, 1},
                                      {'div', 2},
                                      {elem, 2},
                                      {exit, 1},
                                      {floor, 1},
                                      {'function_exported?', 3},
                                      {get_and_update_in, 3},
                                      {get_in, 2},
                                      {hd, 1},
                                      {inspect, 1},
                                      {inspect, 2},
                                      {is_atom, 1},
                                      {is_binary, 1},
                                      {is_bitstring, 1},
                                      {is_boolean, 1},
                                      {is_float, 1},
                                      {is_function, 1},
                                      {is_function, 2},
                                      {is_integer, 1},
                                      {is_list, 1},
                                      {is_map, 1},
                                      {is_map_key, 2},
                                      {is_number, 1},
                                      {is_pid, 1},
                                      {is_port, 1},
                                      {is_reference, 1},
                                      {is_tuple, 1},
                                      {length, 1},
                                      {'macro_exported?', 3},
                                      {make_ref, 0},
                                      {map_size, 1},
                                      {max, 2},
                                      {min, 2},
                                      {node, 0},
                                      {node, 1},
                                      {'not', 1},
                                      {pop_in, 2},
                                      {put_elem, 3},
                                      {put_in, 3},
                                      {'rem', 2},
                                      {round, 1},
                                      {self, 0},
                                      {send, 2},
                                      {spawn, 1},
                                      {spawn, 3},
                                      {spawn_link, 1},
                                      {spawn_link, 3},
                                      {spawn_monitor, 1},
                                      {spawn_monitor, 3},
                                      {struct, 1},
                                      {struct, 2},
                                      {'struct!', 1},
                                      {'struct!', 2},
                                      {throw, 1},
                                      {tl, 1},
                                      {trunc, 1},
                                      {tuple_size, 1},
                                      {update_in, 3}]}],
                               lexical_tracker => nil, line => 63,
                               macro_aliases => [],
                               macros =>
                                   [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                    {'Elixir.TypeCheck.Macros',
                                     [{'@', 1},
                                      {'opaque!', 1},
                                      {'spec!', 1},
                                      {'type!', 1},
                                      {'typep!', 1}]},
                                    {'Elixir.Kernel',
                                     [{'!', 1},
                                      {'&&', 2},
                                      {'..', 2},
                                      {'<>', 2},
                                      {'alias!', 1},
                                      {'and', 2},
                                      {binding, 0},
                                      {binding, 1},
                                      {def, 1},
                                      {def, 2},
                                      {defdelegate, 2},
                                      {defexception, 1},
                                      {defguard, 1},
                                      {defguardp, 1},
                                      {defimpl, 2},
                                      {defimpl, 3},
                                      {defmacro, 1},
                                      {defmacro, 2},
                                      {defmacrop, 1},
                                      {defmacrop, 2},
                                      {defmodule, 2},
                                      {defoverridable, 1},
                                      {defp, 1},
                                      {defp, 2},
                                      {defprotocol, 2},
                                      {defstruct, 1},
                                      {destructure, 2},
                                      {get_and_update_in, 2},
                                      {'if', 2},
                                      {in, 2},
                                      {is_nil, 1},
                                      {is_struct, 1},
                                      {'match?', 2},
                                      {'or', 2},
                                      {pop_in, 1},
                                      {put_in, 2},
                                      {raise, 1},
                                      {raise, 2},
                                      {reraise, 2},
                                      {reraise, 3},
                                      {sigil_C, 2},
                                      {sigil_D, 2},
                                      {sigil_N, 2},
                                      {sigil_R, 2},
                                      {sigil_S, 2},
                                      {sigil_T, 2},
                                      {sigil_U, 2},
                                      {sigil_W, 2},
                                      {sigil_c, 2},
                                      {sigil_r, 2},
                                      {sigil_s, 2},
                                      {sigil_w, 2},
                                      {to_char_list, 1},
                                      {to_charlist, 1},
                                      {to_string, 1},
                                      {unless, 2},
                                      {update_in, 2},
                                      {use, 1},
                                      {use, 2},
                                      {'var!', 1},
                                      {'var!', 2},
                                      {'|>', 2},
                                      {'||', 2}]},
                                    {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     [{'if_recompiling?', 1}, {recompile, 2}]}],
                               module => 'Elixir.TypeCheck.Builtin',
                               prematch_vars => warn,
                               requires =>
                                   ['Elixir.Application',
                                    'Elixir.Kernel',
                                    'Elixir.Kernel.Typespec',
                                    'Elixir.TypeCheck',
                                    'Elixir.TypeCheck.Builtin',
                                    'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                    'Elixir.TypeCheck.Internals.ToTypespec',
                                    'Elixir.TypeCheck.Macros'],
                               tracers => [elixir_lexical],
                               unused_vars => {#{}, 0}, vars => []}).

binary() ->
    'Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.Binary',
                             #{'__struct__' => 'Elixir.Macro.Env',
                               aliases => [], context => nil,
                               context_modules => ['Elixir.TypeCheck.Builtin'],
                               contextual_vars => [],
                               current_vars => {#{}, #{}},
                               file =>
                                   <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                     "nal/elixir/type_check/lib/type_check/builtin."
                                     "ex">>,
                               function => {binary, 0},
                               functions =>
                                   [{'Elixir.TypeCheck.Builtin',
                                     [{any, 0},
                                      {arity, 0},
                                      {as_boolean, 1},
                                      {atom, 0},
                                      {binary, 0},
                                      {bitstring, 0},
                                      {boolean, 0},
                                      {byte, 0},
                                      {char, 0},
                                      {charlist, 0},
                                      {fixed_list, 1},
                                      {fixed_map, 1},
                                      {fixed_tuple, 1},
                                      {float, 0},
                                      {'fun', 0},
                                      {function, 0},
                                      {guarded_by, 2},
                                      {integer, 0},
                                      {keyword, 0},
                                      {keyword, 1},
                                      {lazy_explicit, 3},
                                      {list, 0},
                                      {list, 1},
                                      {literal, 1},
                                      {map, 0},
                                      {map, 2},
                                      {mfa, 0},
                                      {module, 0},
                                      {named_type, 2},
                                      {neg_integer, 0},
                                      {no_return, 0},
                                      {non_neg_integer, 0},
                                      {none, 0},
                                      {number, 0},
                                      {one_of, 1},
                                      {one_of, 2},
                                      {pos_integer, 0},
                                      {range, 1},
                                      {range, 2},
                                      {term, 0},
                                      {tuple, 0},
                                      {tuple, 1}]},
                                    {'Elixir.Kernel',
                                     [{'!=', 2},
                                      {'!==', 2},
                                      {'*', 2},
                                      {'+', 1},
                                      {'+', 2},
                                      {'++', 2},
                                      {'-', 1},
                                      {'-', 2},
                                      {'--', 2},
                                      {'/', 2},
                                      {'<', 2},
                                      {'<=', 2},
                                      {'==', 2},
                                      {'===', 2},
                                      {'=~', 2},
                                      {'>', 2},
                                      {'>=', 2},
                                      {abs, 1},
                                      {apply, 2},
                                      {apply, 3},
                                      {binary_part, 3},
                                      {bit_size, 1},
                                      {byte_size, 1},
                                      {ceil, 1},
                                      {'div', 2},
                                      {elem, 2},
                                      {exit, 1},
                                      {floor, 1},
                                      {'function_exported?', 3},
                                      {get_and_update_in, 3},
                                      {get_in, 2},
                                      {hd, 1},
                                      {inspect, 1},
                                      {inspect, 2},
                                      {is_atom, 1},
                                      {is_binary, 1},
                                      {is_bitstring, 1},
                                      {is_boolean, 1},
                                      {is_float, 1},
                                      {is_function, 1},
                                      {is_function, 2},
                                      {is_integer, 1},
                                      {is_list, 1},
                                      {is_map, 1},
                                      {is_map_key, 2},
                                      {is_number, 1},
                                      {is_pid, 1},
                                      {is_port, 1},
                                      {is_reference, 1},
                                      {is_tuple, 1},
                                      {length, 1},
                                      {'macro_exported?', 3},
                                      {make_ref, 0},
                                      {map_size, 1},
                                      {max, 2},
                                      {min, 2},
                                      {node, 0},
                                      {node, 1},
                                      {'not', 1},
                                      {pop_in, 2},
                                      {put_elem, 3},
                                      {put_in, 3},
                                      {'rem', 2},
                                      {round, 1},
                                      {self, 0},
                                      {send, 2},
                                      {spawn, 1},
                                      {spawn, 3},
                                      {spawn_link, 1},
                                      {spawn_link, 3},
                                      {spawn_monitor, 1},
                                      {spawn_monitor, 3},
                                      {struct, 1},
                                      {struct, 2},
                                      {'struct!', 1},
                                      {'struct!', 2},
                                      {throw, 1},
                                      {tl, 1},
                                      {trunc, 1},
                                      {tuple_size, 1},
                                      {update_in, 3}]}],
                               lexical_tracker => nil, line => 110,
                               macro_aliases => [],
                               macros =>
                                   [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                    {'Elixir.TypeCheck.Macros',
                                     [{'@', 1},
                                      {'opaque!', 1},
                                      {'spec!', 1},
                                      {'type!', 1},
                                      {'typep!', 1}]},
                                    {'Elixir.Kernel',
                                     [{'!', 1},
                                      {'&&', 2},
                                      {'..', 2},
                                      {'<>', 2},
                                      {'alias!', 1},
                                      {'and', 2},
                                      {binding, 0},
                                      {binding, 1},
                                      {def, 1},
                                      {def, 2},
                                      {defdelegate, 2},
                                      {defexception, 1},
                                      {defguard, 1},
                                      {defguardp, 1},
                                      {defimpl, 2},
                                      {defimpl, 3},
                                      {defmacro, 1},
                                      {defmacro, 2},
                                      {defmacrop, 1},
                                      {defmacrop, 2},
                                      {defmodule, 2},
                                      {defoverridable, 1},
                                      {defp, 1},
                                      {defp, 2},
                                      {defprotocol, 2},
                                      {defstruct, 1},
                                      {destructure, 2},
                                      {get_and_update_in, 2},
                                      {'if', 2},
                                      {in, 2},
                                      {is_nil, 1},
                                      {is_struct, 1},
                                      {'match?', 2},
                                      {'or', 2},
                                      {pop_in, 1},
                                      {put_in, 2},
                                      {raise, 1},
                                      {raise, 2},
                                      {reraise, 2},
                                      {reraise, 3},
                                      {sigil_C, 2},
                                      {sigil_D, 2},
                                      {sigil_N, 2},
                                      {sigil_R, 2},
                                      {sigil_S, 2},
                                      {sigil_T, 2},
                                      {sigil_U, 2},
                                      {sigil_W, 2},
                                      {sigil_c, 2},
                                      {sigil_r, 2},
                                      {sigil_s, 2},
                                      {sigil_w, 2},
                                      {to_char_list, 1},
                                      {to_charlist, 1},
                                      {to_string, 1},
                                      {unless, 2},
                                      {update_in, 2},
                                      {use, 1},
                                      {use, 2},
                                      {'var!', 1},
                                      {'var!', 2},
                                      {'|>', 2},
                                      {'||', 2}]},
                                    {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     [{'if_recompiling?', 1}, {recompile, 2}]}],
                               module => 'Elixir.TypeCheck.Builtin',
                               prematch_vars => warn,
                               requires =>
                                   ['Elixir.Application',
                                    'Elixir.Kernel',
                                    'Elixir.Kernel.Typespec',
                                    'Elixir.TypeCheck',
                                    'Elixir.TypeCheck.Builtin',
                                    'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                    'Elixir.TypeCheck.Internals.ToTypespec',
                                    'Elixir.TypeCheck.Macros'],
                               tracers => [elixir_lexical],
                               unused_vars => {#{}, 0}, vars => []}).

bitstring() ->
    'Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.Bitstring',
                             #{'__struct__' => 'Elixir.Macro.Env',
                               aliases => [], context => nil,
                               context_modules => ['Elixir.TypeCheck.Builtin'],
                               contextual_vars => [],
                               current_vars => {#{}, #{}},
                               file =>
                                   <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                     "nal/elixir/type_check/lib/type_check/builtin."
                                     "ex">>,
                               function => {bitstring, 0},
                               functions =>
                                   [{'Elixir.TypeCheck.Builtin',
                                     [{any, 0},
                                      {arity, 0},
                                      {as_boolean, 1},
                                      {atom, 0},
                                      {binary, 0},
                                      {bitstring, 0},
                                      {boolean, 0},
                                      {byte, 0},
                                      {char, 0},
                                      {charlist, 0},
                                      {fixed_list, 1},
                                      {fixed_map, 1},
                                      {fixed_tuple, 1},
                                      {float, 0},
                                      {'fun', 0},
                                      {function, 0},
                                      {guarded_by, 2},
                                      {integer, 0},
                                      {keyword, 0},
                                      {keyword, 1},
                                      {lazy_explicit, 3},
                                      {list, 0},
                                      {list, 1},
                                      {literal, 1},
                                      {map, 0},
                                      {map, 2},
                                      {mfa, 0},
                                      {module, 0},
                                      {named_type, 2},
                                      {neg_integer, 0},
                                      {no_return, 0},
                                      {non_neg_integer, 0},
                                      {none, 0},
                                      {number, 0},
                                      {one_of, 1},
                                      {one_of, 2},
                                      {pos_integer, 0},
                                      {range, 1},
                                      {range, 2},
                                      {term, 0},
                                      {tuple, 0},
                                      {tuple, 1}]},
                                    {'Elixir.Kernel',
                                     [{'!=', 2},
                                      {'!==', 2},
                                      {'*', 2},
                                      {'+', 1},
                                      {'+', 2},
                                      {'++', 2},
                                      {'-', 1},
                                      {'-', 2},
                                      {'--', 2},
                                      {'/', 2},
                                      {'<', 2},
                                      {'<=', 2},
                                      {'==', 2},
                                      {'===', 2},
                                      {'=~', 2},
                                      {'>', 2},
                                      {'>=', 2},
                                      {abs, 1},
                                      {apply, 2},
                                      {apply, 3},
                                      {binary_part, 3},
                                      {bit_size, 1},
                                      {byte_size, 1},
                                      {ceil, 1},
                                      {'div', 2},
                                      {elem, 2},
                                      {exit, 1},
                                      {floor, 1},
                                      {'function_exported?', 3},
                                      {get_and_update_in, 3},
                                      {get_in, 2},
                                      {hd, 1},
                                      {inspect, 1},
                                      {inspect, 2},
                                      {is_atom, 1},
                                      {is_binary, 1},
                                      {is_bitstring, 1},
                                      {is_boolean, 1},
                                      {is_float, 1},
                                      {is_function, 1},
                                      {is_function, 2},
                                      {is_integer, 1},
                                      {is_list, 1},
                                      {is_map, 1},
                                      {is_map_key, 2},
                                      {is_number, 1},
                                      {is_pid, 1},
                                      {is_port, 1},
                                      {is_reference, 1},
                                      {is_tuple, 1},
                                      {length, 1},
                                      {'macro_exported?', 3},
                                      {make_ref, 0},
                                      {map_size, 1},
                                      {max, 2},
                                      {min, 2},
                                      {node, 0},
                                      {node, 1},
                                      {'not', 1},
                                      {pop_in, 2},
                                      {put_elem, 3},
                                      {put_in, 3},
                                      {'rem', 2},
                                      {round, 1},
                                      {self, 0},
                                      {send, 2},
                                      {spawn, 1},
                                      {spawn, 3},
                                      {spawn_link, 1},
                                      {spawn_link, 3},
                                      {spawn_monitor, 1},
                                      {spawn_monitor, 3},
                                      {struct, 1},
                                      {struct, 2},
                                      {'struct!', 1},
                                      {'struct!', 2},
                                      {throw, 1},
                                      {tl, 1},
                                      {trunc, 1},
                                      {tuple_size, 1},
                                      {update_in, 3}]}],
                               lexical_tracker => nil, line => 120,
                               macro_aliases => [],
                               macros =>
                                   [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                    {'Elixir.TypeCheck.Macros',
                                     [{'@', 1},
                                      {'opaque!', 1},
                                      {'spec!', 1},
                                      {'type!', 1},
                                      {'typep!', 1}]},
                                    {'Elixir.Kernel',
                                     [{'!', 1},
                                      {'&&', 2},
                                      {'..', 2},
                                      {'<>', 2},
                                      {'alias!', 1},
                                      {'and', 2},
                                      {binding, 0},
                                      {binding, 1},
                                      {def, 1},
                                      {def, 2},
                                      {defdelegate, 2},
                                      {defexception, 1},
                                      {defguard, 1},
                                      {defguardp, 1},
                                      {defimpl, 2},
                                      {defimpl, 3},
                                      {defmacro, 1},
                                      {defmacro, 2},
                                      {defmacrop, 1},
                                      {defmacrop, 2},
                                      {defmodule, 2},
                                      {defoverridable, 1},
                                      {defp, 1},
                                      {defp, 2},
                                      {defprotocol, 2},
                                      {defstruct, 1},
                                      {destructure, 2},
                                      {get_and_update_in, 2},
                                      {'if', 2},
                                      {in, 2},
                                      {is_nil, 1},
                                      {is_struct, 1},
                                      {'match?', 2},
                                      {'or', 2},
                                      {pop_in, 1},
                                      {put_in, 2},
                                      {raise, 1},
                                      {raise, 2},
                                      {reraise, 2},
                                      {reraise, 3},
                                      {sigil_C, 2},
                                      {sigil_D, 2},
                                      {sigil_N, 2},
                                      {sigil_R, 2},
                                      {sigil_S, 2},
                                      {sigil_T, 2},
                                      {sigil_U, 2},
                                      {sigil_W, 2},
                                      {sigil_c, 2},
                                      {sigil_r, 2},
                                      {sigil_s, 2},
                                      {sigil_w, 2},
                                      {to_char_list, 1},
                                      {to_charlist, 1},
                                      {to_string, 1},
                                      {unless, 2},
                                      {update_in, 2},
                                      {use, 1},
                                      {use, 2},
                                      {'var!', 1},
                                      {'var!', 2},
                                      {'|>', 2},
                                      {'||', 2}]},
                                    {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     [{'if_recompiling?', 1}, {recompile, 2}]}],
                               module => 'Elixir.TypeCheck.Builtin',
                               prematch_vars => warn,
                               requires =>
                                   ['Elixir.Application',
                                    'Elixir.Kernel',
                                    'Elixir.Kernel.Typespec',
                                    'Elixir.TypeCheck',
                                    'Elixir.TypeCheck.Builtin',
                                    'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                    'Elixir.TypeCheck.Internals.ToTypespec',
                                    'Elixir.TypeCheck.Macros'],
                               tracers => [elixir_lexical],
                               unused_vars => {#{}, 0}, vars => []}).

boolean() ->
    'Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.Boolean',
                             #{'__struct__' => 'Elixir.Macro.Env',
                               aliases => [], context => nil,
                               context_modules => ['Elixir.TypeCheck.Builtin'],
                               contextual_vars => [],
                               current_vars => {#{}, #{}},
                               file =>
                                   <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                     "nal/elixir/type_check/lib/type_check/builtin."
                                     "ex">>,
                               function => {boolean, 0},
                               functions =>
                                   [{'Elixir.TypeCheck.Builtin',
                                     [{any, 0},
                                      {arity, 0},
                                      {as_boolean, 1},
                                      {atom, 0},
                                      {binary, 0},
                                      {bitstring, 0},
                                      {boolean, 0},
                                      {byte, 0},
                                      {char, 0},
                                      {charlist, 0},
                                      {fixed_list, 1},
                                      {fixed_map, 1},
                                      {fixed_tuple, 1},
                                      {float, 0},
                                      {'fun', 0},
                                      {function, 0},
                                      {guarded_by, 2},
                                      {integer, 0},
                                      {keyword, 0},
                                      {keyword, 1},
                                      {lazy_explicit, 3},
                                      {list, 0},
                                      {list, 1},
                                      {literal, 1},
                                      {map, 0},
                                      {map, 2},
                                      {mfa, 0},
                                      {module, 0},
                                      {named_type, 2},
                                      {neg_integer, 0},
                                      {no_return, 0},
                                      {non_neg_integer, 0},
                                      {none, 0},
                                      {number, 0},
                                      {one_of, 1},
                                      {one_of, 2},
                                      {pos_integer, 0},
                                      {range, 1},
                                      {range, 2},
                                      {term, 0},
                                      {tuple, 0},
                                      {tuple, 1}]},
                                    {'Elixir.Kernel',
                                     [{'!=', 2},
                                      {'!==', 2},
                                      {'*', 2},
                                      {'+', 1},
                                      {'+', 2},
                                      {'++', 2},
                                      {'-', 1},
                                      {'-', 2},
                                      {'--', 2},
                                      {'/', 2},
                                      {'<', 2},
                                      {'<=', 2},
                                      {'==', 2},
                                      {'===', 2},
                                      {'=~', 2},
                                      {'>', 2},
                                      {'>=', 2},
                                      {abs, 1},
                                      {apply, 2},
                                      {apply, 3},
                                      {binary_part, 3},
                                      {bit_size, 1},
                                      {byte_size, 1},
                                      {ceil, 1},
                                      {'div', 2},
                                      {elem, 2},
                                      {exit, 1},
                                      {floor, 1},
                                      {'function_exported?', 3},
                                      {get_and_update_in, 3},
                                      {get_in, 2},
                                      {hd, 1},
                                      {inspect, 1},
                                      {inspect, 2},
                                      {is_atom, 1},
                                      {is_binary, 1},
                                      {is_bitstring, 1},
                                      {is_boolean, 1},
                                      {is_float, 1},
                                      {is_function, 1},
                                      {is_function, 2},
                                      {is_integer, 1},
                                      {is_list, 1},
                                      {is_map, 1},
                                      {is_map_key, 2},
                                      {is_number, 1},
                                      {is_pid, 1},
                                      {is_port, 1},
                                      {is_reference, 1},
                                      {is_tuple, 1},
                                      {length, 1},
                                      {'macro_exported?', 3},
                                      {make_ref, 0},
                                      {map_size, 1},
                                      {max, 2},
                                      {min, 2},
                                      {node, 0},
                                      {node, 1},
                                      {'not', 1},
                                      {pop_in, 2},
                                      {put_elem, 3},
                                      {put_in, 3},
                                      {'rem', 2},
                                      {round, 1},
                                      {self, 0},
                                      {send, 2},
                                      {spawn, 1},
                                      {spawn, 3},
                                      {spawn_link, 1},
                                      {spawn_link, 3},
                                      {spawn_monitor, 1},
                                      {spawn_monitor, 3},
                                      {struct, 1},
                                      {struct, 2},
                                      {'struct!', 1},
                                      {'struct!', 2},
                                      {throw, 1},
                                      {tl, 1},
                                      {trunc, 1},
                                      {tuple_size, 1},
                                      {update_in, 3}]}],
                               lexical_tracker => nil, line => 132,
                               macro_aliases => [],
                               macros =>
                                   [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                    {'Elixir.TypeCheck.Macros',
                                     [{'@', 1},
                                      {'opaque!', 1},
                                      {'spec!', 1},
                                      {'type!', 1},
                                      {'typep!', 1}]},
                                    {'Elixir.Kernel',
                                     [{'!', 1},
                                      {'&&', 2},
                                      {'..', 2},
                                      {'<>', 2},
                                      {'alias!', 1},
                                      {'and', 2},
                                      {binding, 0},
                                      {binding, 1},
                                      {def, 1},
                                      {def, 2},
                                      {defdelegate, 2},
                                      {defexception, 1},
                                      {defguard, 1},
                                      {defguardp, 1},
                                      {defimpl, 2},
                                      {defimpl, 3},
                                      {defmacro, 1},
                                      {defmacro, 2},
                                      {defmacrop, 1},
                                      {defmacrop, 2},
                                      {defmodule, 2},
                                      {defoverridable, 1},
                                      {defp, 1},
                                      {defp, 2},
                                      {defprotocol, 2},
                                      {defstruct, 1},
                                      {destructure, 2},
                                      {get_and_update_in, 2},
                                      {'if', 2},
                                      {in, 2},
                                      {is_nil, 1},
                                      {is_struct, 1},
                                      {'match?', 2},
                                      {'or', 2},
                                      {pop_in, 1},
                                      {put_in, 2},
                                      {raise, 1},
                                      {raise, 2},
                                      {reraise, 2},
                                      {reraise, 3},
                                      {sigil_C, 2},
                                      {sigil_D, 2},
                                      {sigil_N, 2},
                                      {sigil_R, 2},
                                      {sigil_S, 2},
                                      {sigil_T, 2},
                                      {sigil_U, 2},
                                      {sigil_W, 2},
                                      {sigil_c, 2},
                                      {sigil_r, 2},
                                      {sigil_s, 2},
                                      {sigil_w, 2},
                                      {to_char_list, 1},
                                      {to_charlist, 1},
                                      {to_string, 1},
                                      {unless, 2},
                                      {update_in, 2},
                                      {use, 1},
                                      {use, 2},
                                      {'var!', 1},
                                      {'var!', 2},
                                      {'|>', 2},
                                      {'||', 2}]},
                                    {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     [{'if_recompiling?', 1}, {recompile, 2}]}],
                               module => 'Elixir.TypeCheck.Builtin',
                               prematch_vars => warn,
                               requires =>
                                   ['Elixir.Application',
                                    'Elixir.Kernel',
                                    'Elixir.Kernel.Typespec',
                                    'Elixir.TypeCheck',
                                    'Elixir.TypeCheck.Builtin',
                                    'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                    'Elixir.TypeCheck.Internals.ToTypespec',
                                    'Elixir.TypeCheck.Macros'],
                               tracers => [elixir_lexical],
                               unused_vars => {#{}, 0}, vars => []}).

byte() ->
    'Elixir.TypeCheck.Builtin':range(#{'__struct__' =>
                                           'Elixir.Range',
                                       first => 0, last => 255}).

char() ->
    'Elixir.TypeCheck.Builtin':range(#{'__struct__' =>
                                           'Elixir.Range',
                                       first => 0, last => 1114111}).

charlist() ->
    'Elixir.TypeCheck.Builtin':list('Elixir.TypeCheck.Builtin':char()).

find_matching_module(_caller@1, _name@1, _arity@1) ->
    erlang:element(1,
                   'Elixir.Enum':find(case _caller@1 of
                                          #{functions := _@1} -> _@1;
                                          _@1 when erlang:is_map(_@1) ->
                                              erlang:error({badkey,
                                                            functions,
                                                            _@1});
                                          _@1 -> _@1:functions()
                                      end,
                                      {case _caller@1 of
                                           #{module := _@2} -> _@2;
                                           _@2 when erlang:is_map(_@2) ->
                                               erlang:error({badkey,
                                                             module,
                                                             _@2});
                                           _@2 -> _@2:module()
                                       end,
                                       []},
                                      fun ({__module@1,
                                            _functions_with_arities@1}) ->
                                              'Elixir.Enum':'any?'(_functions_with_arities@1,
                                                                   fun (_@3) ->
                                                                           _@3
                                                                               ==
                                                                               {_name@1,
                                                                                _arity@1}
                                                                   end)
                                      end)).

fixed_list(_list@1 = #{'__struct__' :=
                           'Elixir.TypeCheck.Builtin.FixedList'}) ->
    _list@1;
fixed_list(_element_types@1)
    when erlang:is_list(_element_types@1) ->
    'Elixir.Enum':map(_element_types@1,
                      fun 'Elixir.TypeCheck.Type':'ensure_type!'/1),
    ('Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.FixedList',
                              #{'__struct__' => 'Elixir.Macro.Env',
                                aliases => [], context => nil,
                                context_modules => ['Elixir.TypeCheck.Builtin'],
                                contextual_vars => [],
                                current_vars =>
                                    {#{{element_types, nil} => 0},
                                     #{{element_types, nil} => 0}},
                                file =>
                                    <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                      "nal/elixir/type_check/lib/type_check/builtin."
                                      "ex">>,
                                function => {fixed_list, 1},
                                functions =>
                                    [{'Elixir.TypeCheck.Builtin',
                                      [{any, 0},
                                       {arity, 0},
                                       {as_boolean, 1},
                                       {atom, 0},
                                       {binary, 0},
                                       {bitstring, 0},
                                       {boolean, 0},
                                       {byte, 0},
                                       {char, 0},
                                       {charlist, 0},
                                       {fixed_list, 1},
                                       {fixed_map, 1},
                                       {fixed_tuple, 1},
                                       {float, 0},
                                       {'fun', 0},
                                       {function, 0},
                                       {guarded_by, 2},
                                       {integer, 0},
                                       {keyword, 0},
                                       {keyword, 1},
                                       {lazy_explicit, 3},
                                       {list, 0},
                                       {list, 1},
                                       {literal, 1},
                                       {map, 0},
                                       {map, 2},
                                       {mfa, 0},
                                       {module, 0},
                                       {named_type, 2},
                                       {neg_integer, 0},
                                       {no_return, 0},
                                       {non_neg_integer, 0},
                                       {none, 0},
                                       {number, 0},
                                       {one_of, 1},
                                       {one_of, 2},
                                       {pos_integer, 0},
                                       {range, 1},
                                       {range, 2},
                                       {term, 0},
                                       {tuple, 0},
                                       {tuple, 1}]},
                                     {'Elixir.Kernel',
                                      [{'!=', 2},
                                       {'!==', 2},
                                       {'*', 2},
                                       {'+', 1},
                                       {'+', 2},
                                       {'++', 2},
                                       {'-', 1},
                                       {'-', 2},
                                       {'--', 2},
                                       {'/', 2},
                                       {'<', 2},
                                       {'<=', 2},
                                       {'==', 2},
                                       {'===', 2},
                                       {'=~', 2},
                                       {'>', 2},
                                       {'>=', 2},
                                       {abs, 1},
                                       {apply, 2},
                                       {apply, 3},
                                       {binary_part, 3},
                                       {bit_size, 1},
                                       {byte_size, 1},
                                       {ceil, 1},
                                       {'div', 2},
                                       {elem, 2},
                                       {exit, 1},
                                       {floor, 1},
                                       {'function_exported?', 3},
                                       {get_and_update_in, 3},
                                       {get_in, 2},
                                       {hd, 1},
                                       {inspect, 1},
                                       {inspect, 2},
                                       {is_atom, 1},
                                       {is_binary, 1},
                                       {is_bitstring, 1},
                                       {is_boolean, 1},
                                       {is_float, 1},
                                       {is_function, 1},
                                       {is_function, 2},
                                       {is_integer, 1},
                                       {is_list, 1},
                                       {is_map, 1},
                                       {is_map_key, 2},
                                       {is_number, 1},
                                       {is_pid, 1},
                                       {is_port, 1},
                                       {is_reference, 1},
                                       {is_tuple, 1},
                                       {length, 1},
                                       {'macro_exported?', 3},
                                       {make_ref, 0},
                                       {map_size, 1},
                                       {max, 2},
                                       {min, 2},
                                       {node, 0},
                                       {node, 1},
                                       {'not', 1},
                                       {pop_in, 2},
                                       {put_elem, 3},
                                       {put_in, 3},
                                       {'rem', 2},
                                       {round, 1},
                                       {self, 0},
                                       {send, 2},
                                       {spawn, 1},
                                       {spawn, 3},
                                       {spawn_link, 1},
                                       {spawn_link, 3},
                                       {spawn_monitor, 1},
                                       {spawn_monitor, 3},
                                       {struct, 1},
                                       {struct, 2},
                                       {'struct!', 1},
                                       {'struct!', 2},
                                       {throw, 1},
                                       {tl, 1},
                                       {trunc, 1},
                                       {tuple_size, 1},
                                       {update_in, 3}]}],
                                lexical_tracker => nil, line => 599,
                                macro_aliases => [],
                                macros =>
                                    [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                     {'Elixir.TypeCheck.Macros',
                                      [{'@', 1},
                                       {'opaque!', 1},
                                       {'spec!', 1},
                                       {'type!', 1},
                                       {'typep!', 1}]},
                                     {'Elixir.Kernel',
                                      [{'!', 1},
                                       {'&&', 2},
                                       {'..', 2},
                                       {'<>', 2},
                                       {'alias!', 1},
                                       {'and', 2},
                                       {binding, 0},
                                       {binding, 1},
                                       {def, 1},
                                       {def, 2},
                                       {defdelegate, 2},
                                       {defexception, 1},
                                       {defguard, 1},
                                       {defguardp, 1},
                                       {defimpl, 2},
                                       {defimpl, 3},
                                       {defmacro, 1},
                                       {defmacro, 2},
                                       {defmacrop, 1},
                                       {defmacrop, 2},
                                       {defmodule, 2},
                                       {defoverridable, 1},
                                       {defp, 1},
                                       {defp, 2},
                                       {defprotocol, 2},
                                       {defstruct, 1},
                                       {destructure, 2},
                                       {get_and_update_in, 2},
                                       {'if', 2},
                                       {in, 2},
                                       {is_nil, 1},
                                       {is_struct, 1},
                                       {'match?', 2},
                                       {'or', 2},
                                       {pop_in, 1},
                                       {put_in, 2},
                                       {raise, 1},
                                       {raise, 2},
                                       {reraise, 2},
                                       {reraise, 3},
                                       {sigil_C, 2},
                                       {sigil_D, 2},
                                       {sigil_N, 2},
                                       {sigil_R, 2},
                                       {sigil_S, 2},
                                       {sigil_T, 2},
                                       {sigil_U, 2},
                                       {sigil_W, 2},
                                       {sigil_c, 2},
                                       {sigil_r, 2},
                                       {sigil_s, 2},
                                       {sigil_w, 2},
                                       {to_char_list, 1},
                                       {to_charlist, 1},
                                       {to_string, 1},
                                       {unless, 2},
                                       {update_in, 2},
                                       {use, 1},
                                       {use, 2},
                                       {'var!', 1},
                                       {'var!', 2},
                                       {'|>', 2},
                                       {'||', 2}]},
                                     {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                      [{'if_recompiling?', 1},
                                       {recompile, 2}]}],
                                module => 'Elixir.TypeCheck.Builtin',
                                prematch_vars => warn,
                                requires =>
                                    ['Elixir.Application',
                                     'Elixir.Kernel',
                                     'Elixir.Kernel.Typespec',
                                     'Elixir.TypeCheck',
                                     'Elixir.TypeCheck.Builtin',
                                     'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     'Elixir.TypeCheck.Internals.ToTypespec',
                                     'Elixir.TypeCheck.Macros'],
                                tracers => [elixir_lexical],
                                unused_vars =>
                                    {#{{element_types, 0} => false}, 1},
                                vars => [{element_types, nil}]}))#{element_types
                                                                       =>
                                                                       _element_types@1}.

fixed_map(_map@1 = #{'__struct__' :=
                         'Elixir.TypeCheck.Builtin.FixedMap'}) ->
    _map@1;
fixed_map(_list@1 = #{'__struct__' :=
                          'Elixir.TypeCheck.Builtin.FixedList'}) ->
    'Elixir.TypeCheck.Builtin':fixed_map('Elixir.Enum':map(case
                                                               _list@1
                                                               of
                                                               #{element_types
                                                                     := _@1} ->
                                                                   _@1;
                                                               _@1
                                                                   when
                                                                     erlang:is_map(_@1) ->
                                                                   erlang:error({badkey,
                                                                                 element_types,
                                                                                 _@1});
                                                               _@1 ->
                                                                   _@1:element_types()
                                                           end,
                                                           fun (#{'__struct__'
                                                                      :=
                                                                      'Elixir.TypeCheck.Builtin.FixedTuple',
                                                                  element_types
                                                                      :=
                                                                      _element_types@1})
                                                                   when
                                                                     erlang:length(_element_types@1)
                                                                         == 2 ->
                                                                   {erlang:hd(_element_types@1),
                                                                    erlang:hd(erlang:tl(_element_types@1))};
                                                               (_tuple@1 =
                                                                    #{'__struct__'
                                                                          :=
                                                                          'Elixir.TypeCheck.Builtin.FixedTuple',
                                                                      element_types
                                                                          :=
                                                                          _element_types@2})
                                                                   when
                                                                     erlang:length(_element_types@2)
                                                                         /= 2 ->
                                                                   erlang:error('Elixir.RuntimeError':exception(<<"Improper type passed to `fixed_map/1` ",
                                                                                                                  ('Elixir.Kernel':inspect(_tuple@1))/binary>>));
                                                               (_thing@1) ->
                                                                   'Elixir.TypeCheck.Type':'ensure_type!'(_thing@1)
                                                           end));
fixed_map(_keywords@1)
    when erlang:is_map(_keywords@1) orelse
             erlang:is_list(_keywords@1) ->
    'Elixir.Enum':map(_keywords@1,
                      fun (_@1) ->
                              'Elixir.TypeCheck.Type':'ensure_type!'(erlang:element(2,
                                                                                    _@1))
                      end),
    ('Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.FixedMap',
                              #{'__struct__' => 'Elixir.Macro.Env',
                                aliases => [], context => nil,
                                context_modules => ['Elixir.TypeCheck.Builtin'],
                                contextual_vars => [],
                                current_vars =>
                                    {#{{keywords, nil} => 0},
                                     #{{keywords, nil} => 0}},
                                file =>
                                    <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                      "nal/elixir/type_check/lib/type_check/builtin."
                                      "ex">>,
                                function => {fixed_map, 1},
                                functions =>
                                    [{'Elixir.TypeCheck.Builtin',
                                      [{any, 0},
                                       {arity, 0},
                                       {as_boolean, 1},
                                       {atom, 0},
                                       {binary, 0},
                                       {bitstring, 0},
                                       {boolean, 0},
                                       {byte, 0},
                                       {char, 0},
                                       {charlist, 0},
                                       {fixed_list, 1},
                                       {fixed_map, 1},
                                       {fixed_tuple, 1},
                                       {float, 0},
                                       {'fun', 0},
                                       {function, 0},
                                       {guarded_by, 2},
                                       {integer, 0},
                                       {keyword, 0},
                                       {keyword, 1},
                                       {lazy_explicit, 3},
                                       {list, 0},
                                       {list, 1},
                                       {literal, 1},
                                       {map, 0},
                                       {map, 2},
                                       {mfa, 0},
                                       {module, 0},
                                       {named_type, 2},
                                       {neg_integer, 0},
                                       {no_return, 0},
                                       {non_neg_integer, 0},
                                       {none, 0},
                                       {number, 0},
                                       {one_of, 1},
                                       {one_of, 2},
                                       {pos_integer, 0},
                                       {range, 1},
                                       {range, 2},
                                       {term, 0},
                                       {tuple, 0},
                                       {tuple, 1}]},
                                     {'Elixir.Kernel',
                                      [{'!=', 2},
                                       {'!==', 2},
                                       {'*', 2},
                                       {'+', 1},
                                       {'+', 2},
                                       {'++', 2},
                                       {'-', 1},
                                       {'-', 2},
                                       {'--', 2},
                                       {'/', 2},
                                       {'<', 2},
                                       {'<=', 2},
                                       {'==', 2},
                                       {'===', 2},
                                       {'=~', 2},
                                       {'>', 2},
                                       {'>=', 2},
                                       {abs, 1},
                                       {apply, 2},
                                       {apply, 3},
                                       {binary_part, 3},
                                       {bit_size, 1},
                                       {byte_size, 1},
                                       {ceil, 1},
                                       {'div', 2},
                                       {elem, 2},
                                       {exit, 1},
                                       {floor, 1},
                                       {'function_exported?', 3},
                                       {get_and_update_in, 3},
                                       {get_in, 2},
                                       {hd, 1},
                                       {inspect, 1},
                                       {inspect, 2},
                                       {is_atom, 1},
                                       {is_binary, 1},
                                       {is_bitstring, 1},
                                       {is_boolean, 1},
                                       {is_float, 1},
                                       {is_function, 1},
                                       {is_function, 2},
                                       {is_integer, 1},
                                       {is_list, 1},
                                       {is_map, 1},
                                       {is_map_key, 2},
                                       {is_number, 1},
                                       {is_pid, 1},
                                       {is_port, 1},
                                       {is_reference, 1},
                                       {is_tuple, 1},
                                       {length, 1},
                                       {'macro_exported?', 3},
                                       {make_ref, 0},
                                       {map_size, 1},
                                       {max, 2},
                                       {min, 2},
                                       {node, 0},
                                       {node, 1},
                                       {'not', 1},
                                       {pop_in, 2},
                                       {put_elem, 3},
                                       {put_in, 3},
                                       {'rem', 2},
                                       {round, 1},
                                       {self, 0},
                                       {send, 2},
                                       {spawn, 1},
                                       {spawn, 3},
                                       {spawn_link, 1},
                                       {spawn_link, 3},
                                       {spawn_monitor, 1},
                                       {spawn_monitor, 3},
                                       {struct, 1},
                                       {struct, 2},
                                       {'struct!', 1},
                                       {'struct!', 2},
                                       {throw, 1},
                                       {tl, 1},
                                       {trunc, 1},
                                       {tuple_size, 1},
                                       {update_in, 3}]}],
                                lexical_tracker => nil, line => 574,
                                macro_aliases => [],
                                macros =>
                                    [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                     {'Elixir.TypeCheck.Macros',
                                      [{'@', 1},
                                       {'opaque!', 1},
                                       {'spec!', 1},
                                       {'type!', 1},
                                       {'typep!', 1}]},
                                     {'Elixir.Kernel',
                                      [{'!', 1},
                                       {'&&', 2},
                                       {'..', 2},
                                       {'<>', 2},
                                       {'alias!', 1},
                                       {'and', 2},
                                       {binding, 0},
                                       {binding, 1},
                                       {def, 1},
                                       {def, 2},
                                       {defdelegate, 2},
                                       {defexception, 1},
                                       {defguard, 1},
                                       {defguardp, 1},
                                       {defimpl, 2},
                                       {defimpl, 3},
                                       {defmacro, 1},
                                       {defmacro, 2},
                                       {defmacrop, 1},
                                       {defmacrop, 2},
                                       {defmodule, 2},
                                       {defoverridable, 1},
                                       {defp, 1},
                                       {defp, 2},
                                       {defprotocol, 2},
                                       {defstruct, 1},
                                       {destructure, 2},
                                       {get_and_update_in, 2},
                                       {'if', 2},
                                       {in, 2},
                                       {is_nil, 1},
                                       {is_struct, 1},
                                       {'match?', 2},
                                       {'or', 2},
                                       {pop_in, 1},
                                       {put_in, 2},
                                       {raise, 1},
                                       {raise, 2},
                                       {reraise, 2},
                                       {reraise, 3},
                                       {sigil_C, 2},
                                       {sigil_D, 2},
                                       {sigil_N, 2},
                                       {sigil_R, 2},
                                       {sigil_S, 2},
                                       {sigil_T, 2},
                                       {sigil_U, 2},
                                       {sigil_W, 2},
                                       {sigil_c, 2},
                                       {sigil_r, 2},
                                       {sigil_s, 2},
                                       {sigil_w, 2},
                                       {to_char_list, 1},
                                       {to_charlist, 1},
                                       {to_string, 1},
                                       {unless, 2},
                                       {update_in, 2},
                                       {use, 1},
                                       {use, 2},
                                       {'var!', 1},
                                       {'var!', 2},
                                       {'|>', 2},
                                       {'||', 2}]},
                                     {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                      [{'if_recompiling?', 1},
                                       {recompile, 2}]}],
                                module => 'Elixir.TypeCheck.Builtin',
                                prematch_vars => warn,
                                requires =>
                                    ['Elixir.Application',
                                     'Elixir.Kernel',
                                     'Elixir.Kernel.Typespec',
                                     'Elixir.TypeCheck',
                                     'Elixir.TypeCheck.Builtin',
                                     'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     'Elixir.TypeCheck.Internals.ToTypespec',
                                     'Elixir.TypeCheck.Macros'],
                                tracers => [elixir_lexical],
                                unused_vars => {#{{keywords, 0} => false}, 2},
                                vars => [{keywords, nil}]}))#{keypairs =>
                                                                  'Elixir.Enum':into(_keywords@1,
                                                                                     [])}.

fixed_tuple(_list@1 = #{'__struct__' :=
                            'Elixir.TypeCheck.Builtin.FixedList'}) ->
    'Elixir.TypeCheck.Builtin':fixed_tuple(case _list@1 of
                                               #{element_types := _@1} -> _@1;
                                               _@1 when erlang:is_map(_@1) ->
                                                   erlang:error({badkey,
                                                                 element_types,
                                                                 _@1});
                                               _@1 -> _@1:element_types()
                                           end);
fixed_tuple(_element_types_list@1)
    when erlang:is_list(_element_types_list@1) ->
    'Elixir.Enum':map(_element_types_list@1,
                      fun 'Elixir.TypeCheck.Type':'ensure_type!'/1),
    ('Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.FixedTuple',
                              #{'__struct__' => 'Elixir.Macro.Env',
                                aliases => [], context => nil,
                                context_modules => ['Elixir.TypeCheck.Builtin'],
                                contextual_vars => [],
                                current_vars =>
                                    {#{{element_types_list, nil} => 0},
                                     #{{element_types_list, nil} => 0}},
                                file =>
                                    <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                      "nal/elixir/type_check/lib/type_check/builtin."
                                      "ex">>,
                                function => {fixed_tuple, 1},
                                functions =>
                                    [{'Elixir.TypeCheck.Builtin',
                                      [{any, 0},
                                       {arity, 0},
                                       {as_boolean, 1},
                                       {atom, 0},
                                       {binary, 0},
                                       {bitstring, 0},
                                       {boolean, 0},
                                       {byte, 0},
                                       {char, 0},
                                       {charlist, 0},
                                       {fixed_list, 1},
                                       {fixed_map, 1},
                                       {fixed_tuple, 1},
                                       {float, 0},
                                       {'fun', 0},
                                       {function, 0},
                                       {guarded_by, 2},
                                       {integer, 0},
                                       {keyword, 0},
                                       {keyword, 1},
                                       {lazy_explicit, 3},
                                       {list, 0},
                                       {list, 1},
                                       {literal, 1},
                                       {map, 0},
                                       {map, 2},
                                       {mfa, 0},
                                       {module, 0},
                                       {named_type, 2},
                                       {neg_integer, 0},
                                       {no_return, 0},
                                       {non_neg_integer, 0},
                                       {none, 0},
                                       {number, 0},
                                       {one_of, 1},
                                       {one_of, 2},
                                       {pos_integer, 0},
                                       {range, 1},
                                       {range, 2},
                                       {term, 0},
                                       {tuple, 0},
                                       {tuple, 1}]},
                                     {'Elixir.Kernel',
                                      [{'!=', 2},
                                       {'!==', 2},
                                       {'*', 2},
                                       {'+', 1},
                                       {'+', 2},
                                       {'++', 2},
                                       {'-', 1},
                                       {'-', 2},
                                       {'--', 2},
                                       {'/', 2},
                                       {'<', 2},
                                       {'<=', 2},
                                       {'==', 2},
                                       {'===', 2},
                                       {'=~', 2},
                                       {'>', 2},
                                       {'>=', 2},
                                       {abs, 1},
                                       {apply, 2},
                                       {apply, 3},
                                       {binary_part, 3},
                                       {bit_size, 1},
                                       {byte_size, 1},
                                       {ceil, 1},
                                       {'div', 2},
                                       {elem, 2},
                                       {exit, 1},
                                       {floor, 1},
                                       {'function_exported?', 3},
                                       {get_and_update_in, 3},
                                       {get_in, 2},
                                       {hd, 1},
                                       {inspect, 1},
                                       {inspect, 2},
                                       {is_atom, 1},
                                       {is_binary, 1},
                                       {is_bitstring, 1},
                                       {is_boolean, 1},
                                       {is_float, 1},
                                       {is_function, 1},
                                       {is_function, 2},
                                       {is_integer, 1},
                                       {is_list, 1},
                                       {is_map, 1},
                                       {is_map_key, 2},
                                       {is_number, 1},
                                       {is_pid, 1},
                                       {is_port, 1},
                                       {is_reference, 1},
                                       {is_tuple, 1},
                                       {length, 1},
                                       {'macro_exported?', 3},
                                       {make_ref, 0},
                                       {map_size, 1},
                                       {max, 2},
                                       {min, 2},
                                       {node, 0},
                                       {node, 1},
                                       {'not', 1},
                                       {pop_in, 2},
                                       {put_elem, 3},
                                       {put_in, 3},
                                       {'rem', 2},
                                       {round, 1},
                                       {self, 0},
                                       {send, 2},
                                       {spawn, 1},
                                       {spawn, 3},
                                       {spawn_link, 1},
                                       {spawn_link, 3},
                                       {spawn_monitor, 1},
                                       {spawn_monitor, 3},
                                       {struct, 1},
                                       {struct, 2},
                                       {'struct!', 1},
                                       {'struct!', 2},
                                       {throw, 1},
                                       {tl, 1},
                                       {trunc, 1},
                                       {tuple_size, 1},
                                       {update_in, 3}]}],
                                lexical_tracker => nil, line => 350,
                                macro_aliases => [],
                                macros =>
                                    [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                     {'Elixir.TypeCheck.Macros',
                                      [{'@', 1},
                                       {'opaque!', 1},
                                       {'spec!', 1},
                                       {'type!', 1},
                                       {'typep!', 1}]},
                                     {'Elixir.Kernel',
                                      [{'!', 1},
                                       {'&&', 2},
                                       {'..', 2},
                                       {'<>', 2},
                                       {'alias!', 1},
                                       {'and', 2},
                                       {binding, 0},
                                       {binding, 1},
                                       {def, 1},
                                       {def, 2},
                                       {defdelegate, 2},
                                       {defexception, 1},
                                       {defguard, 1},
                                       {defguardp, 1},
                                       {defimpl, 2},
                                       {defimpl, 3},
                                       {defmacro, 1},
                                       {defmacro, 2},
                                       {defmacrop, 1},
                                       {defmacrop, 2},
                                       {defmodule, 2},
                                       {defoverridable, 1},
                                       {defp, 1},
                                       {defp, 2},
                                       {defprotocol, 2},
                                       {defstruct, 1},
                                       {destructure, 2},
                                       {get_and_update_in, 2},
                                       {'if', 2},
                                       {in, 2},
                                       {is_nil, 1},
                                       {is_struct, 1},
                                       {'match?', 2},
                                       {'or', 2},
                                       {pop_in, 1},
                                       {put_in, 2},
                                       {raise, 1},
                                       {raise, 2},
                                       {reraise, 2},
                                       {reraise, 3},
                                       {sigil_C, 2},
                                       {sigil_D, 2},
                                       {sigil_N, 2},
                                       {sigil_R, 2},
                                       {sigil_S, 2},
                                       {sigil_T, 2},
                                       {sigil_U, 2},
                                       {sigil_W, 2},
                                       {sigil_c, 2},
                                       {sigil_r, 2},
                                       {sigil_s, 2},
                                       {sigil_w, 2},
                                       {to_char_list, 1},
                                       {to_charlist, 1},
                                       {to_string, 1},
                                       {unless, 2},
                                       {update_in, 2},
                                       {use, 1},
                                       {use, 2},
                                       {'var!', 1},
                                       {'var!', 2},
                                       {'|>', 2},
                                       {'||', 2}]},
                                     {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                      [{'if_recompiling?', 1},
                                       {recompile, 2}]}],
                                module => 'Elixir.TypeCheck.Builtin',
                                prematch_vars => warn,
                                requires =>
                                    ['Elixir.Application',
                                     'Elixir.Kernel',
                                     'Elixir.Kernel.Typespec',
                                     'Elixir.TypeCheck',
                                     'Elixir.TypeCheck.Builtin',
                                     'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     'Elixir.TypeCheck.Internals.ToTypespec',
                                     'Elixir.TypeCheck.Macros'],
                                tracers => [elixir_lexical],
                                unused_vars =>
                                    {#{{element_types_list, 0} => false}, 1},
                                vars =>
                                    [{element_types_list,
                                      nil}]}))#{element_types =>
                                                    _element_types_list@1}.

float() ->
    'Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.Float',
                             #{'__struct__' => 'Elixir.Macro.Env',
                               aliases => [], context => nil,
                               context_modules => ['Elixir.TypeCheck.Builtin'],
                               contextual_vars => [],
                               current_vars => {#{}, #{}},
                               file =>
                                   <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                     "nal/elixir/type_check/lib/type_check/builtin."
                                     "ex">>,
                               function => {float, 0},
                               functions =>
                                   [{'Elixir.TypeCheck.Builtin',
                                     [{any, 0},
                                      {arity, 0},
                                      {as_boolean, 1},
                                      {atom, 0},
                                      {binary, 0},
                                      {bitstring, 0},
                                      {boolean, 0},
                                      {byte, 0},
                                      {char, 0},
                                      {charlist, 0},
                                      {fixed_list, 1},
                                      {fixed_map, 1},
                                      {fixed_tuple, 1},
                                      {float, 0},
                                      {'fun', 0},
                                      {function, 0},
                                      {guarded_by, 2},
                                      {integer, 0},
                                      {keyword, 0},
                                      {keyword, 1},
                                      {lazy_explicit, 3},
                                      {list, 0},
                                      {list, 1},
                                      {literal, 1},
                                      {map, 0},
                                      {map, 2},
                                      {mfa, 0},
                                      {module, 0},
                                      {named_type, 2},
                                      {neg_integer, 0},
                                      {no_return, 0},
                                      {non_neg_integer, 0},
                                      {none, 0},
                                      {number, 0},
                                      {one_of, 1},
                                      {one_of, 2},
                                      {pos_integer, 0},
                                      {range, 1},
                                      {range, 2},
                                      {term, 0},
                                      {tuple, 0},
                                      {tuple, 1}]},
                                    {'Elixir.Kernel',
                                     [{'!=', 2},
                                      {'!==', 2},
                                      {'*', 2},
                                      {'+', 1},
                                      {'+', 2},
                                      {'++', 2},
                                      {'-', 1},
                                      {'-', 2},
                                      {'--', 2},
                                      {'/', 2},
                                      {'<', 2},
                                      {'<=', 2},
                                      {'==', 2},
                                      {'===', 2},
                                      {'=~', 2},
                                      {'>', 2},
                                      {'>=', 2},
                                      {abs, 1},
                                      {apply, 2},
                                      {apply, 3},
                                      {binary_part, 3},
                                      {bit_size, 1},
                                      {byte_size, 1},
                                      {ceil, 1},
                                      {'div', 2},
                                      {elem, 2},
                                      {exit, 1},
                                      {floor, 1},
                                      {'function_exported?', 3},
                                      {get_and_update_in, 3},
                                      {get_in, 2},
                                      {hd, 1},
                                      {inspect, 1},
                                      {inspect, 2},
                                      {is_atom, 1},
                                      {is_binary, 1},
                                      {is_bitstring, 1},
                                      {is_boolean, 1},
                                      {is_float, 1},
                                      {is_function, 1},
                                      {is_function, 2},
                                      {is_integer, 1},
                                      {is_list, 1},
                                      {is_map, 1},
                                      {is_map_key, 2},
                                      {is_number, 1},
                                      {is_pid, 1},
                                      {is_port, 1},
                                      {is_reference, 1},
                                      {is_tuple, 1},
                                      {length, 1},
                                      {'macro_exported?', 3},
                                      {make_ref, 0},
                                      {map_size, 1},
                                      {max, 2},
                                      {min, 2},
                                      {node, 0},
                                      {node, 1},
                                      {'not', 1},
                                      {pop_in, 2},
                                      {put_elem, 3},
                                      {put_in, 3},
                                      {'rem', 2},
                                      {round, 1},
                                      {self, 0},
                                      {send, 2},
                                      {spawn, 1},
                                      {spawn, 3},
                                      {spawn_link, 1},
                                      {spawn_link, 3},
                                      {spawn_monitor, 1},
                                      {spawn_monitor, 3},
                                      {struct, 1},
                                      {struct, 2},
                                      {'struct!', 1},
                                      {'struct!', 2},
                                      {throw, 1},
                                      {tl, 1},
                                      {trunc, 1},
                                      {tuple_size, 1},
                                      {update_in, 3}]}],
                               lexical_tracker => nil, line => 230,
                               macro_aliases => [],
                               macros =>
                                   [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                    {'Elixir.TypeCheck.Macros',
                                     [{'@', 1},
                                      {'opaque!', 1},
                                      {'spec!', 1},
                                      {'type!', 1},
                                      {'typep!', 1}]},
                                    {'Elixir.Kernel',
                                     [{'!', 1},
                                      {'&&', 2},
                                      {'..', 2},
                                      {'<>', 2},
                                      {'alias!', 1},
                                      {'and', 2},
                                      {binding, 0},
                                      {binding, 1},
                                      {def, 1},
                                      {def, 2},
                                      {defdelegate, 2},
                                      {defexception, 1},
                                      {defguard, 1},
                                      {defguardp, 1},
                                      {defimpl, 2},
                                      {defimpl, 3},
                                      {defmacro, 1},
                                      {defmacro, 2},
                                      {defmacrop, 1},
                                      {defmacrop, 2},
                                      {defmodule, 2},
                                      {defoverridable, 1},
                                      {defp, 1},
                                      {defp, 2},
                                      {defprotocol, 2},
                                      {defstruct, 1},
                                      {destructure, 2},
                                      {get_and_update_in, 2},
                                      {'if', 2},
                                      {in, 2},
                                      {is_nil, 1},
                                      {is_struct, 1},
                                      {'match?', 2},
                                      {'or', 2},
                                      {pop_in, 1},
                                      {put_in, 2},
                                      {raise, 1},
                                      {raise, 2},
                                      {reraise, 2},
                                      {reraise, 3},
                                      {sigil_C, 2},
                                      {sigil_D, 2},
                                      {sigil_N, 2},
                                      {sigil_R, 2},
                                      {sigil_S, 2},
                                      {sigil_T, 2},
                                      {sigil_U, 2},
                                      {sigil_W, 2},
                                      {sigil_c, 2},
                                      {sigil_r, 2},
                                      {sigil_s, 2},
                                      {sigil_w, 2},
                                      {to_char_list, 1},
                                      {to_charlist, 1},
                                      {to_string, 1},
                                      {unless, 2},
                                      {update_in, 2},
                                      {use, 1},
                                      {use, 2},
                                      {'var!', 1},
                                      {'var!', 2},
                                      {'|>', 2},
                                      {'||', 2}]},
                                    {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     [{'if_recompiling?', 1}, {recompile, 2}]}],
                               module => 'Elixir.TypeCheck.Builtin',
                               prematch_vars => warn,
                               requires =>
                                   ['Elixir.Application',
                                    'Elixir.Kernel',
                                    'Elixir.Kernel.Typespec',
                                    'Elixir.TypeCheck',
                                    'Elixir.TypeCheck.Builtin',
                                    'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                    'Elixir.TypeCheck.Internals.ToTypespec',
                                    'Elixir.TypeCheck.Macros'],
                               tracers => [elixir_lexical],
                               unused_vars => {#{}, 0}, vars => []}).

'fun'() -> 'Elixir.TypeCheck.Builtin':function().

function() ->
    'Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.Function',
                             #{'__struct__' => 'Elixir.Macro.Env',
                               aliases => [], context => nil,
                               context_modules => ['Elixir.TypeCheck.Builtin'],
                               contextual_vars => [],
                               current_vars => {#{}, #{}},
                               file =>
                                   <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                     "nal/elixir/type_check/lib/type_check/builtin."
                                     "ex">>,
                               function => {function, 0},
                               functions =>
                                   [{'Elixir.TypeCheck.Builtin',
                                     [{any, 0},
                                      {arity, 0},
                                      {as_boolean, 1},
                                      {atom, 0},
                                      {binary, 0},
                                      {bitstring, 0},
                                      {boolean, 0},
                                      {byte, 0},
                                      {char, 0},
                                      {charlist, 0},
                                      {fixed_list, 1},
                                      {fixed_map, 1},
                                      {fixed_tuple, 1},
                                      {float, 0},
                                      {'fun', 0},
                                      {function, 0},
                                      {guarded_by, 2},
                                      {integer, 0},
                                      {keyword, 0},
                                      {keyword, 1},
                                      {lazy_explicit, 3},
                                      {list, 0},
                                      {list, 1},
                                      {literal, 1},
                                      {map, 0},
                                      {map, 2},
                                      {mfa, 0},
                                      {module, 0},
                                      {named_type, 2},
                                      {neg_integer, 0},
                                      {no_return, 0},
                                      {non_neg_integer, 0},
                                      {none, 0},
                                      {number, 0},
                                      {one_of, 1},
                                      {one_of, 2},
                                      {pos_integer, 0},
                                      {range, 1},
                                      {range, 2},
                                      {term, 0},
                                      {tuple, 0},
                                      {tuple, 1}]},
                                    {'Elixir.Kernel',
                                     [{'!=', 2},
                                      {'!==', 2},
                                      {'*', 2},
                                      {'+', 1},
                                      {'+', 2},
                                      {'++', 2},
                                      {'-', 1},
                                      {'-', 2},
                                      {'--', 2},
                                      {'/', 2},
                                      {'<', 2},
                                      {'<=', 2},
                                      {'==', 2},
                                      {'===', 2},
                                      {'=~', 2},
                                      {'>', 2},
                                      {'>=', 2},
                                      {abs, 1},
                                      {apply, 2},
                                      {apply, 3},
                                      {binary_part, 3},
                                      {bit_size, 1},
                                      {byte_size, 1},
                                      {ceil, 1},
                                      {'div', 2},
                                      {elem, 2},
                                      {exit, 1},
                                      {floor, 1},
                                      {'function_exported?', 3},
                                      {get_and_update_in, 3},
                                      {get_in, 2},
                                      {hd, 1},
                                      {inspect, 1},
                                      {inspect, 2},
                                      {is_atom, 1},
                                      {is_binary, 1},
                                      {is_bitstring, 1},
                                      {is_boolean, 1},
                                      {is_float, 1},
                                      {is_function, 1},
                                      {is_function, 2},
                                      {is_integer, 1},
                                      {is_list, 1},
                                      {is_map, 1},
                                      {is_map_key, 2},
                                      {is_number, 1},
                                      {is_pid, 1},
                                      {is_port, 1},
                                      {is_reference, 1},
                                      {is_tuple, 1},
                                      {length, 1},
                                      {'macro_exported?', 3},
                                      {make_ref, 0},
                                      {map_size, 1},
                                      {max, 2},
                                      {min, 2},
                                      {node, 0},
                                      {node, 1},
                                      {'not', 1},
                                      {pop_in, 2},
                                      {put_elem, 3},
                                      {put_in, 3},
                                      {'rem', 2},
                                      {round, 1},
                                      {self, 0},
                                      {send, 2},
                                      {spawn, 1},
                                      {spawn, 3},
                                      {spawn_link, 1},
                                      {spawn_link, 3},
                                      {spawn_monitor, 1},
                                      {spawn_monitor, 3},
                                      {struct, 1},
                                      {struct, 2},
                                      {'struct!', 1},
                                      {'struct!', 2},
                                      {throw, 1},
                                      {tl, 1},
                                      {trunc, 1},
                                      {tuple_size, 1},
                                      {update_in, 3}]}],
                               lexical_tracker => nil, line => 172,
                               macro_aliases => [],
                               macros =>
                                   [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                    {'Elixir.TypeCheck.Macros',
                                     [{'@', 1},
                                      {'opaque!', 1},
                                      {'spec!', 1},
                                      {'type!', 1},
                                      {'typep!', 1}]},
                                    {'Elixir.Kernel',
                                     [{'!', 1},
                                      {'&&', 2},
                                      {'..', 2},
                                      {'<>', 2},
                                      {'alias!', 1},
                                      {'and', 2},
                                      {binding, 0},
                                      {binding, 1},
                                      {def, 1},
                                      {def, 2},
                                      {defdelegate, 2},
                                      {defexception, 1},
                                      {defguard, 1},
                                      {defguardp, 1},
                                      {defimpl, 2},
                                      {defimpl, 3},
                                      {defmacro, 1},
                                      {defmacro, 2},
                                      {defmacrop, 1},
                                      {defmacrop, 2},
                                      {defmodule, 2},
                                      {defoverridable, 1},
                                      {defp, 1},
                                      {defp, 2},
                                      {defprotocol, 2},
                                      {defstruct, 1},
                                      {destructure, 2},
                                      {get_and_update_in, 2},
                                      {'if', 2},
                                      {in, 2},
                                      {is_nil, 1},
                                      {is_struct, 1},
                                      {'match?', 2},
                                      {'or', 2},
                                      {pop_in, 1},
                                      {put_in, 2},
                                      {raise, 1},
                                      {raise, 2},
                                      {reraise, 2},
                                      {reraise, 3},
                                      {sigil_C, 2},
                                      {sigil_D, 2},
                                      {sigil_N, 2},
                                      {sigil_R, 2},
                                      {sigil_S, 2},
                                      {sigil_T, 2},
                                      {sigil_U, 2},
                                      {sigil_W, 2},
                                      {sigil_c, 2},
                                      {sigil_r, 2},
                                      {sigil_s, 2},
                                      {sigil_w, 2},
                                      {to_char_list, 1},
                                      {to_charlist, 1},
                                      {to_string, 1},
                                      {unless, 2},
                                      {update_in, 2},
                                      {use, 1},
                                      {use, 2},
                                      {'var!', 1},
                                      {'var!', 2},
                                      {'|>', 2},
                                      {'||', 2}]},
                                    {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     [{'if_recompiling?', 1}, {recompile, 2}]}],
                               module => 'Elixir.TypeCheck.Builtin',
                               prematch_vars => warn,
                               requires =>
                                   ['Elixir.Application',
                                    'Elixir.Kernel',
                                    'Elixir.Kernel.Typespec',
                                    'Elixir.TypeCheck',
                                    'Elixir.TypeCheck.Builtin',
                                    'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                    'Elixir.TypeCheck.Internals.ToTypespec',
                                    'Elixir.TypeCheck.Macros'],
                               tracers => [elixir_lexical],
                               unused_vars => {#{}, 0}, vars => []}).

guarded_by(_type@1, _guard_ast@1) ->
    'Elixir.TypeCheck.Type':'ensure_type!'(_type@1),
    'Elixir.TypeCheck.Builtin.Guarded':extract_names(_type@1),
    #{type => _type@1, guard => _guard_ast@1,
      '__struct__' => 'Elixir.TypeCheck.Builtin.Guarded'}.

integer() ->
    'Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.Integer',
                             #{'__struct__' => 'Elixir.Macro.Env',
                               aliases => [], context => nil,
                               context_modules => ['Elixir.TypeCheck.Builtin'],
                               contextual_vars => [],
                               current_vars => {#{}, #{}},
                               file =>
                                   <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                     "nal/elixir/type_check/lib/type_check/builtin."
                                     "ex">>,
                               function => {integer, 0},
                               functions =>
                                   [{'Elixir.TypeCheck.Builtin',
                                     [{any, 0},
                                      {arity, 0},
                                      {as_boolean, 1},
                                      {atom, 0},
                                      {binary, 0},
                                      {bitstring, 0},
                                      {boolean, 0},
                                      {byte, 0},
                                      {char, 0},
                                      {charlist, 0},
                                      {fixed_list, 1},
                                      {fixed_map, 1},
                                      {fixed_tuple, 1},
                                      {float, 0},
                                      {'fun', 0},
                                      {function, 0},
                                      {guarded_by, 2},
                                      {integer, 0},
                                      {keyword, 0},
                                      {keyword, 1},
                                      {lazy_explicit, 3},
                                      {list, 0},
                                      {list, 1},
                                      {literal, 1},
                                      {map, 0},
                                      {map, 2},
                                      {mfa, 0},
                                      {module, 0},
                                      {named_type, 2},
                                      {neg_integer, 0},
                                      {no_return, 0},
                                      {non_neg_integer, 0},
                                      {none, 0},
                                      {number, 0},
                                      {one_of, 1},
                                      {one_of, 2},
                                      {pos_integer, 0},
                                      {range, 1},
                                      {range, 2},
                                      {term, 0},
                                      {tuple, 0},
                                      {tuple, 1}]},
                                    {'Elixir.Kernel',
                                     [{'!=', 2},
                                      {'!==', 2},
                                      {'*', 2},
                                      {'+', 1},
                                      {'+', 2},
                                      {'++', 2},
                                      {'-', 1},
                                      {'-', 2},
                                      {'--', 2},
                                      {'/', 2},
                                      {'<', 2},
                                      {'<=', 2},
                                      {'==', 2},
                                      {'===', 2},
                                      {'=~', 2},
                                      {'>', 2},
                                      {'>=', 2},
                                      {abs, 1},
                                      {apply, 2},
                                      {apply, 3},
                                      {binary_part, 3},
                                      {bit_size, 1},
                                      {byte_size, 1},
                                      {ceil, 1},
                                      {'div', 2},
                                      {elem, 2},
                                      {exit, 1},
                                      {floor, 1},
                                      {'function_exported?', 3},
                                      {get_and_update_in, 3},
                                      {get_in, 2},
                                      {hd, 1},
                                      {inspect, 1},
                                      {inspect, 2},
                                      {is_atom, 1},
                                      {is_binary, 1},
                                      {is_bitstring, 1},
                                      {is_boolean, 1},
                                      {is_float, 1},
                                      {is_function, 1},
                                      {is_function, 2},
                                      {is_integer, 1},
                                      {is_list, 1},
                                      {is_map, 1},
                                      {is_map_key, 2},
                                      {is_number, 1},
                                      {is_pid, 1},
                                      {is_port, 1},
                                      {is_reference, 1},
                                      {is_tuple, 1},
                                      {length, 1},
                                      {'macro_exported?', 3},
                                      {make_ref, 0},
                                      {map_size, 1},
                                      {max, 2},
                                      {min, 2},
                                      {node, 0},
                                      {node, 1},
                                      {'not', 1},
                                      {pop_in, 2},
                                      {put_elem, 3},
                                      {put_in, 3},
                                      {'rem', 2},
                                      {round, 1},
                                      {self, 0},
                                      {send, 2},
                                      {spawn, 1},
                                      {spawn, 3},
                                      {spawn_link, 1},
                                      {spawn_link, 3},
                                      {spawn_monitor, 1},
                                      {spawn_monitor, 3},
                                      {struct, 1},
                                      {struct, 2},
                                      {'struct!', 1},
                                      {'struct!', 2},
                                      {throw, 1},
                                      {tl, 1},
                                      {trunc, 1},
                                      {tuple_size, 1},
                                      {update_in, 3}]}],
                               lexical_tracker => nil, line => 190,
                               macro_aliases => [],
                               macros =>
                                   [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                    {'Elixir.TypeCheck.Macros',
                                     [{'@', 1},
                                      {'opaque!', 1},
                                      {'spec!', 1},
                                      {'type!', 1},
                                      {'typep!', 1}]},
                                    {'Elixir.Kernel',
                                     [{'!', 1},
                                      {'&&', 2},
                                      {'..', 2},
                                      {'<>', 2},
                                      {'alias!', 1},
                                      {'and', 2},
                                      {binding, 0},
                                      {binding, 1},
                                      {def, 1},
                                      {def, 2},
                                      {defdelegate, 2},
                                      {defexception, 1},
                                      {defguard, 1},
                                      {defguardp, 1},
                                      {defimpl, 2},
                                      {defimpl, 3},
                                      {defmacro, 1},
                                      {defmacro, 2},
                                      {defmacrop, 1},
                                      {defmacrop, 2},
                                      {defmodule, 2},
                                      {defoverridable, 1},
                                      {defp, 1},
                                      {defp, 2},
                                      {defprotocol, 2},
                                      {defstruct, 1},
                                      {destructure, 2},
                                      {get_and_update_in, 2},
                                      {'if', 2},
                                      {in, 2},
                                      {is_nil, 1},
                                      {is_struct, 1},
                                      {'match?', 2},
                                      {'or', 2},
                                      {pop_in, 1},
                                      {put_in, 2},
                                      {raise, 1},
                                      {raise, 2},
                                      {reraise, 2},
                                      {reraise, 3},
                                      {sigil_C, 2},
                                      {sigil_D, 2},
                                      {sigil_N, 2},
                                      {sigil_R, 2},
                                      {sigil_S, 2},
                                      {sigil_T, 2},
                                      {sigil_U, 2},
                                      {sigil_W, 2},
                                      {sigil_c, 2},
                                      {sigil_r, 2},
                                      {sigil_s, 2},
                                      {sigil_w, 2},
                                      {to_char_list, 1},
                                      {to_charlist, 1},
                                      {to_string, 1},
                                      {unless, 2},
                                      {update_in, 2},
                                      {use, 1},
                                      {use, 2},
                                      {'var!', 1},
                                      {'var!', 2},
                                      {'|>', 2},
                                      {'||', 2}]},
                                    {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     [{'if_recompiling?', 1}, {recompile, 2}]}],
                               module => 'Elixir.TypeCheck.Builtin',
                               prematch_vars => warn,
                               requires =>
                                   ['Elixir.Application',
                                    'Elixir.Kernel',
                                    'Elixir.Kernel.Typespec',
                                    'Elixir.TypeCheck',
                                    'Elixir.TypeCheck.Builtin',
                                    'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                    'Elixir.TypeCheck.Internals.ToTypespec',
                                    'Elixir.TypeCheck.Macros'],
                               tracers => [elixir_lexical],
                               unused_vars => {#{}, 0}, vars => []}).

keyword() ->
    'Elixir.TypeCheck.Builtin':keyword('Elixir.TypeCheck.Builtin':any()).

keyword(_t@1) ->
    'Elixir.TypeCheck.Builtin':list('Elixir.TypeCheck.Builtin':fixed_tuple(['Elixir.TypeCheck.Builtin':atom(),
                                                                            _t@1])).

'MACRO-lazy'(_@CALLER, _type_call_ast@1) ->
    __CALLER__ = elixir_env:linify(_@CALLER),
    _typecheck_options@1 =
        'Elixir.Module':get_attribute(case __CALLER__ of
                                          #{module := _@1} -> _@1;
                                          _@1 when erlang:is_map(_@1) ->
                                              erlang:error({badkey,
                                                            module,
                                                            _@1});
                                          _@1 -> _@1:module()
                                      end,
                                      'Elixir.TypeCheck.Options',
                                      'Elixir.TypeCheck.Options':new()),
    _expanded_call@1 =
        'Elixir.TypeCheck.Internals.PreExpander':rewrite(_type_call_ast@1,
                                                         __CALLER__,
                                                         _typecheck_options@1),
    {_module@2, _name@2, _arguments@2} = case
                                             'Elixir.Macro':decompose_call(_expanded_call@1)
                                             of
                                             {_name@1, _arguments@1} ->
                                                 _module@1 =
                                                     find_matching_module(__CALLER__,
                                                                          _name@1,
                                                                          erlang:length(_arguments@1)),
                                                 {_module@1,
                                                  _name@1,
                                                  _arguments@1};
                                             _other@1 -> _other@1
                                         end,
    {lazy_explicit,
     [{keep, {<<"lib/type_check/builtin.ex">>, 739}},
      {context, 'Elixir.TypeCheck.Builtin'},
      {import, 'Elixir.TypeCheck.Builtin'}],
     [_module@2, _name@2, _arguments@2]}.

lazy_explicit(_module@1, _function@1, _arguments@1) ->
    ('Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.Lazy',
                              #{'__struct__' => 'Elixir.Macro.Env',
                                aliases => [], context => nil,
                                context_modules => ['Elixir.TypeCheck.Builtin'],
                                contextual_vars => [],
                                current_vars =>
                                    {#{{arguments, nil} => 2,
                                       {function, nil} => 1,
                                       {module, nil} => 0},
                                     #{{arguments, nil} => 2,
                                       {function, nil} => 1,
                                       {module, nil} => 0}},
                                file =>
                                    <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                      "nal/elixir/type_check/lib/type_check/builtin."
                                      "ex">>,
                                function => {lazy_explicit, 3},
                                functions =>
                                    [{'Elixir.TypeCheck.Builtin',
                                      [{any, 0},
                                       {arity, 0},
                                       {as_boolean, 1},
                                       {atom, 0},
                                       {binary, 0},
                                       {bitstring, 0},
                                       {boolean, 0},
                                       {byte, 0},
                                       {char, 0},
                                       {charlist, 0},
                                       {fixed_list, 1},
                                       {fixed_map, 1},
                                       {fixed_tuple, 1},
                                       {float, 0},
                                       {'fun', 0},
                                       {function, 0},
                                       {guarded_by, 2},
                                       {integer, 0},
                                       {keyword, 0},
                                       {keyword, 1},
                                       {lazy_explicit, 3},
                                       {list, 0},
                                       {list, 1},
                                       {literal, 1},
                                       {map, 0},
                                       {map, 2},
                                       {mfa, 0},
                                       {module, 0},
                                       {named_type, 2},
                                       {neg_integer, 0},
                                       {no_return, 0},
                                       {non_neg_integer, 0},
                                       {none, 0},
                                       {number, 0},
                                       {one_of, 1},
                                       {one_of, 2},
                                       {pos_integer, 0},
                                       {range, 1},
                                       {range, 2},
                                       {term, 0},
                                       {tuple, 0},
                                       {tuple, 1}]},
                                     {'Elixir.Kernel',
                                      [{'!=', 2},
                                       {'!==', 2},
                                       {'*', 2},
                                       {'+', 1},
                                       {'+', 2},
                                       {'++', 2},
                                       {'-', 1},
                                       {'-', 2},
                                       {'--', 2},
                                       {'/', 2},
                                       {'<', 2},
                                       {'<=', 2},
                                       {'==', 2},
                                       {'===', 2},
                                       {'=~', 2},
                                       {'>', 2},
                                       {'>=', 2},
                                       {abs, 1},
                                       {apply, 2},
                                       {apply, 3},
                                       {binary_part, 3},
                                       {bit_size, 1},
                                       {byte_size, 1},
                                       {ceil, 1},
                                       {'div', 2},
                                       {elem, 2},
                                       {exit, 1},
                                       {floor, 1},
                                       {'function_exported?', 3},
                                       {get_and_update_in, 3},
                                       {get_in, 2},
                                       {hd, 1},
                                       {inspect, 1},
                                       {inspect, 2},
                                       {is_atom, 1},
                                       {is_binary, 1},
                                       {is_bitstring, 1},
                                       {is_boolean, 1},
                                       {is_float, 1},
                                       {is_function, 1},
                                       {is_function, 2},
                                       {is_integer, 1},
                                       {is_list, 1},
                                       {is_map, 1},
                                       {is_map_key, 2},
                                       {is_number, 1},
                                       {is_pid, 1},
                                       {is_port, 1},
                                       {is_reference, 1},
                                       {is_tuple, 1},
                                       {length, 1},
                                       {'macro_exported?', 3},
                                       {make_ref, 0},
                                       {map_size, 1},
                                       {max, 2},
                                       {min, 2},
                                       {node, 0},
                                       {node, 1},
                                       {'not', 1},
                                       {pop_in, 2},
                                       {put_elem, 3},
                                       {put_in, 3},
                                       {'rem', 2},
                                       {round, 1},
                                       {self, 0},
                                       {send, 2},
                                       {spawn, 1},
                                       {spawn, 3},
                                       {spawn_link, 1},
                                       {spawn_link, 3},
                                       {spawn_monitor, 1},
                                       {spawn_monitor, 3},
                                       {struct, 1},
                                       {struct, 2},
                                       {'struct!', 1},
                                       {'struct!', 2},
                                       {throw, 1},
                                       {tl, 1},
                                       {trunc, 1},
                                       {tuple_size, 1},
                                       {update_in, 3}]}],
                                lexical_tracker => nil, line => 752,
                                macro_aliases => [],
                                macros =>
                                    [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                     {'Elixir.TypeCheck.Macros',
                                      [{'@', 1},
                                       {'opaque!', 1},
                                       {'spec!', 1},
                                       {'type!', 1},
                                       {'typep!', 1}]},
                                     {'Elixir.Kernel',
                                      [{'!', 1},
                                       {'&&', 2},
                                       {'..', 2},
                                       {'<>', 2},
                                       {'alias!', 1},
                                       {'and', 2},
                                       {binding, 0},
                                       {binding, 1},
                                       {def, 1},
                                       {def, 2},
                                       {defdelegate, 2},
                                       {defexception, 1},
                                       {defguard, 1},
                                       {defguardp, 1},
                                       {defimpl, 2},
                                       {defimpl, 3},
                                       {defmacro, 1},
                                       {defmacro, 2},
                                       {defmacrop, 1},
                                       {defmacrop, 2},
                                       {defmodule, 2},
                                       {defoverridable, 1},
                                       {defp, 1},
                                       {defp, 2},
                                       {defprotocol, 2},
                                       {defstruct, 1},
                                       {destructure, 2},
                                       {get_and_update_in, 2},
                                       {'if', 2},
                                       {in, 2},
                                       {is_nil, 1},
                                       {is_struct, 1},
                                       {'match?', 2},
                                       {'or', 2},
                                       {pop_in, 1},
                                       {put_in, 2},
                                       {raise, 1},
                                       {raise, 2},
                                       {reraise, 2},
                                       {reraise, 3},
                                       {sigil_C, 2},
                                       {sigil_D, 2},
                                       {sigil_N, 2},
                                       {sigil_R, 2},
                                       {sigil_S, 2},
                                       {sigil_T, 2},
                                       {sigil_U, 2},
                                       {sigil_W, 2},
                                       {sigil_c, 2},
                                       {sigil_r, 2},
                                       {sigil_s, 2},
                                       {sigil_w, 2},
                                       {to_char_list, 1},
                                       {to_charlist, 1},
                                       {to_string, 1},
                                       {unless, 2},
                                       {update_in, 2},
                                       {use, 1},
                                       {use, 2},
                                       {'var!', 1},
                                       {'var!', 2},
                                       {'|>', 2},
                                       {'||', 2}]},
                                     {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                      [{'if_recompiling?', 1},
                                       {recompile, 2}]}],
                                module => 'Elixir.TypeCheck.Builtin',
                                prematch_vars => warn,
                                requires =>
                                    ['Elixir.Application',
                                     'Elixir.Kernel',
                                     'Elixir.Kernel.Typespec',
                                     'Elixir.TypeCheck',
                                     'Elixir.TypeCheck.Builtin',
                                     'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     'Elixir.TypeCheck.Internals.ToTypespec',
                                     'Elixir.TypeCheck.Macros'],
                                tracers => [elixir_lexical],
                                unused_vars =>
                                    {#{{arguments, 2} => 751,
                                       {function, 1} => 751,
                                       {module, 0} => 751},
                                     3},
                                vars =>
                                    [{arguments, nil},
                                     {function, nil},
                                     {module, nil}]}))#{module => _module@1,
                                                        function => _function@1,
                                                        arguments =>
                                                            _arguments@1}.

list() ->
    'Elixir.TypeCheck.Builtin':list('Elixir.TypeCheck.Builtin':any()).

list(_a@1) ->
    'Elixir.TypeCheck.Type':'ensure_type!'(_a@1),
    ('Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.List',
                              #{'__struct__' => 'Elixir.Macro.Env',
                                aliases => [], context => nil,
                                context_modules => ['Elixir.TypeCheck.Builtin'],
                                contextual_vars => [],
                                current_vars =>
                                    {#{{a, nil} => 0}, #{{a, nil} => 0}},
                                file =>
                                    <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                      "nal/elixir/type_check/lib/type_check/builtin."
                                      "ex">>,
                                function => {list, 1},
                                functions =>
                                    [{'Elixir.TypeCheck.Builtin',
                                      [{any, 0},
                                       {arity, 0},
                                       {as_boolean, 1},
                                       {atom, 0},
                                       {binary, 0},
                                       {bitstring, 0},
                                       {boolean, 0},
                                       {byte, 0},
                                       {char, 0},
                                       {charlist, 0},
                                       {fixed_list, 1},
                                       {fixed_map, 1},
                                       {fixed_tuple, 1},
                                       {float, 0},
                                       {'fun', 0},
                                       {function, 0},
                                       {guarded_by, 2},
                                       {integer, 0},
                                       {keyword, 0},
                                       {keyword, 1},
                                       {lazy_explicit, 3},
                                       {list, 0},
                                       {list, 1},
                                       {literal, 1},
                                       {map, 0},
                                       {map, 2},
                                       {mfa, 0},
                                       {module, 0},
                                       {named_type, 2},
                                       {neg_integer, 0},
                                       {no_return, 0},
                                       {non_neg_integer, 0},
                                       {none, 0},
                                       {number, 0},
                                       {one_of, 1},
                                       {one_of, 2},
                                       {pos_integer, 0},
                                       {range, 1},
                                       {range, 2},
                                       {term, 0},
                                       {tuple, 0},
                                       {tuple, 1}]},
                                     {'Elixir.Kernel',
                                      [{'!=', 2},
                                       {'!==', 2},
                                       {'*', 2},
                                       {'+', 1},
                                       {'+', 2},
                                       {'++', 2},
                                       {'-', 1},
                                       {'-', 2},
                                       {'--', 2},
                                       {'/', 2},
                                       {'<', 2},
                                       {'<=', 2},
                                       {'==', 2},
                                       {'===', 2},
                                       {'=~', 2},
                                       {'>', 2},
                                       {'>=', 2},
                                       {abs, 1},
                                       {apply, 2},
                                       {apply, 3},
                                       {binary_part, 3},
                                       {bit_size, 1},
                                       {byte_size, 1},
                                       {ceil, 1},
                                       {'div', 2},
                                       {elem, 2},
                                       {exit, 1},
                                       {floor, 1},
                                       {'function_exported?', 3},
                                       {get_and_update_in, 3},
                                       {get_in, 2},
                                       {hd, 1},
                                       {inspect, 1},
                                       {inspect, 2},
                                       {is_atom, 1},
                                       {is_binary, 1},
                                       {is_bitstring, 1},
                                       {is_boolean, 1},
                                       {is_float, 1},
                                       {is_function, 1},
                                       {is_function, 2},
                                       {is_integer, 1},
                                       {is_list, 1},
                                       {is_map, 1},
                                       {is_map_key, 2},
                                       {is_number, 1},
                                       {is_pid, 1},
                                       {is_port, 1},
                                       {is_reference, 1},
                                       {is_tuple, 1},
                                       {length, 1},
                                       {'macro_exported?', 3},
                                       {make_ref, 0},
                                       {map_size, 1},
                                       {max, 2},
                                       {min, 2},
                                       {node, 0},
                                       {node, 1},
                                       {'not', 1},
                                       {pop_in, 2},
                                       {put_elem, 3},
                                       {put_in, 3},
                                       {'rem', 2},
                                       {round, 1},
                                       {self, 0},
                                       {send, 2},
                                       {spawn, 1},
                                       {spawn, 3},
                                       {spawn_link, 1},
                                       {spawn_link, 3},
                                       {spawn_monitor, 1},
                                       {spawn_monitor, 3},
                                       {struct, 1},
                                       {struct, 2},
                                       {'struct!', 1},
                                       {'struct!', 2},
                                       {throw, 1},
                                       {tl, 1},
                                       {trunc, 1},
                                       {tuple_size, 1},
                                       {update_in, 3}]}],
                                lexical_tracker => nil, line => 279,
                                macro_aliases => [],
                                macros =>
                                    [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                     {'Elixir.TypeCheck.Macros',
                                      [{'@', 1},
                                       {'opaque!', 1},
                                       {'spec!', 1},
                                       {'type!', 1},
                                       {'typep!', 1}]},
                                     {'Elixir.Kernel',
                                      [{'!', 1},
                                       {'&&', 2},
                                       {'..', 2},
                                       {'<>', 2},
                                       {'alias!', 1},
                                       {'and', 2},
                                       {binding, 0},
                                       {binding, 1},
                                       {def, 1},
                                       {def, 2},
                                       {defdelegate, 2},
                                       {defexception, 1},
                                       {defguard, 1},
                                       {defguardp, 1},
                                       {defimpl, 2},
                                       {defimpl, 3},
                                       {defmacro, 1},
                                       {defmacro, 2},
                                       {defmacrop, 1},
                                       {defmacrop, 2},
                                       {defmodule, 2},
                                       {defoverridable, 1},
                                       {defp, 1},
                                       {defp, 2},
                                       {defprotocol, 2},
                                       {defstruct, 1},
                                       {destructure, 2},
                                       {get_and_update_in, 2},
                                       {'if', 2},
                                       {in, 2},
                                       {is_nil, 1},
                                       {is_struct, 1},
                                       {'match?', 2},
                                       {'or', 2},
                                       {pop_in, 1},
                                       {put_in, 2},
                                       {raise, 1},
                                       {raise, 2},
                                       {reraise, 2},
                                       {reraise, 3},
                                       {sigil_C, 2},
                                       {sigil_D, 2},
                                       {sigil_N, 2},
                                       {sigil_R, 2},
                                       {sigil_S, 2},
                                       {sigil_T, 2},
                                       {sigil_U, 2},
                                       {sigil_W, 2},
                                       {sigil_c, 2},
                                       {sigil_r, 2},
                                       {sigil_s, 2},
                                       {sigil_w, 2},
                                       {to_char_list, 1},
                                       {to_charlist, 1},
                                       {to_string, 1},
                                       {unless, 2},
                                       {update_in, 2},
                                       {use, 1},
                                       {use, 2},
                                       {'var!', 1},
                                       {'var!', 2},
                                       {'|>', 2},
                                       {'||', 2}]},
                                     {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                      [{'if_recompiling?', 1},
                                       {recompile, 2}]}],
                                module => 'Elixir.TypeCheck.Builtin',
                                prematch_vars => warn,
                                requires =>
                                    ['Elixir.Application',
                                     'Elixir.Kernel',
                                     'Elixir.Kernel.Typespec',
                                     'Elixir.TypeCheck',
                                     'Elixir.TypeCheck.Builtin',
                                     'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     'Elixir.TypeCheck.Internals.ToTypespec',
                                     'Elixir.TypeCheck.Macros'],
                                tracers => [elixir_lexical],
                                unused_vars => {#{{a, 0} => false}, 1},
                                vars => [{a, nil}]}))#{element_type => _a@1}.

literal(_value@1) ->
    ('Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.Literal',
                              #{'__struct__' => 'Elixir.Macro.Env',
                                aliases => [], context => nil,
                                context_modules => ['Elixir.TypeCheck.Builtin'],
                                contextual_vars => [],
                                current_vars =>
                                    {#{{value, nil} => 0},
                                     #{{value, nil} => 0}},
                                file =>
                                    <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                      "nal/elixir/type_check/lib/type_check/builtin."
                                      "ex">>,
                                function => {literal, 1},
                                functions =>
                                    [{'Elixir.TypeCheck.Builtin',
                                      [{any, 0},
                                       {arity, 0},
                                       {as_boolean, 1},
                                       {atom, 0},
                                       {binary, 0},
                                       {bitstring, 0},
                                       {boolean, 0},
                                       {byte, 0},
                                       {char, 0},
                                       {charlist, 0},
                                       {fixed_list, 1},
                                       {fixed_map, 1},
                                       {fixed_tuple, 1},
                                       {float, 0},
                                       {'fun', 0},
                                       {function, 0},
                                       {guarded_by, 2},
                                       {integer, 0},
                                       {keyword, 0},
                                       {keyword, 1},
                                       {lazy_explicit, 3},
                                       {list, 0},
                                       {list, 1},
                                       {literal, 1},
                                       {map, 0},
                                       {map, 2},
                                       {mfa, 0},
                                       {module, 0},
                                       {named_type, 2},
                                       {neg_integer, 0},
                                       {no_return, 0},
                                       {non_neg_integer, 0},
                                       {none, 0},
                                       {number, 0},
                                       {one_of, 1},
                                       {one_of, 2},
                                       {pos_integer, 0},
                                       {range, 1},
                                       {range, 2},
                                       {term, 0},
                                       {tuple, 0},
                                       {tuple, 1}]},
                                     {'Elixir.Kernel',
                                      [{'!=', 2},
                                       {'!==', 2},
                                       {'*', 2},
                                       {'+', 1},
                                       {'+', 2},
                                       {'++', 2},
                                       {'-', 1},
                                       {'-', 2},
                                       {'--', 2},
                                       {'/', 2},
                                       {'<', 2},
                                       {'<=', 2},
                                       {'==', 2},
                                       {'===', 2},
                                       {'=~', 2},
                                       {'>', 2},
                                       {'>=', 2},
                                       {abs, 1},
                                       {apply, 2},
                                       {apply, 3},
                                       {binary_part, 3},
                                       {bit_size, 1},
                                       {byte_size, 1},
                                       {ceil, 1},
                                       {'div', 2},
                                       {elem, 2},
                                       {exit, 1},
                                       {floor, 1},
                                       {'function_exported?', 3},
                                       {get_and_update_in, 3},
                                       {get_in, 2},
                                       {hd, 1},
                                       {inspect, 1},
                                       {inspect, 2},
                                       {is_atom, 1},
                                       {is_binary, 1},
                                       {is_bitstring, 1},
                                       {is_boolean, 1},
                                       {is_float, 1},
                                       {is_function, 1},
                                       {is_function, 2},
                                       {is_integer, 1},
                                       {is_list, 1},
                                       {is_map, 1},
                                       {is_map_key, 2},
                                       {is_number, 1},
                                       {is_pid, 1},
                                       {is_port, 1},
                                       {is_reference, 1},
                                       {is_tuple, 1},
                                       {length, 1},
                                       {'macro_exported?', 3},
                                       {make_ref, 0},
                                       {map_size, 1},
                                       {max, 2},
                                       {min, 2},
                                       {node, 0},
                                       {node, 1},
                                       {'not', 1},
                                       {pop_in, 2},
                                       {put_elem, 3},
                                       {put_in, 3},
                                       {'rem', 2},
                                       {round, 1},
                                       {self, 0},
                                       {send, 2},
                                       {spawn, 1},
                                       {spawn, 3},
                                       {spawn_link, 1},
                                       {spawn_link, 3},
                                       {spawn_monitor, 1},
                                       {spawn_monitor, 3},
                                       {struct, 1},
                                       {struct, 2},
                                       {'struct!', 1},
                                       {'struct!', 2},
                                       {throw, 1},
                                       {tl, 1},
                                       {trunc, 1},
                                       {tuple_size, 1},
                                       {update_in, 3}]}],
                                lexical_tracker => nil, line => 402,
                                macro_aliases => [],
                                macros =>
                                    [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                     {'Elixir.TypeCheck.Macros',
                                      [{'@', 1},
                                       {'opaque!', 1},
                                       {'spec!', 1},
                                       {'type!', 1},
                                       {'typep!', 1}]},
                                     {'Elixir.Kernel',
                                      [{'!', 1},
                                       {'&&', 2},
                                       {'..', 2},
                                       {'<>', 2},
                                       {'alias!', 1},
                                       {'and', 2},
                                       {binding, 0},
                                       {binding, 1},
                                       {def, 1},
                                       {def, 2},
                                       {defdelegate, 2},
                                       {defexception, 1},
                                       {defguard, 1},
                                       {defguardp, 1},
                                       {defimpl, 2},
                                       {defimpl, 3},
                                       {defmacro, 1},
                                       {defmacro, 2},
                                       {defmacrop, 1},
                                       {defmacrop, 2},
                                       {defmodule, 2},
                                       {defoverridable, 1},
                                       {defp, 1},
                                       {defp, 2},
                                       {defprotocol, 2},
                                       {defstruct, 1},
                                       {destructure, 2},
                                       {get_and_update_in, 2},
                                       {'if', 2},
                                       {in, 2},
                                       {is_nil, 1},
                                       {is_struct, 1},
                                       {'match?', 2},
                                       {'or', 2},
                                       {pop_in, 1},
                                       {put_in, 2},
                                       {raise, 1},
                                       {raise, 2},
                                       {reraise, 2},
                                       {reraise, 3},
                                       {sigil_C, 2},
                                       {sigil_D, 2},
                                       {sigil_N, 2},
                                       {sigil_R, 2},
                                       {sigil_S, 2},
                                       {sigil_T, 2},
                                       {sigil_U, 2},
                                       {sigil_W, 2},
                                       {sigil_c, 2},
                                       {sigil_r, 2},
                                       {sigil_s, 2},
                                       {sigil_w, 2},
                                       {to_char_list, 1},
                                       {to_charlist, 1},
                                       {to_string, 1},
                                       {unless, 2},
                                       {update_in, 2},
                                       {use, 1},
                                       {use, 2},
                                       {'var!', 1},
                                       {'var!', 2},
                                       {'|>', 2},
                                       {'||', 2}]},
                                     {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                      [{'if_recompiling?', 1},
                                       {recompile, 2}]}],
                                module => 'Elixir.TypeCheck.Builtin',
                                prematch_vars => warn,
                                requires =>
                                    ['Elixir.Application',
                                     'Elixir.Kernel',
                                     'Elixir.Kernel.Typespec',
                                     'Elixir.TypeCheck',
                                     'Elixir.TypeCheck.Builtin',
                                     'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     'Elixir.TypeCheck.Internals.ToTypespec',
                                     'Elixir.TypeCheck.Macros'],
                                tracers => [elixir_lexical],
                                unused_vars => {#{{value, 0} => 401}, 1},
                                vars => [{value, nil}]}))#{value => _value@1}.

map() ->
    ('Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.Map',
                              #{'__struct__' => 'Elixir.Macro.Env',
                                aliases => [], context => nil,
                                context_modules => ['Elixir.TypeCheck.Builtin'],
                                contextual_vars => [],
                                current_vars => {#{}, #{}},
                                file =>
                                    <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                      "nal/elixir/type_check/lib/type_check/builtin."
                                      "ex">>,
                                function => {map, 0},
                                functions =>
                                    [{'Elixir.TypeCheck.Builtin',
                                      [{any, 0},
                                       {arity, 0},
                                       {as_boolean, 1},
                                       {atom, 0},
                                       {binary, 0},
                                       {bitstring, 0},
                                       {boolean, 0},
                                       {byte, 0},
                                       {char, 0},
                                       {charlist, 0},
                                       {fixed_list, 1},
                                       {fixed_map, 1},
                                       {fixed_tuple, 1},
                                       {float, 0},
                                       {'fun', 0},
                                       {function, 0},
                                       {guarded_by, 2},
                                       {integer, 0},
                                       {keyword, 0},
                                       {keyword, 1},
                                       {lazy_explicit, 3},
                                       {list, 0},
                                       {list, 1},
                                       {literal, 1},
                                       {map, 0},
                                       {map, 2},
                                       {mfa, 0},
                                       {module, 0},
                                       {named_type, 2},
                                       {neg_integer, 0},
                                       {no_return, 0},
                                       {non_neg_integer, 0},
                                       {none, 0},
                                       {number, 0},
                                       {one_of, 1},
                                       {one_of, 2},
                                       {pos_integer, 0},
                                       {range, 1},
                                       {range, 2},
                                       {term, 0},
                                       {tuple, 0},
                                       {tuple, 1}]},
                                     {'Elixir.Kernel',
                                      [{'!=', 2},
                                       {'!==', 2},
                                       {'*', 2},
                                       {'+', 1},
                                       {'+', 2},
                                       {'++', 2},
                                       {'-', 1},
                                       {'-', 2},
                                       {'--', 2},
                                       {'/', 2},
                                       {'<', 2},
                                       {'<=', 2},
                                       {'==', 2},
                                       {'===', 2},
                                       {'=~', 2},
                                       {'>', 2},
                                       {'>=', 2},
                                       {abs, 1},
                                       {apply, 2},
                                       {apply, 3},
                                       {binary_part, 3},
                                       {bit_size, 1},
                                       {byte_size, 1},
                                       {ceil, 1},
                                       {'div', 2},
                                       {elem, 2},
                                       {exit, 1},
                                       {floor, 1},
                                       {'function_exported?', 3},
                                       {get_and_update_in, 3},
                                       {get_in, 2},
                                       {hd, 1},
                                       {inspect, 1},
                                       {inspect, 2},
                                       {is_atom, 1},
                                       {is_binary, 1},
                                       {is_bitstring, 1},
                                       {is_boolean, 1},
                                       {is_float, 1},
                                       {is_function, 1},
                                       {is_function, 2},
                                       {is_integer, 1},
                                       {is_list, 1},
                                       {is_map, 1},
                                       {is_map_key, 2},
                                       {is_number, 1},
                                       {is_pid, 1},
                                       {is_port, 1},
                                       {is_reference, 1},
                                       {is_tuple, 1},
                                       {length, 1},
                                       {'macro_exported?', 3},
                                       {make_ref, 0},
                                       {map_size, 1},
                                       {max, 2},
                                       {min, 2},
                                       {node, 0},
                                       {node, 1},
                                       {'not', 1},
                                       {pop_in, 2},
                                       {put_elem, 3},
                                       {put_in, 3},
                                       {'rem', 2},
                                       {round, 1},
                                       {self, 0},
                                       {send, 2},
                                       {spawn, 1},
                                       {spawn, 3},
                                       {spawn_link, 1},
                                       {spawn_link, 3},
                                       {spawn_monitor, 1},
                                       {spawn_monitor, 3},
                                       {struct, 1},
                                       {struct, 2},
                                       {'struct!', 1},
                                       {'struct!', 2},
                                       {throw, 1},
                                       {tl, 1},
                                       {trunc, 1},
                                       {tuple_size, 1},
                                       {update_in, 3}]}],
                                lexical_tracker => nil, line => 507,
                                macro_aliases => [],
                                macros =>
                                    [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                     {'Elixir.TypeCheck.Macros',
                                      [{'@', 1},
                                       {'opaque!', 1},
                                       {'spec!', 1},
                                       {'type!', 1},
                                       {'typep!', 1}]},
                                     {'Elixir.Kernel',
                                      [{'!', 1},
                                       {'&&', 2},
                                       {'..', 2},
                                       {'<>', 2},
                                       {'alias!', 1},
                                       {'and', 2},
                                       {binding, 0},
                                       {binding, 1},
                                       {def, 1},
                                       {def, 2},
                                       {defdelegate, 2},
                                       {defexception, 1},
                                       {defguard, 1},
                                       {defguardp, 1},
                                       {defimpl, 2},
                                       {defimpl, 3},
                                       {defmacro, 1},
                                       {defmacro, 2},
                                       {defmacrop, 1},
                                       {defmacrop, 2},
                                       {defmodule, 2},
                                       {defoverridable, 1},
                                       {defp, 1},
                                       {defp, 2},
                                       {defprotocol, 2},
                                       {defstruct, 1},
                                       {destructure, 2},
                                       {get_and_update_in, 2},
                                       {'if', 2},
                                       {in, 2},
                                       {is_nil, 1},
                                       {is_struct, 1},
                                       {'match?', 2},
                                       {'or', 2},
                                       {pop_in, 1},
                                       {put_in, 2},
                                       {raise, 1},
                                       {raise, 2},
                                       {reraise, 2},
                                       {reraise, 3},
                                       {sigil_C, 2},
                                       {sigil_D, 2},
                                       {sigil_N, 2},
                                       {sigil_R, 2},
                                       {sigil_S, 2},
                                       {sigil_T, 2},
                                       {sigil_U, 2},
                                       {sigil_W, 2},
                                       {sigil_c, 2},
                                       {sigil_r, 2},
                                       {sigil_s, 2},
                                       {sigil_w, 2},
                                       {to_char_list, 1},
                                       {to_charlist, 1},
                                       {to_string, 1},
                                       {unless, 2},
                                       {update_in, 2},
                                       {use, 1},
                                       {use, 2},
                                       {'var!', 1},
                                       {'var!', 2},
                                       {'|>', 2},
                                       {'||', 2}]},
                                     {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                      [{'if_recompiling?', 1},
                                       {recompile, 2}]}],
                                module => 'Elixir.TypeCheck.Builtin',
                                prematch_vars => warn,
                                requires =>
                                    ['Elixir.Application',
                                     'Elixir.Kernel',
                                     'Elixir.Kernel.Typespec',
                                     'Elixir.TypeCheck',
                                     'Elixir.TypeCheck.Builtin',
                                     'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     'Elixir.TypeCheck.Internals.ToTypespec',
                                     'Elixir.TypeCheck.Macros'],
                                tracers => [elixir_lexical],
                                unused_vars => {#{}, 0}, vars => []}))#{key_type
                                                                            =>
                                                                            'Elixir.TypeCheck.Builtin':any(),
                                                                        value_type
                                                                            =>
                                                                            'Elixir.TypeCheck.Builtin':any()}.

map(_key_type@1, _value_type@1) ->
    'Elixir.TypeCheck.Type':'ensure_type!'(_key_type@1),
    'Elixir.TypeCheck.Type':'ensure_type!'(_value_type@1),
    ('Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.Map',
                              #{'__struct__' => 'Elixir.Macro.Env',
                                aliases => [], context => nil,
                                context_modules => ['Elixir.TypeCheck.Builtin'],
                                contextual_vars => [],
                                current_vars =>
                                    {#{{key_type, nil} => 0,
                                       {value_type, nil} => 1},
                                     #{{key_type, nil} => 0,
                                       {value_type, nil} => 1}},
                                file =>
                                    <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                      "nal/elixir/type_check/lib/type_check/builtin."
                                      "ex">>,
                                function => {map, 2},
                                functions =>
                                    [{'Elixir.TypeCheck.Builtin',
                                      [{any, 0},
                                       {arity, 0},
                                       {as_boolean, 1},
                                       {atom, 0},
                                       {binary, 0},
                                       {bitstring, 0},
                                       {boolean, 0},
                                       {byte, 0},
                                       {char, 0},
                                       {charlist, 0},
                                       {fixed_list, 1},
                                       {fixed_map, 1},
                                       {fixed_tuple, 1},
                                       {float, 0},
                                       {'fun', 0},
                                       {function, 0},
                                       {guarded_by, 2},
                                       {integer, 0},
                                       {keyword, 0},
                                       {keyword, 1},
                                       {lazy_explicit, 3},
                                       {list, 0},
                                       {list, 1},
                                       {literal, 1},
                                       {map, 0},
                                       {map, 2},
                                       {mfa, 0},
                                       {module, 0},
                                       {named_type, 2},
                                       {neg_integer, 0},
                                       {no_return, 0},
                                       {non_neg_integer, 0},
                                       {none, 0},
                                       {number, 0},
                                       {one_of, 1},
                                       {one_of, 2},
                                       {pos_integer, 0},
                                       {range, 1},
                                       {range, 2},
                                       {term, 0},
                                       {tuple, 0},
                                       {tuple, 1}]},
                                     {'Elixir.Kernel',
                                      [{'!=', 2},
                                       {'!==', 2},
                                       {'*', 2},
                                       {'+', 1},
                                       {'+', 2},
                                       {'++', 2},
                                       {'-', 1},
                                       {'-', 2},
                                       {'--', 2},
                                       {'/', 2},
                                       {'<', 2},
                                       {'<=', 2},
                                       {'==', 2},
                                       {'===', 2},
                                       {'=~', 2},
                                       {'>', 2},
                                       {'>=', 2},
                                       {abs, 1},
                                       {apply, 2},
                                       {apply, 3},
                                       {binary_part, 3},
                                       {bit_size, 1},
                                       {byte_size, 1},
                                       {ceil, 1},
                                       {'div', 2},
                                       {elem, 2},
                                       {exit, 1},
                                       {floor, 1},
                                       {'function_exported?', 3},
                                       {get_and_update_in, 3},
                                       {get_in, 2},
                                       {hd, 1},
                                       {inspect, 1},
                                       {inspect, 2},
                                       {is_atom, 1},
                                       {is_binary, 1},
                                       {is_bitstring, 1},
                                       {is_boolean, 1},
                                       {is_float, 1},
                                       {is_function, 1},
                                       {is_function, 2},
                                       {is_integer, 1},
                                       {is_list, 1},
                                       {is_map, 1},
                                       {is_map_key, 2},
                                       {is_number, 1},
                                       {is_pid, 1},
                                       {is_port, 1},
                                       {is_reference, 1},
                                       {is_tuple, 1},
                                       {length, 1},
                                       {'macro_exported?', 3},
                                       {make_ref, 0},
                                       {map_size, 1},
                                       {max, 2},
                                       {min, 2},
                                       {node, 0},
                                       {node, 1},
                                       {'not', 1},
                                       {pop_in, 2},
                                       {put_elem, 3},
                                       {put_in, 3},
                                       {'rem', 2},
                                       {round, 1},
                                       {self, 0},
                                       {send, 2},
                                       {spawn, 1},
                                       {spawn, 3},
                                       {spawn_link, 1},
                                       {spawn_link, 3},
                                       {spawn_monitor, 1},
                                       {spawn_monitor, 3},
                                       {struct, 1},
                                       {struct, 2},
                                       {'struct!', 1},
                                       {'struct!', 2},
                                       {throw, 1},
                                       {tl, 1},
                                       {trunc, 1},
                                       {tuple_size, 1},
                                       {update_in, 3}]}],
                                lexical_tracker => nil, line => 524,
                                macro_aliases => [],
                                macros =>
                                    [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                     {'Elixir.TypeCheck.Macros',
                                      [{'@', 1},
                                       {'opaque!', 1},
                                       {'spec!', 1},
                                       {'type!', 1},
                                       {'typep!', 1}]},
                                     {'Elixir.Kernel',
                                      [{'!', 1},
                                       {'&&', 2},
                                       {'..', 2},
                                       {'<>', 2},
                                       {'alias!', 1},
                                       {'and', 2},
                                       {binding, 0},
                                       {binding, 1},
                                       {def, 1},
                                       {def, 2},
                                       {defdelegate, 2},
                                       {defexception, 1},
                                       {defguard, 1},
                                       {defguardp, 1},
                                       {defimpl, 2},
                                       {defimpl, 3},
                                       {defmacro, 1},
                                       {defmacro, 2},
                                       {defmacrop, 1},
                                       {defmacrop, 2},
                                       {defmodule, 2},
                                       {defoverridable, 1},
                                       {defp, 1},
                                       {defp, 2},
                                       {defprotocol, 2},
                                       {defstruct, 1},
                                       {destructure, 2},
                                       {get_and_update_in, 2},
                                       {'if', 2},
                                       {in, 2},
                                       {is_nil, 1},
                                       {is_struct, 1},
                                       {'match?', 2},
                                       {'or', 2},
                                       {pop_in, 1},
                                       {put_in, 2},
                                       {raise, 1},
                                       {raise, 2},
                                       {reraise, 2},
                                       {reraise, 3},
                                       {sigil_C, 2},
                                       {sigil_D, 2},
                                       {sigil_N, 2},
                                       {sigil_R, 2},
                                       {sigil_S, 2},
                                       {sigil_T, 2},
                                       {sigil_U, 2},
                                       {sigil_W, 2},
                                       {sigil_c, 2},
                                       {sigil_r, 2},
                                       {sigil_s, 2},
                                       {sigil_w, 2},
                                       {to_char_list, 1},
                                       {to_charlist, 1},
                                       {to_string, 1},
                                       {unless, 2},
                                       {update_in, 2},
                                       {use, 1},
                                       {use, 2},
                                       {'var!', 1},
                                       {'var!', 2},
                                       {'|>', 2},
                                       {'||', 2}]},
                                     {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                      [{'if_recompiling?', 1},
                                       {recompile, 2}]}],
                                module => 'Elixir.TypeCheck.Builtin',
                                prematch_vars => warn,
                                requires =>
                                    ['Elixir.Application',
                                     'Elixir.Kernel',
                                     'Elixir.Kernel.Typespec',
                                     'Elixir.TypeCheck',
                                     'Elixir.TypeCheck.Builtin',
                                     'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     'Elixir.TypeCheck.Internals.ToTypespec',
                                     'Elixir.TypeCheck.Macros'],
                                tracers => [elixir_lexical],
                                unused_vars =>
                                    {#{{key_type, 0} => false,
                                       {value_type, 1} => false},
                                     2},
                                vars =>
                                    [{key_type, nil},
                                     {value_type, nil}]}))#{key_type =>
                                                                _key_type@1,
                                                            value_type =>
                                                                _value_type@1}.

mfa() ->
    'Elixir.TypeCheck.Builtin':fixed_tuple(['Elixir.TypeCheck.Builtin':module(),
                                            'Elixir.TypeCheck.Builtin':atom(),
                                            'Elixir.TypeCheck.Builtin':arity()]).

module() ->
    nil,
    _super_result@1 = 'module (overridable 1)'(),
    case case case erlang:is_map(_super_result@1) of
                  false ->
                      {error,
                       {#{'__struct__' => 'Elixir.TypeCheck.Builtin.FixedMap',
                          keypairs =>
                              [{'__struct__',
                                #{'__struct__' =>
                                      'Elixir.TypeCheck.Builtin.Literal',
                                  value => 'Elixir.TypeCheck.Builtin.Atom'}}]},
                        not_a_map,
                        #{},
                        _super_result@1}};
                  true -> {ok, []}
              end
             of
             {ok, []} ->
                 case begin
                          _@2 = maps:keys(_super_result@1),
                          case ['__struct__'] -- _@2 of
                              [] -> {ok, []};
                              _@3 ->
                                  {error,
                                   {#{'__struct__' =>
                                          'Elixir.TypeCheck.Builtin.FixedMap',
                                      keypairs =>
                                          [{'__struct__',
                                            #{'__struct__' =>
                                                  'Elixir.TypeCheck.Builtin.Literal',
                                              value =>
                                                  'Elixir.TypeCheck.Builtin.Atom'}}]},
                                    missing_keys,
                                    #{keys => _@3},
                                    _super_result@1}}
                          end
                      end
                     of
                     {ok, []} ->
                         case begin
                                  _@4 = [],
                                  case {case maps:get('__struct__',
                                                      _super_result@1)
                                            of
                                            _@9
                                                when _@9 =:=
                                                         'Elixir.TypeCheck.Builtin.Atom' ->
                                                {ok, []};
                                            _ ->
                                                {error,
                                                 {#{'__struct__' =>
                                                        'Elixir.TypeCheck.Builtin.Literal',
                                                    value =>
                                                        'Elixir.TypeCheck.Builtin.Atom'},
                                                  not_same_value,
                                                  #{},
                                                  maps:get('__struct__',
                                                           _super_result@1)}}
                                        end,
                                        '__struct__'}
                                      of
                                      {{ok, _@10}, _@11} ->
                                          _@12 = _@10 ++ _@4,
                                          {ok, _@12};
                                      _@5 ->
                                          case _@5 of
                                              {{error, _@7}, _@8} ->
                                                  {error,
                                                   {#{'__struct__' =>
                                                          'Elixir.TypeCheck.Builtin.FixedMap',
                                                      keypairs =>
                                                          [{'__struct__',
                                                            #{'__struct__' =>
                                                                  'Elixir.TypeCheck.Builtin.Literal',
                                                              value =>
                                                                  'Elixir.TypeCheck.Builtin.Atom'}}]},
                                                    value_error,
                                                    #{problem => _@7,
                                                      key => _@8},
                                                    _super_result@1}};
                                              _@6 ->
                                                  erlang:error({with_clause,
                                                                _@6})
                                          end
                                  end
                              end
                             of
                             {ok, _@13} -> {ok, _@13};
                             _@1 -> _@1
                         end;
                     _@1 -> _@1
                 end;
             _@1 -> _@1
         end
        of
        {ok, _@14} -> nil;
        {error, _@15} ->
            erlang:error('Elixir.TypeCheck.TypeError':exception({'__type_check_spec_for_module/0__'(),
                                                                 return_error,
                                                                 #{problem =>
                                                                       _@15,
                                                                   arguments =>
                                                                       []},
                                                                 _super_result@1}))
    end,
    _super_result@1.

'module (overridable 1)'() ->
    'Elixir.TypeCheck.Builtin':atom().

named_type(_name@1, _type@1) ->
    'Elixir.TypeCheck.Type':'ensure_type!'(_type@1),
    ('Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.NamedType',
                              #{'__struct__' => 'Elixir.Macro.Env',
                                aliases => [], context => nil,
                                context_modules => ['Elixir.TypeCheck.Builtin'],
                                contextual_vars => [],
                                current_vars =>
                                    {#{{name, nil} => 0, {type, nil} => 1},
                                     #{{name, nil} => 0, {type, nil} => 1}},
                                file =>
                                    <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                      "nal/elixir/type_check/lib/type_check/builtin."
                                      "ex">>,
                                function => {named_type, 2},
                                functions =>
                                    [{'Elixir.TypeCheck.Builtin',
                                      [{any, 0},
                                       {arity, 0},
                                       {as_boolean, 1},
                                       {atom, 0},
                                       {binary, 0},
                                       {bitstring, 0},
                                       {boolean, 0},
                                       {byte, 0},
                                       {char, 0},
                                       {charlist, 0},
                                       {fixed_list, 1},
                                       {fixed_map, 1},
                                       {fixed_tuple, 1},
                                       {float, 0},
                                       {'fun', 0},
                                       {function, 0},
                                       {guarded_by, 2},
                                       {integer, 0},
                                       {keyword, 0},
                                       {keyword, 1},
                                       {lazy_explicit, 3},
                                       {list, 0},
                                       {list, 1},
                                       {literal, 1},
                                       {map, 0},
                                       {map, 2},
                                       {mfa, 0},
                                       {module, 0},
                                       {named_type, 2},
                                       {neg_integer, 0},
                                       {no_return, 0},
                                       {non_neg_integer, 0},
                                       {none, 0},
                                       {number, 0},
                                       {one_of, 1},
                                       {one_of, 2},
                                       {pos_integer, 0},
                                       {range, 1},
                                       {range, 2},
                                       {term, 0},
                                       {tuple, 0},
                                       {tuple, 1}]},
                                     {'Elixir.Kernel',
                                      [{'!=', 2},
                                       {'!==', 2},
                                       {'*', 2},
                                       {'+', 1},
                                       {'+', 2},
                                       {'++', 2},
                                       {'-', 1},
                                       {'-', 2},
                                       {'--', 2},
                                       {'/', 2},
                                       {'<', 2},
                                       {'<=', 2},
                                       {'==', 2},
                                       {'===', 2},
                                       {'=~', 2},
                                       {'>', 2},
                                       {'>=', 2},
                                       {abs, 1},
                                       {apply, 2},
                                       {apply, 3},
                                       {binary_part, 3},
                                       {bit_size, 1},
                                       {byte_size, 1},
                                       {ceil, 1},
                                       {'div', 2},
                                       {elem, 2},
                                       {exit, 1},
                                       {floor, 1},
                                       {'function_exported?', 3},
                                       {get_and_update_in, 3},
                                       {get_in, 2},
                                       {hd, 1},
                                       {inspect, 1},
                                       {inspect, 2},
                                       {is_atom, 1},
                                       {is_binary, 1},
                                       {is_bitstring, 1},
                                       {is_boolean, 1},
                                       {is_float, 1},
                                       {is_function, 1},
                                       {is_function, 2},
                                       {is_integer, 1},
                                       {is_list, 1},
                                       {is_map, 1},
                                       {is_map_key, 2},
                                       {is_number, 1},
                                       {is_pid, 1},
                                       {is_port, 1},
                                       {is_reference, 1},
                                       {is_tuple, 1},
                                       {length, 1},
                                       {'macro_exported?', 3},
                                       {make_ref, 0},
                                       {map_size, 1},
                                       {max, 2},
                                       {min, 2},
                                       {node, 0},
                                       {node, 1},
                                       {'not', 1},
                                       {pop_in, 2},
                                       {put_elem, 3},
                                       {put_in, 3},
                                       {'rem', 2},
                                       {round, 1},
                                       {self, 0},
                                       {send, 2},
                                       {spawn, 1},
                                       {spawn, 3},
                                       {spawn_link, 1},
                                       {spawn_link, 3},
                                       {spawn_monitor, 1},
                                       {spawn_monitor, 3},
                                       {struct, 1},
                                       {struct, 2},
                                       {'struct!', 1},
                                       {'struct!', 2},
                                       {throw, 1},
                                       {tl, 1},
                                       {trunc, 1},
                                       {tuple_size, 1},
                                       {update_in, 3}]}],
                                lexical_tracker => nil, line => 618,
                                macro_aliases => [],
                                macros =>
                                    [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                     {'Elixir.TypeCheck.Macros',
                                      [{'@', 1},
                                       {'opaque!', 1},
                                       {'spec!', 1},
                                       {'type!', 1},
                                       {'typep!', 1}]},
                                     {'Elixir.Kernel',
                                      [{'!', 1},
                                       {'&&', 2},
                                       {'..', 2},
                                       {'<>', 2},
                                       {'alias!', 1},
                                       {'and', 2},
                                       {binding, 0},
                                       {binding, 1},
                                       {def, 1},
                                       {def, 2},
                                       {defdelegate, 2},
                                       {defexception, 1},
                                       {defguard, 1},
                                       {defguardp, 1},
                                       {defimpl, 2},
                                       {defimpl, 3},
                                       {defmacro, 1},
                                       {defmacro, 2},
                                       {defmacrop, 1},
                                       {defmacrop, 2},
                                       {defmodule, 2},
                                       {defoverridable, 1},
                                       {defp, 1},
                                       {defp, 2},
                                       {defprotocol, 2},
                                       {defstruct, 1},
                                       {destructure, 2},
                                       {get_and_update_in, 2},
                                       {'if', 2},
                                       {in, 2},
                                       {is_nil, 1},
                                       {is_struct, 1},
                                       {'match?', 2},
                                       {'or', 2},
                                       {pop_in, 1},
                                       {put_in, 2},
                                       {raise, 1},
                                       {raise, 2},
                                       {reraise, 2},
                                       {reraise, 3},
                                       {sigil_C, 2},
                                       {sigil_D, 2},
                                       {sigil_N, 2},
                                       {sigil_R, 2},
                                       {sigil_S, 2},
                                       {sigil_T, 2},
                                       {sigil_U, 2},
                                       {sigil_W, 2},
                                       {sigil_c, 2},
                                       {sigil_r, 2},
                                       {sigil_s, 2},
                                       {sigil_w, 2},
                                       {to_char_list, 1},
                                       {to_charlist, 1},
                                       {to_string, 1},
                                       {unless, 2},
                                       {update_in, 2},
                                       {use, 1},
                                       {use, 2},
                                       {'var!', 1},
                                       {'var!', 2},
                                       {'|>', 2},
                                       {'||', 2}]},
                                     {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                      [{'if_recompiling?', 1},
                                       {recompile, 2}]}],
                                module => 'Elixir.TypeCheck.Builtin',
                                prematch_vars => warn,
                                requires =>
                                    ['Elixir.Application',
                                     'Elixir.Kernel',
                                     'Elixir.Kernel.Typespec',
                                     'Elixir.TypeCheck',
                                     'Elixir.TypeCheck.Builtin',
                                     'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     'Elixir.TypeCheck.Internals.ToTypespec',
                                     'Elixir.TypeCheck.Macros'],
                                tracers => [elixir_lexical],
                                unused_vars =>
                                    {#{{name, 0} => 615, {type, 1} => false},
                                     2},
                                vars => [{name, nil}, {type, nil}]}))#{name =>
                                                                           _name@1,
                                                                       type =>
                                                                           _type@1}.

neg_integer() ->
    'Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.NegInteger',
                             #{'__struct__' => 'Elixir.Macro.Env',
                               aliases => [], context => nil,
                               context_modules => ['Elixir.TypeCheck.Builtin'],
                               contextual_vars => [],
                               current_vars => {#{}, #{}},
                               file =>
                                   <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                     "nal/elixir/type_check/lib/type_check/builtin."
                                     "ex">>,
                               function => {neg_integer, 0},
                               functions =>
                                   [{'Elixir.TypeCheck.Builtin',
                                     [{any, 0},
                                      {arity, 0},
                                      {as_boolean, 1},
                                      {atom, 0},
                                      {binary, 0},
                                      {bitstring, 0},
                                      {boolean, 0},
                                      {byte, 0},
                                      {char, 0},
                                      {charlist, 0},
                                      {fixed_list, 1},
                                      {fixed_map, 1},
                                      {fixed_tuple, 1},
                                      {float, 0},
                                      {'fun', 0},
                                      {function, 0},
                                      {guarded_by, 2},
                                      {integer, 0},
                                      {keyword, 0},
                                      {keyword, 1},
                                      {lazy_explicit, 3},
                                      {list, 0},
                                      {list, 1},
                                      {literal, 1},
                                      {map, 0},
                                      {map, 2},
                                      {mfa, 0},
                                      {module, 0},
                                      {named_type, 2},
                                      {neg_integer, 0},
                                      {no_return, 0},
                                      {non_neg_integer, 0},
                                      {none, 0},
                                      {number, 0},
                                      {one_of, 1},
                                      {one_of, 2},
                                      {pos_integer, 0},
                                      {range, 1},
                                      {range, 2},
                                      {term, 0},
                                      {tuple, 0},
                                      {tuple, 1}]},
                                    {'Elixir.Kernel',
                                     [{'!=', 2},
                                      {'!==', 2},
                                      {'*', 2},
                                      {'+', 1},
                                      {'+', 2},
                                      {'++', 2},
                                      {'-', 1},
                                      {'-', 2},
                                      {'--', 2},
                                      {'/', 2},
                                      {'<', 2},
                                      {'<=', 2},
                                      {'==', 2},
                                      {'===', 2},
                                      {'=~', 2},
                                      {'>', 2},
                                      {'>=', 2},
                                      {abs, 1},
                                      {apply, 2},
                                      {apply, 3},
                                      {binary_part, 3},
                                      {bit_size, 1},
                                      {byte_size, 1},
                                      {ceil, 1},
                                      {'div', 2},
                                      {elem, 2},
                                      {exit, 1},
                                      {floor, 1},
                                      {'function_exported?', 3},
                                      {get_and_update_in, 3},
                                      {get_in, 2},
                                      {hd, 1},
                                      {inspect, 1},
                                      {inspect, 2},
                                      {is_atom, 1},
                                      {is_binary, 1},
                                      {is_bitstring, 1},
                                      {is_boolean, 1},
                                      {is_float, 1},
                                      {is_function, 1},
                                      {is_function, 2},
                                      {is_integer, 1},
                                      {is_list, 1},
                                      {is_map, 1},
                                      {is_map_key, 2},
                                      {is_number, 1},
                                      {is_pid, 1},
                                      {is_port, 1},
                                      {is_reference, 1},
                                      {is_tuple, 1},
                                      {length, 1},
                                      {'macro_exported?', 3},
                                      {make_ref, 0},
                                      {map_size, 1},
                                      {max, 2},
                                      {min, 2},
                                      {node, 0},
                                      {node, 1},
                                      {'not', 1},
                                      {pop_in, 2},
                                      {put_elem, 3},
                                      {put_in, 3},
                                      {'rem', 2},
                                      {round, 1},
                                      {self, 0},
                                      {send, 2},
                                      {spawn, 1},
                                      {spawn, 3},
                                      {spawn_link, 1},
                                      {spawn_link, 3},
                                      {spawn_monitor, 1},
                                      {spawn_monitor, 3},
                                      {struct, 1},
                                      {struct, 2},
                                      {'struct!', 1},
                                      {'struct!', 2},
                                      {throw, 1},
                                      {tl, 1},
                                      {trunc, 1},
                                      {tuple_size, 1},
                                      {update_in, 3}]}],
                               lexical_tracker => nil, line => 200,
                               macro_aliases => [],
                               macros =>
                                   [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                    {'Elixir.TypeCheck.Macros',
                                     [{'@', 1},
                                      {'opaque!', 1},
                                      {'spec!', 1},
                                      {'type!', 1},
                                      {'typep!', 1}]},
                                    {'Elixir.Kernel',
                                     [{'!', 1},
                                      {'&&', 2},
                                      {'..', 2},
                                      {'<>', 2},
                                      {'alias!', 1},
                                      {'and', 2},
                                      {binding, 0},
                                      {binding, 1},
                                      {def, 1},
                                      {def, 2},
                                      {defdelegate, 2},
                                      {defexception, 1},
                                      {defguard, 1},
                                      {defguardp, 1},
                                      {defimpl, 2},
                                      {defimpl, 3},
                                      {defmacro, 1},
                                      {defmacro, 2},
                                      {defmacrop, 1},
                                      {defmacrop, 2},
                                      {defmodule, 2},
                                      {defoverridable, 1},
                                      {defp, 1},
                                      {defp, 2},
                                      {defprotocol, 2},
                                      {defstruct, 1},
                                      {destructure, 2},
                                      {get_and_update_in, 2},
                                      {'if', 2},
                                      {in, 2},
                                      {is_nil, 1},
                                      {is_struct, 1},
                                      {'match?', 2},
                                      {'or', 2},
                                      {pop_in, 1},
                                      {put_in, 2},
                                      {raise, 1},
                                      {raise, 2},
                                      {reraise, 2},
                                      {reraise, 3},
                                      {sigil_C, 2},
                                      {sigil_D, 2},
                                      {sigil_N, 2},
                                      {sigil_R, 2},
                                      {sigil_S, 2},
                                      {sigil_T, 2},
                                      {sigil_U, 2},
                                      {sigil_W, 2},
                                      {sigil_c, 2},
                                      {sigil_r, 2},
                                      {sigil_s, 2},
                                      {sigil_w, 2},
                                      {to_char_list, 1},
                                      {to_charlist, 1},
                                      {to_string, 1},
                                      {unless, 2},
                                      {update_in, 2},
                                      {use, 1},
                                      {use, 2},
                                      {'var!', 1},
                                      {'var!', 2},
                                      {'|>', 2},
                                      {'||', 2}]},
                                    {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     [{'if_recompiling?', 1}, {recompile, 2}]}],
                               module => 'Elixir.TypeCheck.Builtin',
                               prematch_vars => warn,
                               requires =>
                                   ['Elixir.Application',
                                    'Elixir.Kernel',
                                    'Elixir.Kernel.Typespec',
                                    'Elixir.TypeCheck',
                                    'Elixir.TypeCheck.Builtin',
                                    'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                    'Elixir.TypeCheck.Internals.ToTypespec',
                                    'Elixir.TypeCheck.Macros'],
                               tracers => [elixir_lexical],
                               unused_vars => {#{}, 0}, vars => []}).

no_return() -> 'Elixir.TypeCheck.Builtin':none().

non_neg_integer() ->
    'Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.NonNegInteger',
                             #{'__struct__' => 'Elixir.Macro.Env',
                               aliases => [], context => nil,
                               context_modules => ['Elixir.TypeCheck.Builtin'],
                               contextual_vars => [],
                               current_vars => {#{}, #{}},
                               file =>
                                   <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                     "nal/elixir/type_check/lib/type_check/builtin."
                                     "ex">>,
                               function => {non_neg_integer, 0},
                               functions =>
                                   [{'Elixir.TypeCheck.Builtin',
                                     [{any, 0},
                                      {arity, 0},
                                      {as_boolean, 1},
                                      {atom, 0},
                                      {binary, 0},
                                      {bitstring, 0},
                                      {boolean, 0},
                                      {byte, 0},
                                      {char, 0},
                                      {charlist, 0},
                                      {fixed_list, 1},
                                      {fixed_map, 1},
                                      {fixed_tuple, 1},
                                      {float, 0},
                                      {'fun', 0},
                                      {function, 0},
                                      {guarded_by, 2},
                                      {integer, 0},
                                      {keyword, 0},
                                      {keyword, 1},
                                      {lazy_explicit, 3},
                                      {list, 0},
                                      {list, 1},
                                      {literal, 1},
                                      {map, 0},
                                      {map, 2},
                                      {mfa, 0},
                                      {module, 0},
                                      {named_type, 2},
                                      {neg_integer, 0},
                                      {no_return, 0},
                                      {non_neg_integer, 0},
                                      {none, 0},
                                      {number, 0},
                                      {one_of, 1},
                                      {one_of, 2},
                                      {pos_integer, 0},
                                      {range, 1},
                                      {range, 2},
                                      {term, 0},
                                      {tuple, 0},
                                      {tuple, 1}]},
                                    {'Elixir.Kernel',
                                     [{'!=', 2},
                                      {'!==', 2},
                                      {'*', 2},
                                      {'+', 1},
                                      {'+', 2},
                                      {'++', 2},
                                      {'-', 1},
                                      {'-', 2},
                                      {'--', 2},
                                      {'/', 2},
                                      {'<', 2},
                                      {'<=', 2},
                                      {'==', 2},
                                      {'===', 2},
                                      {'=~', 2},
                                      {'>', 2},
                                      {'>=', 2},
                                      {abs, 1},
                                      {apply, 2},
                                      {apply, 3},
                                      {binary_part, 3},
                                      {bit_size, 1},
                                      {byte_size, 1},
                                      {ceil, 1},
                                      {'div', 2},
                                      {elem, 2},
                                      {exit, 1},
                                      {floor, 1},
                                      {'function_exported?', 3},
                                      {get_and_update_in, 3},
                                      {get_in, 2},
                                      {hd, 1},
                                      {inspect, 1},
                                      {inspect, 2},
                                      {is_atom, 1},
                                      {is_binary, 1},
                                      {is_bitstring, 1},
                                      {is_boolean, 1},
                                      {is_float, 1},
                                      {is_function, 1},
                                      {is_function, 2},
                                      {is_integer, 1},
                                      {is_list, 1},
                                      {is_map, 1},
                                      {is_map_key, 2},
                                      {is_number, 1},
                                      {is_pid, 1},
                                      {is_port, 1},
                                      {is_reference, 1},
                                      {is_tuple, 1},
                                      {length, 1},
                                      {'macro_exported?', 3},
                                      {make_ref, 0},
                                      {map_size, 1},
                                      {max, 2},
                                      {min, 2},
                                      {node, 0},
                                      {node, 1},
                                      {'not', 1},
                                      {pop_in, 2},
                                      {put_elem, 3},
                                      {put_in, 3},
                                      {'rem', 2},
                                      {round, 1},
                                      {self, 0},
                                      {send, 2},
                                      {spawn, 1},
                                      {spawn, 3},
                                      {spawn_link, 1},
                                      {spawn_link, 3},
                                      {spawn_monitor, 1},
                                      {spawn_monitor, 3},
                                      {struct, 1},
                                      {struct, 2},
                                      {'struct!', 1},
                                      {'struct!', 2},
                                      {throw, 1},
                                      {tl, 1},
                                      {trunc, 1},
                                      {tuple_size, 1},
                                      {update_in, 3}]}],
                               lexical_tracker => nil, line => 210,
                               macro_aliases => [],
                               macros =>
                                   [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                    {'Elixir.TypeCheck.Macros',
                                     [{'@', 1},
                                      {'opaque!', 1},
                                      {'spec!', 1},
                                      {'type!', 1},
                                      {'typep!', 1}]},
                                    {'Elixir.Kernel',
                                     [{'!', 1},
                                      {'&&', 2},
                                      {'..', 2},
                                      {'<>', 2},
                                      {'alias!', 1},
                                      {'and', 2},
                                      {binding, 0},
                                      {binding, 1},
                                      {def, 1},
                                      {def, 2},
                                      {defdelegate, 2},
                                      {defexception, 1},
                                      {defguard, 1},
                                      {defguardp, 1},
                                      {defimpl, 2},
                                      {defimpl, 3},
                                      {defmacro, 1},
                                      {defmacro, 2},
                                      {defmacrop, 1},
                                      {defmacrop, 2},
                                      {defmodule, 2},
                                      {defoverridable, 1},
                                      {defp, 1},
                                      {defp, 2},
                                      {defprotocol, 2},
                                      {defstruct, 1},
                                      {destructure, 2},
                                      {get_and_update_in, 2},
                                      {'if', 2},
                                      {in, 2},
                                      {is_nil, 1},
                                      {is_struct, 1},
                                      {'match?', 2},
                                      {'or', 2},
                                      {pop_in, 1},
                                      {put_in, 2},
                                      {raise, 1},
                                      {raise, 2},
                                      {reraise, 2},
                                      {reraise, 3},
                                      {sigil_C, 2},
                                      {sigil_D, 2},
                                      {sigil_N, 2},
                                      {sigil_R, 2},
                                      {sigil_S, 2},
                                      {sigil_T, 2},
                                      {sigil_U, 2},
                                      {sigil_W, 2},
                                      {sigil_c, 2},
                                      {sigil_r, 2},
                                      {sigil_s, 2},
                                      {sigil_w, 2},
                                      {to_char_list, 1},
                                      {to_charlist, 1},
                                      {to_string, 1},
                                      {unless, 2},
                                      {update_in, 2},
                                      {use, 1},
                                      {use, 2},
                                      {'var!', 1},
                                      {'var!', 2},
                                      {'|>', 2},
                                      {'||', 2}]},
                                    {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     [{'if_recompiling?', 1}, {recompile, 2}]}],
                               module => 'Elixir.TypeCheck.Builtin',
                               prematch_vars => warn,
                               requires =>
                                   ['Elixir.Application',
                                    'Elixir.Kernel',
                                    'Elixir.Kernel.Typespec',
                                    'Elixir.TypeCheck',
                                    'Elixir.TypeCheck.Builtin',
                                    'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                    'Elixir.TypeCheck.Internals.ToTypespec',
                                    'Elixir.TypeCheck.Macros'],
                               tracers => [elixir_lexical],
                               unused_vars => {#{}, 0}, vars => []}).

none() ->
    'Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.None',
                             #{'__struct__' => 'Elixir.Macro.Env',
                               aliases => [], context => nil,
                               context_modules => ['Elixir.TypeCheck.Builtin'],
                               contextual_vars => [],
                               current_vars => {#{}, #{}},
                               file =>
                                   <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                     "nal/elixir/type_check/lib/type_check/builtin."
                                     "ex">>,
                               function => {none, 0},
                               functions =>
                                   [{'Elixir.TypeCheck.Builtin',
                                     [{any, 0},
                                      {arity, 0},
                                      {as_boolean, 1},
                                      {atom, 0},
                                      {binary, 0},
                                      {bitstring, 0},
                                      {boolean, 0},
                                      {byte, 0},
                                      {char, 0},
                                      {charlist, 0},
                                      {fixed_list, 1},
                                      {fixed_map, 1},
                                      {fixed_tuple, 1},
                                      {float, 0},
                                      {'fun', 0},
                                      {function, 0},
                                      {guarded_by, 2},
                                      {integer, 0},
                                      {keyword, 0},
                                      {keyword, 1},
                                      {lazy_explicit, 3},
                                      {list, 0},
                                      {list, 1},
                                      {literal, 1},
                                      {map, 0},
                                      {map, 2},
                                      {mfa, 0},
                                      {module, 0},
                                      {named_type, 2},
                                      {neg_integer, 0},
                                      {no_return, 0},
                                      {non_neg_integer, 0},
                                      {none, 0},
                                      {number, 0},
                                      {one_of, 1},
                                      {one_of, 2},
                                      {pos_integer, 0},
                                      {range, 1},
                                      {range, 2},
                                      {term, 0},
                                      {tuple, 0},
                                      {tuple, 1}]},
                                    {'Elixir.Kernel',
                                     [{'!=', 2},
                                      {'!==', 2},
                                      {'*', 2},
                                      {'+', 1},
                                      {'+', 2},
                                      {'++', 2},
                                      {'-', 1},
                                      {'-', 2},
                                      {'--', 2},
                                      {'/', 2},
                                      {'<', 2},
                                      {'<=', 2},
                                      {'==', 2},
                                      {'===', 2},
                                      {'=~', 2},
                                      {'>', 2},
                                      {'>=', 2},
                                      {abs, 1},
                                      {apply, 2},
                                      {apply, 3},
                                      {binary_part, 3},
                                      {bit_size, 1},
                                      {byte_size, 1},
                                      {ceil, 1},
                                      {'div', 2},
                                      {elem, 2},
                                      {exit, 1},
                                      {floor, 1},
                                      {'function_exported?', 3},
                                      {get_and_update_in, 3},
                                      {get_in, 2},
                                      {hd, 1},
                                      {inspect, 1},
                                      {inspect, 2},
                                      {is_atom, 1},
                                      {is_binary, 1},
                                      {is_bitstring, 1},
                                      {is_boolean, 1},
                                      {is_float, 1},
                                      {is_function, 1},
                                      {is_function, 2},
                                      {is_integer, 1},
                                      {is_list, 1},
                                      {is_map, 1},
                                      {is_map_key, 2},
                                      {is_number, 1},
                                      {is_pid, 1},
                                      {is_port, 1},
                                      {is_reference, 1},
                                      {is_tuple, 1},
                                      {length, 1},
                                      {'macro_exported?', 3},
                                      {make_ref, 0},
                                      {map_size, 1},
                                      {max, 2},
                                      {min, 2},
                                      {node, 0},
                                      {node, 1},
                                      {'not', 1},
                                      {pop_in, 2},
                                      {put_elem, 3},
                                      {put_in, 3},
                                      {'rem', 2},
                                      {round, 1},
                                      {self, 0},
                                      {send, 2},
                                      {spawn, 1},
                                      {spawn, 3},
                                      {spawn_link, 1},
                                      {spawn_link, 3},
                                      {spawn_monitor, 1},
                                      {spawn_monitor, 3},
                                      {struct, 1},
                                      {struct, 2},
                                      {'struct!', 1},
                                      {'struct!', 2},
                                      {throw, 1},
                                      {tl, 1},
                                      {trunc, 1},
                                      {tuple_size, 1},
                                      {update_in, 3}]}],
                               lexical_tracker => nil, line => 768,
                               macro_aliases => [],
                               macros =>
                                   [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                    {'Elixir.TypeCheck.Macros',
                                     [{'@', 1},
                                      {'opaque!', 1},
                                      {'spec!', 1},
                                      {'type!', 1},
                                      {'typep!', 1}]},
                                    {'Elixir.Kernel',
                                     [{'!', 1},
                                      {'&&', 2},
                                      {'..', 2},
                                      {'<>', 2},
                                      {'alias!', 1},
                                      {'and', 2},
                                      {binding, 0},
                                      {binding, 1},
                                      {def, 1},
                                      {def, 2},
                                      {defdelegate, 2},
                                      {defexception, 1},
                                      {defguard, 1},
                                      {defguardp, 1},
                                      {defimpl, 2},
                                      {defimpl, 3},
                                      {defmacro, 1},
                                      {defmacro, 2},
                                      {defmacrop, 1},
                                      {defmacrop, 2},
                                      {defmodule, 2},
                                      {defoverridable, 1},
                                      {defp, 1},
                                      {defp, 2},
                                      {defprotocol, 2},
                                      {defstruct, 1},
                                      {destructure, 2},
                                      {get_and_update_in, 2},
                                      {'if', 2},
                                      {in, 2},
                                      {is_nil, 1},
                                      {is_struct, 1},
                                      {'match?', 2},
                                      {'or', 2},
                                      {pop_in, 1},
                                      {put_in, 2},
                                      {raise, 1},
                                      {raise, 2},
                                      {reraise, 2},
                                      {reraise, 3},
                                      {sigil_C, 2},
                                      {sigil_D, 2},
                                      {sigil_N, 2},
                                      {sigil_R, 2},
                                      {sigil_S, 2},
                                      {sigil_T, 2},
                                      {sigil_U, 2},
                                      {sigil_W, 2},
                                      {sigil_c, 2},
                                      {sigil_r, 2},
                                      {sigil_s, 2},
                                      {sigil_w, 2},
                                      {to_char_list, 1},
                                      {to_charlist, 1},
                                      {to_string, 1},
                                      {unless, 2},
                                      {update_in, 2},
                                      {use, 1},
                                      {use, 2},
                                      {'var!', 1},
                                      {'var!', 2},
                                      {'|>', 2},
                                      {'||', 2}]},
                                    {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     [{'if_recompiling?', 1}, {recompile, 2}]}],
                               module => 'Elixir.TypeCheck.Builtin',
                               prematch_vars => warn,
                               requires =>
                                   ['Elixir.Application',
                                    'Elixir.Kernel',
                                    'Elixir.Kernel.Typespec',
                                    'Elixir.TypeCheck',
                                    'Elixir.TypeCheck.Builtin',
                                    'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                    'Elixir.TypeCheck.Internals.ToTypespec',
                                    'Elixir.TypeCheck.Macros'],
                               tracers => [elixir_lexical],
                               unused_vars => {#{}, 0}, vars => []}).

number() ->
    'Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.Number',
                             #{'__struct__' => 'Elixir.Macro.Env',
                               aliases => [], context => nil,
                               context_modules => ['Elixir.TypeCheck.Builtin'],
                               contextual_vars => [],
                               current_vars => {#{}, #{}},
                               file =>
                                   <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                     "nal/elixir/type_check/lib/type_check/builtin."
                                     "ex">>,
                               function => {number, 0},
                               functions =>
                                   [{'Elixir.TypeCheck.Builtin',
                                     [{any, 0},
                                      {arity, 0},
                                      {as_boolean, 1},
                                      {atom, 0},
                                      {binary, 0},
                                      {bitstring, 0},
                                      {boolean, 0},
                                      {byte, 0},
                                      {char, 0},
                                      {charlist, 0},
                                      {fixed_list, 1},
                                      {fixed_map, 1},
                                      {fixed_tuple, 1},
                                      {float, 0},
                                      {'fun', 0},
                                      {function, 0},
                                      {guarded_by, 2},
                                      {integer, 0},
                                      {keyword, 0},
                                      {keyword, 1},
                                      {lazy_explicit, 3},
                                      {list, 0},
                                      {list, 1},
                                      {literal, 1},
                                      {map, 0},
                                      {map, 2},
                                      {mfa, 0},
                                      {module, 0},
                                      {named_type, 2},
                                      {neg_integer, 0},
                                      {no_return, 0},
                                      {non_neg_integer, 0},
                                      {none, 0},
                                      {number, 0},
                                      {one_of, 1},
                                      {one_of, 2},
                                      {pos_integer, 0},
                                      {range, 1},
                                      {range, 2},
                                      {term, 0},
                                      {tuple, 0},
                                      {tuple, 1}]},
                                    {'Elixir.Kernel',
                                     [{'!=', 2},
                                      {'!==', 2},
                                      {'*', 2},
                                      {'+', 1},
                                      {'+', 2},
                                      {'++', 2},
                                      {'-', 1},
                                      {'-', 2},
                                      {'--', 2},
                                      {'/', 2},
                                      {'<', 2},
                                      {'<=', 2},
                                      {'==', 2},
                                      {'===', 2},
                                      {'=~', 2},
                                      {'>', 2},
                                      {'>=', 2},
                                      {abs, 1},
                                      {apply, 2},
                                      {apply, 3},
                                      {binary_part, 3},
                                      {bit_size, 1},
                                      {byte_size, 1},
                                      {ceil, 1},
                                      {'div', 2},
                                      {elem, 2},
                                      {exit, 1},
                                      {floor, 1},
                                      {'function_exported?', 3},
                                      {get_and_update_in, 3},
                                      {get_in, 2},
                                      {hd, 1},
                                      {inspect, 1},
                                      {inspect, 2},
                                      {is_atom, 1},
                                      {is_binary, 1},
                                      {is_bitstring, 1},
                                      {is_boolean, 1},
                                      {is_float, 1},
                                      {is_function, 1},
                                      {is_function, 2},
                                      {is_integer, 1},
                                      {is_list, 1},
                                      {is_map, 1},
                                      {is_map_key, 2},
                                      {is_number, 1},
                                      {is_pid, 1},
                                      {is_port, 1},
                                      {is_reference, 1},
                                      {is_tuple, 1},
                                      {length, 1},
                                      {'macro_exported?', 3},
                                      {make_ref, 0},
                                      {map_size, 1},
                                      {max, 2},
                                      {min, 2},
                                      {node, 0},
                                      {node, 1},
                                      {'not', 1},
                                      {pop_in, 2},
                                      {put_elem, 3},
                                      {put_in, 3},
                                      {'rem', 2},
                                      {round, 1},
                                      {self, 0},
                                      {send, 2},
                                      {spawn, 1},
                                      {spawn, 3},
                                      {spawn_link, 1},
                                      {spawn_link, 3},
                                      {spawn_monitor, 1},
                                      {spawn_monitor, 3},
                                      {struct, 1},
                                      {struct, 2},
                                      {'struct!', 1},
                                      {'struct!', 2},
                                      {throw, 1},
                                      {tl, 1},
                                      {trunc, 1},
                                      {tuple_size, 1},
                                      {update_in, 3}]}],
                               lexical_tracker => nil, line => 242,
                               macro_aliases => [],
                               macros =>
                                   [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                    {'Elixir.TypeCheck.Macros',
                                     [{'@', 1},
                                      {'opaque!', 1},
                                      {'spec!', 1},
                                      {'type!', 1},
                                      {'typep!', 1}]},
                                    {'Elixir.Kernel',
                                     [{'!', 1},
                                      {'&&', 2},
                                      {'..', 2},
                                      {'<>', 2},
                                      {'alias!', 1},
                                      {'and', 2},
                                      {binding, 0},
                                      {binding, 1},
                                      {def, 1},
                                      {def, 2},
                                      {defdelegate, 2},
                                      {defexception, 1},
                                      {defguard, 1},
                                      {defguardp, 1},
                                      {defimpl, 2},
                                      {defimpl, 3},
                                      {defmacro, 1},
                                      {defmacro, 2},
                                      {defmacrop, 1},
                                      {defmacrop, 2},
                                      {defmodule, 2},
                                      {defoverridable, 1},
                                      {defp, 1},
                                      {defp, 2},
                                      {defprotocol, 2},
                                      {defstruct, 1},
                                      {destructure, 2},
                                      {get_and_update_in, 2},
                                      {'if', 2},
                                      {in, 2},
                                      {is_nil, 1},
                                      {is_struct, 1},
                                      {'match?', 2},
                                      {'or', 2},
                                      {pop_in, 1},
                                      {put_in, 2},
                                      {raise, 1},
                                      {raise, 2},
                                      {reraise, 2},
                                      {reraise, 3},
                                      {sigil_C, 2},
                                      {sigil_D, 2},
                                      {sigil_N, 2},
                                      {sigil_R, 2},
                                      {sigil_S, 2},
                                      {sigil_T, 2},
                                      {sigil_U, 2},
                                      {sigil_W, 2},
                                      {sigil_c, 2},
                                      {sigil_r, 2},
                                      {sigil_s, 2},
                                      {sigil_w, 2},
                                      {to_char_list, 1},
                                      {to_charlist, 1},
                                      {to_string, 1},
                                      {unless, 2},
                                      {update_in, 2},
                                      {use, 1},
                                      {use, 2},
                                      {'var!', 1},
                                      {'var!', 2},
                                      {'|>', 2},
                                      {'||', 2}]},
                                    {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     [{'if_recompiling?', 1}, {recompile, 2}]}],
                               module => 'Elixir.TypeCheck.Builtin',
                               prematch_vars => warn,
                               requires =>
                                   ['Elixir.Application',
                                    'Elixir.Kernel',
                                    'Elixir.Kernel.Typespec',
                                    'Elixir.TypeCheck',
                                    'Elixir.TypeCheck.Builtin',
                                    'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                    'Elixir.TypeCheck.Internals.ToTypespec',
                                    'Elixir.TypeCheck.Macros'],
                               tracers => [elixir_lexical],
                               unused_vars => {#{}, 0}, vars => []}).

one_of(_list@1 = #{'__struct__' :=
                       'Elixir.TypeCheck.Builtin.FixedList'}) ->
    'Elixir.TypeCheck.Builtin':one_of(case _list@1 of
                                          #{element_types := _@1} -> _@1;
                                          _@1 when erlang:is_map(_@1) ->
                                              erlang:error({badkey,
                                                            element_types,
                                                            _@1});
                                          _@1 -> _@1:element_types()
                                      end);
one_of(_list_of_possibilities@1)
    when erlang:is_list(_list_of_possibilities@1) ->
    #{choices => _list_of_possibilities@1,
      '__struct__' => 'Elixir.TypeCheck.Builtin.OneOf'}.

one_of(_left@1 = #{'__struct__' :=
                       'Elixir.TypeCheck.Builtin.OneOf'},
       _right@1 = #{'__struct__' :=
                        'Elixir.TypeCheck.Builtin.OneOf'}) ->
    'Elixir.TypeCheck.Builtin':one_of(case _left@1 of
                                          #{choices := _@1} -> _@1;
                                          _@1 when erlang:is_map(_@1) ->
                                              erlang:error({badkey,
                                                            choices,
                                                            _@1});
                                          _@1 -> _@1:choices()
                                      end
                                          ++
                                          case _right@1 of
                                              #{choices := _@2} -> _@2;
                                              _@2 when erlang:is_map(_@2) ->
                                                  erlang:error({badkey,
                                                                choices,
                                                                _@2});
                                              _@2 -> _@2:choices()
                                          end);
one_of(_left@1 = #{'__struct__' :=
                       'Elixir.TypeCheck.Builtin.OneOf'},
       _right@1) ->
    'Elixir.TypeCheck.Builtin':one_of(case _left@1 of
                                          #{choices := _@1} -> _@1;
                                          _@1 when erlang:is_map(_@1) ->
                                              erlang:error({badkey,
                                                            choices,
                                                            _@1});
                                          _@1 -> _@1:choices()
                                      end
                                          ++ [_right@1]);
one_of(_left@1,
       _right@1 = #{'__struct__' :=
                        'Elixir.TypeCheck.Builtin.OneOf'}) ->
    'Elixir.TypeCheck.Builtin':one_of([_left@1] ++
                                          case _right@1 of
                                              #{choices := _@1} -> _@1;
                                              _@1 when erlang:is_map(_@1) ->
                                                  erlang:error({badkey,
                                                                choices,
                                                                _@1});
                                              _@1 -> _@1:choices()
                                          end);
one_of(_left@1, _right@1) ->
    'Elixir.TypeCheck.Builtin':one_of([_left@1, _right@1]).

pos_integer() ->
    'Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.PosInteger',
                             #{'__struct__' => 'Elixir.Macro.Env',
                               aliases => [], context => nil,
                               context_modules => ['Elixir.TypeCheck.Builtin'],
                               contextual_vars => [],
                               current_vars => {#{}, #{}},
                               file =>
                                   <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                     "nal/elixir/type_check/lib/type_check/builtin."
                                     "ex">>,
                               function => {pos_integer, 0},
                               functions =>
                                   [{'Elixir.TypeCheck.Builtin',
                                     [{any, 0},
                                      {arity, 0},
                                      {as_boolean, 1},
                                      {atom, 0},
                                      {binary, 0},
                                      {bitstring, 0},
                                      {boolean, 0},
                                      {byte, 0},
                                      {char, 0},
                                      {charlist, 0},
                                      {fixed_list, 1},
                                      {fixed_map, 1},
                                      {fixed_tuple, 1},
                                      {float, 0},
                                      {'fun', 0},
                                      {function, 0},
                                      {guarded_by, 2},
                                      {integer, 0},
                                      {keyword, 0},
                                      {keyword, 1},
                                      {lazy_explicit, 3},
                                      {list, 0},
                                      {list, 1},
                                      {literal, 1},
                                      {map, 0},
                                      {map, 2},
                                      {mfa, 0},
                                      {module, 0},
                                      {named_type, 2},
                                      {neg_integer, 0},
                                      {no_return, 0},
                                      {non_neg_integer, 0},
                                      {none, 0},
                                      {number, 0},
                                      {one_of, 1},
                                      {one_of, 2},
                                      {pos_integer, 0},
                                      {range, 1},
                                      {range, 2},
                                      {term, 0},
                                      {tuple, 0},
                                      {tuple, 1}]},
                                    {'Elixir.Kernel',
                                     [{'!=', 2},
                                      {'!==', 2},
                                      {'*', 2},
                                      {'+', 1},
                                      {'+', 2},
                                      {'++', 2},
                                      {'-', 1},
                                      {'-', 2},
                                      {'--', 2},
                                      {'/', 2},
                                      {'<', 2},
                                      {'<=', 2},
                                      {'==', 2},
                                      {'===', 2},
                                      {'=~', 2},
                                      {'>', 2},
                                      {'>=', 2},
                                      {abs, 1},
                                      {apply, 2},
                                      {apply, 3},
                                      {binary_part, 3},
                                      {bit_size, 1},
                                      {byte_size, 1},
                                      {ceil, 1},
                                      {'div', 2},
                                      {elem, 2},
                                      {exit, 1},
                                      {floor, 1},
                                      {'function_exported?', 3},
                                      {get_and_update_in, 3},
                                      {get_in, 2},
                                      {hd, 1},
                                      {inspect, 1},
                                      {inspect, 2},
                                      {is_atom, 1},
                                      {is_binary, 1},
                                      {is_bitstring, 1},
                                      {is_boolean, 1},
                                      {is_float, 1},
                                      {is_function, 1},
                                      {is_function, 2},
                                      {is_integer, 1},
                                      {is_list, 1},
                                      {is_map, 1},
                                      {is_map_key, 2},
                                      {is_number, 1},
                                      {is_pid, 1},
                                      {is_port, 1},
                                      {is_reference, 1},
                                      {is_tuple, 1},
                                      {length, 1},
                                      {'macro_exported?', 3},
                                      {make_ref, 0},
                                      {map_size, 1},
                                      {max, 2},
                                      {min, 2},
                                      {node, 0},
                                      {node, 1},
                                      {'not', 1},
                                      {pop_in, 2},
                                      {put_elem, 3},
                                      {put_in, 3},
                                      {'rem', 2},
                                      {round, 1},
                                      {self, 0},
                                      {send, 2},
                                      {spawn, 1},
                                      {spawn, 3},
                                      {spawn_link, 1},
                                      {spawn_link, 3},
                                      {spawn_monitor, 1},
                                      {spawn_monitor, 3},
                                      {struct, 1},
                                      {struct, 2},
                                      {'struct!', 1},
                                      {'struct!', 2},
                                      {throw, 1},
                                      {tl, 1},
                                      {trunc, 1},
                                      {tuple_size, 1},
                                      {update_in, 3}]}],
                               lexical_tracker => nil, line => 220,
                               macro_aliases => [],
                               macros =>
                                   [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                    {'Elixir.TypeCheck.Macros',
                                     [{'@', 1},
                                      {'opaque!', 1},
                                      {'spec!', 1},
                                      {'type!', 1},
                                      {'typep!', 1}]},
                                    {'Elixir.Kernel',
                                     [{'!', 1},
                                      {'&&', 2},
                                      {'..', 2},
                                      {'<>', 2},
                                      {'alias!', 1},
                                      {'and', 2},
                                      {binding, 0},
                                      {binding, 1},
                                      {def, 1},
                                      {def, 2},
                                      {defdelegate, 2},
                                      {defexception, 1},
                                      {defguard, 1},
                                      {defguardp, 1},
                                      {defimpl, 2},
                                      {defimpl, 3},
                                      {defmacro, 1},
                                      {defmacro, 2},
                                      {defmacrop, 1},
                                      {defmacrop, 2},
                                      {defmodule, 2},
                                      {defoverridable, 1},
                                      {defp, 1},
                                      {defp, 2},
                                      {defprotocol, 2},
                                      {defstruct, 1},
                                      {destructure, 2},
                                      {get_and_update_in, 2},
                                      {'if', 2},
                                      {in, 2},
                                      {is_nil, 1},
                                      {is_struct, 1},
                                      {'match?', 2},
                                      {'or', 2},
                                      {pop_in, 1},
                                      {put_in, 2},
                                      {raise, 1},
                                      {raise, 2},
                                      {reraise, 2},
                                      {reraise, 3},
                                      {sigil_C, 2},
                                      {sigil_D, 2},
                                      {sigil_N, 2},
                                      {sigil_R, 2},
                                      {sigil_S, 2},
                                      {sigil_T, 2},
                                      {sigil_U, 2},
                                      {sigil_W, 2},
                                      {sigil_c, 2},
                                      {sigil_r, 2},
                                      {sigil_s, 2},
                                      {sigil_w, 2},
                                      {to_char_list, 1},
                                      {to_charlist, 1},
                                      {to_string, 1},
                                      {unless, 2},
                                      {update_in, 2},
                                      {use, 1},
                                      {use, 2},
                                      {'var!', 1},
                                      {'var!', 2},
                                      {'|>', 2},
                                      {'||', 2}]},
                                    {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     [{'if_recompiling?', 1}, {recompile, 2}]}],
                               module => 'Elixir.TypeCheck.Builtin',
                               prematch_vars => warn,
                               requires =>
                                   ['Elixir.Application',
                                    'Elixir.Kernel',
                                    'Elixir.Kernel.Typespec',
                                    'Elixir.TypeCheck',
                                    'Elixir.TypeCheck.Builtin',
                                    'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                    'Elixir.TypeCheck.Internals.ToTypespec',
                                    'Elixir.TypeCheck.Macros'],
                               tracers => [elixir_lexical],
                               unused_vars => {#{}, 0}, vars => []}).

range(_range@1 = #{'__struct__' := 'Elixir.Range',
                   first := __lower@1, last := __higher@1}) ->
    ('Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.Range',
                              #{'__struct__' => 'Elixir.Macro.Env',
                                aliases => [], context => nil,
                                context_modules => ['Elixir.TypeCheck.Builtin'],
                                contextual_vars => [],
                                current_vars =>
                                    {#{{'_higher', nil} => 1,
                                       {'_lower', nil} => 0, {range, nil} => 2},
                                     #{{'_higher', nil} => 1,
                                       {'_lower', nil} => 0,
                                       {range, nil} => 2}},
                                file =>
                                    <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                      "nal/elixir/type_check/lib/type_check/builtin."
                                      "ex">>,
                                function => {range, 1},
                                functions =>
                                    [{'Elixir.TypeCheck.Builtin',
                                      [{any, 0},
                                       {arity, 0},
                                       {as_boolean, 1},
                                       {atom, 0},
                                       {binary, 0},
                                       {bitstring, 0},
                                       {boolean, 0},
                                       {byte, 0},
                                       {char, 0},
                                       {charlist, 0},
                                       {fixed_list, 1},
                                       {fixed_map, 1},
                                       {fixed_tuple, 1},
                                       {float, 0},
                                       {'fun', 0},
                                       {function, 0},
                                       {guarded_by, 2},
                                       {integer, 0},
                                       {keyword, 0},
                                       {keyword, 1},
                                       {lazy_explicit, 3},
                                       {list, 0},
                                       {list, 1},
                                       {literal, 1},
                                       {map, 0},
                                       {map, 2},
                                       {mfa, 0},
                                       {module, 0},
                                       {named_type, 2},
                                       {neg_integer, 0},
                                       {no_return, 0},
                                       {non_neg_integer, 0},
                                       {none, 0},
                                       {number, 0},
                                       {one_of, 1},
                                       {one_of, 2},
                                       {pos_integer, 0},
                                       {range, 1},
                                       {range, 2},
                                       {term, 0},
                                       {tuple, 0},
                                       {tuple, 1}]},
                                     {'Elixir.Kernel',
                                      [{'!=', 2},
                                       {'!==', 2},
                                       {'*', 2},
                                       {'+', 1},
                                       {'+', 2},
                                       {'++', 2},
                                       {'-', 1},
                                       {'-', 2},
                                       {'--', 2},
                                       {'/', 2},
                                       {'<', 2},
                                       {'<=', 2},
                                       {'==', 2},
                                       {'===', 2},
                                       {'=~', 2},
                                       {'>', 2},
                                       {'>=', 2},
                                       {abs, 1},
                                       {apply, 2},
                                       {apply, 3},
                                       {binary_part, 3},
                                       {bit_size, 1},
                                       {byte_size, 1},
                                       {ceil, 1},
                                       {'div', 2},
                                       {elem, 2},
                                       {exit, 1},
                                       {floor, 1},
                                       {'function_exported?', 3},
                                       {get_and_update_in, 3},
                                       {get_in, 2},
                                       {hd, 1},
                                       {inspect, 1},
                                       {inspect, 2},
                                       {is_atom, 1},
                                       {is_binary, 1},
                                       {is_bitstring, 1},
                                       {is_boolean, 1},
                                       {is_float, 1},
                                       {is_function, 1},
                                       {is_function, 2},
                                       {is_integer, 1},
                                       {is_list, 1},
                                       {is_map, 1},
                                       {is_map_key, 2},
                                       {is_number, 1},
                                       {is_pid, 1},
                                       {is_port, 1},
                                       {is_reference, 1},
                                       {is_tuple, 1},
                                       {length, 1},
                                       {'macro_exported?', 3},
                                       {make_ref, 0},
                                       {map_size, 1},
                                       {max, 2},
                                       {min, 2},
                                       {node, 0},
                                       {node, 1},
                                       {'not', 1},
                                       {pop_in, 2},
                                       {put_elem, 3},
                                       {put_in, 3},
                                       {'rem', 2},
                                       {round, 1},
                                       {self, 0},
                                       {send, 2},
                                       {spawn, 1},
                                       {spawn, 3},
                                       {spawn_link, 1},
                                       {spawn_link, 3},
                                       {spawn_monitor, 1},
                                       {spawn_monitor, 3},
                                       {struct, 1},
                                       {struct, 2},
                                       {'struct!', 1},
                                       {'struct!', 2},
                                       {throw, 1},
                                       {tl, 1},
                                       {trunc, 1},
                                       {tuple_size, 1},
                                       {update_in, 3}]}],
                                lexical_tracker => nil, line => 467,
                                macro_aliases => [],
                                macros =>
                                    [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                     {'Elixir.TypeCheck.Macros',
                                      [{'@', 1},
                                       {'opaque!', 1},
                                       {'spec!', 1},
                                       {'type!', 1},
                                       {'typep!', 1}]},
                                     {'Elixir.Kernel',
                                      [{'!', 1},
                                       {'&&', 2},
                                       {'..', 2},
                                       {'<>', 2},
                                       {'alias!', 1},
                                       {'and', 2},
                                       {binding, 0},
                                       {binding, 1},
                                       {def, 1},
                                       {def, 2},
                                       {defdelegate, 2},
                                       {defexception, 1},
                                       {defguard, 1},
                                       {defguardp, 1},
                                       {defimpl, 2},
                                       {defimpl, 3},
                                       {defmacro, 1},
                                       {defmacro, 2},
                                       {defmacrop, 1},
                                       {defmacrop, 2},
                                       {defmodule, 2},
                                       {defoverridable, 1},
                                       {defp, 1},
                                       {defp, 2},
                                       {defprotocol, 2},
                                       {defstruct, 1},
                                       {destructure, 2},
                                       {get_and_update_in, 2},
                                       {'if', 2},
                                       {in, 2},
                                       {is_nil, 1},
                                       {is_struct, 1},
                                       {'match?', 2},
                                       {'or', 2},
                                       {pop_in, 1},
                                       {put_in, 2},
                                       {raise, 1},
                                       {raise, 2},
                                       {reraise, 2},
                                       {reraise, 3},
                                       {sigil_C, 2},
                                       {sigil_D, 2},
                                       {sigil_N, 2},
                                       {sigil_R, 2},
                                       {sigil_S, 2},
                                       {sigil_T, 2},
                                       {sigil_U, 2},
                                       {sigil_W, 2},
                                       {sigil_c, 2},
                                       {sigil_r, 2},
                                       {sigil_s, 2},
                                       {sigil_w, 2},
                                       {to_char_list, 1},
                                       {to_charlist, 1},
                                       {to_string, 1},
                                       {unless, 2},
                                       {update_in, 2},
                                       {use, 1},
                                       {use, 2},
                                       {'var!', 1},
                                       {'var!', 2},
                                       {'|>', 2},
                                       {'||', 2}]},
                                     {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                      [{'if_recompiling?', 1},
                                       {recompile, 2}]}],
                                module => 'Elixir.TypeCheck.Builtin',
                                prematch_vars => warn,
                                requires =>
                                    ['Elixir.Application',
                                     'Elixir.Kernel',
                                     'Elixir.Kernel.Typespec',
                                     'Elixir.TypeCheck',
                                     'Elixir.TypeCheck.Builtin',
                                     'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     'Elixir.TypeCheck.Internals.ToTypespec',
                                     'Elixir.TypeCheck.Macros'],
                                tracers => [elixir_lexical],
                                unused_vars =>
                                    {#{{'_higher', 1} => 464,
                                       {'_lower', 0} => 464, {range, 2} => 464},
                                     3},
                                vars =>
                                    [{'_higher', nil},
                                     {'_lower', nil},
                                     {range, nil}]}))#{range => _range@1};
range(#{'__struct__' :=
            'Elixir.TypeCheck.Builtin.Literal',
        value := _val@1 = #{'__struct__' := 'Elixir.Range'}}) ->
    'Elixir.TypeCheck.Builtin':range(_val@1).

range(#{'__struct__' :=
            'Elixir.TypeCheck.Builtin.Literal',
        value := _lower@1},
      #{'__struct__' := 'Elixir.TypeCheck.Builtin.Literal',
        value := _higher@1}) ->
    'Elixir.TypeCheck.Builtin':range(_lower@1, _higher@1);
range(_lower@1, _higher@1) ->
    ('Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.Range',
                              #{'__struct__' => 'Elixir.Macro.Env',
                                aliases => [], context => nil,
                                context_modules => ['Elixir.TypeCheck.Builtin'],
                                contextual_vars => [],
                                current_vars =>
                                    {#{{higher, nil} => 1, {lower, nil} => 0},
                                     #{{higher, nil} => 1, {lower, nil} => 0}},
                                file =>
                                    <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                      "nal/elixir/type_check/lib/type_check/builtin."
                                      "ex">>,
                                function => {range, 2},
                                functions =>
                                    [{'Elixir.TypeCheck.Builtin',
                                      [{any, 0},
                                       {arity, 0},
                                       {as_boolean, 1},
                                       {atom, 0},
                                       {binary, 0},
                                       {bitstring, 0},
                                       {boolean, 0},
                                       {byte, 0},
                                       {char, 0},
                                       {charlist, 0},
                                       {fixed_list, 1},
                                       {fixed_map, 1},
                                       {fixed_tuple, 1},
                                       {float, 0},
                                       {'fun', 0},
                                       {function, 0},
                                       {guarded_by, 2},
                                       {integer, 0},
                                       {keyword, 0},
                                       {keyword, 1},
                                       {lazy_explicit, 3},
                                       {list, 0},
                                       {list, 1},
                                       {literal, 1},
                                       {map, 0},
                                       {map, 2},
                                       {mfa, 0},
                                       {module, 0},
                                       {named_type, 2},
                                       {neg_integer, 0},
                                       {no_return, 0},
                                       {non_neg_integer, 0},
                                       {none, 0},
                                       {number, 0},
                                       {one_of, 1},
                                       {one_of, 2},
                                       {pos_integer, 0},
                                       {range, 1},
                                       {range, 2},
                                       {term, 0},
                                       {tuple, 0},
                                       {tuple, 1}]},
                                     {'Elixir.Kernel',
                                      [{'!=', 2},
                                       {'!==', 2},
                                       {'*', 2},
                                       {'+', 1},
                                       {'+', 2},
                                       {'++', 2},
                                       {'-', 1},
                                       {'-', 2},
                                       {'--', 2},
                                       {'/', 2},
                                       {'<', 2},
                                       {'<=', 2},
                                       {'==', 2},
                                       {'===', 2},
                                       {'=~', 2},
                                       {'>', 2},
                                       {'>=', 2},
                                       {abs, 1},
                                       {apply, 2},
                                       {apply, 3},
                                       {binary_part, 3},
                                       {bit_size, 1},
                                       {byte_size, 1},
                                       {ceil, 1},
                                       {'div', 2},
                                       {elem, 2},
                                       {exit, 1},
                                       {floor, 1},
                                       {'function_exported?', 3},
                                       {get_and_update_in, 3},
                                       {get_in, 2},
                                       {hd, 1},
                                       {inspect, 1},
                                       {inspect, 2},
                                       {is_atom, 1},
                                       {is_binary, 1},
                                       {is_bitstring, 1},
                                       {is_boolean, 1},
                                       {is_float, 1},
                                       {is_function, 1},
                                       {is_function, 2},
                                       {is_integer, 1},
                                       {is_list, 1},
                                       {is_map, 1},
                                       {is_map_key, 2},
                                       {is_number, 1},
                                       {is_pid, 1},
                                       {is_port, 1},
                                       {is_reference, 1},
                                       {is_tuple, 1},
                                       {length, 1},
                                       {'macro_exported?', 3},
                                       {make_ref, 0},
                                       {map_size, 1},
                                       {max, 2},
                                       {min, 2},
                                       {node, 0},
                                       {node, 1},
                                       {'not', 1},
                                       {pop_in, 2},
                                       {put_elem, 3},
                                       {put_in, 3},
                                       {'rem', 2},
                                       {round, 1},
                                       {self, 0},
                                       {send, 2},
                                       {spawn, 1},
                                       {spawn, 3},
                                       {spawn_link, 1},
                                       {spawn_link, 3},
                                       {spawn_monitor, 1},
                                       {spawn_monitor, 3},
                                       {struct, 1},
                                       {struct, 2},
                                       {'struct!', 1},
                                       {'struct!', 2},
                                       {throw, 1},
                                       {tl, 1},
                                       {trunc, 1},
                                       {tuple_size, 1},
                                       {update_in, 3}]}],
                                lexical_tracker => nil, line => 496,
                                macro_aliases => [],
                                macros =>
                                    [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                     {'Elixir.TypeCheck.Macros',
                                      [{'@', 1},
                                       {'opaque!', 1},
                                       {'spec!', 1},
                                       {'type!', 1},
                                       {'typep!', 1}]},
                                     {'Elixir.Kernel',
                                      [{'!', 1},
                                       {'&&', 2},
                                       {'..', 2},
                                       {'<>', 2},
                                       {'alias!', 1},
                                       {'and', 2},
                                       {binding, 0},
                                       {binding, 1},
                                       {def, 1},
                                       {def, 2},
                                       {defdelegate, 2},
                                       {defexception, 1},
                                       {defguard, 1},
                                       {defguardp, 1},
                                       {defimpl, 2},
                                       {defimpl, 3},
                                       {defmacro, 1},
                                       {defmacro, 2},
                                       {defmacrop, 1},
                                       {defmacrop, 2},
                                       {defmodule, 2},
                                       {defoverridable, 1},
                                       {defp, 1},
                                       {defp, 2},
                                       {defprotocol, 2},
                                       {defstruct, 1},
                                       {destructure, 2},
                                       {get_and_update_in, 2},
                                       {'if', 2},
                                       {in, 2},
                                       {is_nil, 1},
                                       {is_struct, 1},
                                       {'match?', 2},
                                       {'or', 2},
                                       {pop_in, 1},
                                       {put_in, 2},
                                       {raise, 1},
                                       {raise, 2},
                                       {reraise, 2},
                                       {reraise, 3},
                                       {sigil_C, 2},
                                       {sigil_D, 2},
                                       {sigil_N, 2},
                                       {sigil_R, 2},
                                       {sigil_S, 2},
                                       {sigil_T, 2},
                                       {sigil_U, 2},
                                       {sigil_W, 2},
                                       {sigil_c, 2},
                                       {sigil_r, 2},
                                       {sigil_s, 2},
                                       {sigil_w, 2},
                                       {to_char_list, 1},
                                       {to_charlist, 1},
                                       {to_string, 1},
                                       {unless, 2},
                                       {update_in, 2},
                                       {use, 1},
                                       {use, 2},
                                       {'var!', 1},
                                       {'var!', 2},
                                       {'|>', 2},
                                       {'||', 2}]},
                                     {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                      [{'if_recompiling?', 1},
                                       {recompile, 2}]}],
                                module => 'Elixir.TypeCheck.Builtin',
                                prematch_vars => warn,
                                requires =>
                                    ['Elixir.Application',
                                     'Elixir.Kernel',
                                     'Elixir.Kernel.Typespec',
                                     'Elixir.TypeCheck',
                                     'Elixir.TypeCheck.Builtin',
                                     'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     'Elixir.TypeCheck.Internals.ToTypespec',
                                     'Elixir.TypeCheck.Macros'],
                                tracers => [elixir_lexical],
                                unused_vars =>
                                    {#{{higher, 1} => 493, {lower, 0} => 493},
                                     2},
                                vars => [{higher, nil}, {lower, nil}]}))#{range
                                                                              =>
                                                                              'Elixir.Range':new(_lower@1,
                                                                                                 _higher@1)}.

term() ->
    nil,
    _super_result@1 = 'term (overridable 1)'(),
    case case case erlang:is_map(_super_result@1) of
                  false ->
                      {error,
                       {#{'__struct__' => 'Elixir.TypeCheck.Builtin.FixedMap',
                          keypairs =>
                              [{'__struct__',
                                #{'__struct__' =>
                                      'Elixir.TypeCheck.Builtin.Literal',
                                  value => 'Elixir.TypeCheck.Builtin.Any'}}]},
                        not_a_map,
                        #{},
                        _super_result@1}};
                  true -> {ok, []}
              end
             of
             {ok, []} ->
                 case begin
                          _@2 = maps:keys(_super_result@1),
                          case ['__struct__'] -- _@2 of
                              [] -> {ok, []};
                              _@3 ->
                                  {error,
                                   {#{'__struct__' =>
                                          'Elixir.TypeCheck.Builtin.FixedMap',
                                      keypairs =>
                                          [{'__struct__',
                                            #{'__struct__' =>
                                                  'Elixir.TypeCheck.Builtin.Literal',
                                              value =>
                                                  'Elixir.TypeCheck.Builtin.Any'}}]},
                                    missing_keys,
                                    #{keys => _@3},
                                    _super_result@1}}
                          end
                      end
                     of
                     {ok, []} ->
                         case begin
                                  _@4 = [],
                                  case {case maps:get('__struct__',
                                                      _super_result@1)
                                            of
                                            _@9
                                                when _@9 =:=
                                                         'Elixir.TypeCheck.Builtin.Any' ->
                                                {ok, []};
                                            _ ->
                                                {error,
                                                 {#{'__struct__' =>
                                                        'Elixir.TypeCheck.Builtin.Literal',
                                                    value =>
                                                        'Elixir.TypeCheck.Builtin.Any'},
                                                  not_same_value,
                                                  #{},
                                                  maps:get('__struct__',
                                                           _super_result@1)}}
                                        end,
                                        '__struct__'}
                                      of
                                      {{ok, _@10}, _@11} ->
                                          _@12 = _@10 ++ _@4,
                                          {ok, _@12};
                                      _@5 ->
                                          case _@5 of
                                              {{error, _@7}, _@8} ->
                                                  {error,
                                                   {#{'__struct__' =>
                                                          'Elixir.TypeCheck.Builtin.FixedMap',
                                                      keypairs =>
                                                          [{'__struct__',
                                                            #{'__struct__' =>
                                                                  'Elixir.TypeCheck.Builtin.Literal',
                                                              value =>
                                                                  'Elixir.TypeCheck.Builtin.Any'}}]},
                                                    value_error,
                                                    #{problem => _@7,
                                                      key => _@8},
                                                    _super_result@1}};
                                              _@6 ->
                                                  erlang:error({with_clause,
                                                                _@6})
                                          end
                                  end
                              end
                             of
                             {ok, _@13} -> {ok, _@13};
                             _@1 -> _@1
                         end;
                     _@1 -> _@1
                 end;
             _@1 -> _@1
         end
        of
        {ok, _@14} -> nil;
        {error, _@15} ->
            erlang:error('Elixir.TypeCheck.TypeError':exception({'__type_check_spec_for_term/0__'(),
                                                                 return_error,
                                                                 #{problem =>
                                                                       _@15,
                                                                   arguments =>
                                                                       []},
                                                                 _super_result@1}))
    end,
    _super_result@1.

'term (overridable 1)'() ->
    'Elixir.TypeCheck.Builtin':any().

tuple() ->
    'Elixir.Macro':'struct!'('Elixir.TypeCheck.Builtin.Tuple',
                             #{'__struct__' => 'Elixir.Macro.Env',
                               aliases => [], context => nil,
                               context_modules => ['Elixir.TypeCheck.Builtin'],
                               contextual_vars => [],
                               current_vars => {#{}, #{}},
                               file =>
                                   <<"/run/media/qqwy/Serendipity/Programming/Perso"
                                     "nal/elixir/type_check/lib/type_check/builtin."
                                     "ex">>,
                               function => {tuple, 0},
                               functions =>
                                   [{'Elixir.TypeCheck.Builtin',
                                     [{any, 0},
                                      {arity, 0},
                                      {as_boolean, 1},
                                      {atom, 0},
                                      {binary, 0},
                                      {bitstring, 0},
                                      {boolean, 0},
                                      {byte, 0},
                                      {char, 0},
                                      {charlist, 0},
                                      {fixed_list, 1},
                                      {fixed_map, 1},
                                      {fixed_tuple, 1},
                                      {float, 0},
                                      {'fun', 0},
                                      {function, 0},
                                      {guarded_by, 2},
                                      {integer, 0},
                                      {keyword, 0},
                                      {keyword, 1},
                                      {lazy_explicit, 3},
                                      {list, 0},
                                      {list, 1},
                                      {literal, 1},
                                      {map, 0},
                                      {map, 2},
                                      {mfa, 0},
                                      {module, 0},
                                      {named_type, 2},
                                      {neg_integer, 0},
                                      {no_return, 0},
                                      {non_neg_integer, 0},
                                      {none, 0},
                                      {number, 0},
                                      {one_of, 1},
                                      {one_of, 2},
                                      {pos_integer, 0},
                                      {range, 1},
                                      {range, 2},
                                      {term, 0},
                                      {tuple, 0},
                                      {tuple, 1}]},
                                    {'Elixir.Kernel',
                                     [{'!=', 2},
                                      {'!==', 2},
                                      {'*', 2},
                                      {'+', 1},
                                      {'+', 2},
                                      {'++', 2},
                                      {'-', 1},
                                      {'-', 2},
                                      {'--', 2},
                                      {'/', 2},
                                      {'<', 2},
                                      {'<=', 2},
                                      {'==', 2},
                                      {'===', 2},
                                      {'=~', 2},
                                      {'>', 2},
                                      {'>=', 2},
                                      {abs, 1},
                                      {apply, 2},
                                      {apply, 3},
                                      {binary_part, 3},
                                      {bit_size, 1},
                                      {byte_size, 1},
                                      {ceil, 1},
                                      {'div', 2},
                                      {elem, 2},
                                      {exit, 1},
                                      {floor, 1},
                                      {'function_exported?', 3},
                                      {get_and_update_in, 3},
                                      {get_in, 2},
                                      {hd, 1},
                                      {inspect, 1},
                                      {inspect, 2},
                                      {is_atom, 1},
                                      {is_binary, 1},
                                      {is_bitstring, 1},
                                      {is_boolean, 1},
                                      {is_float, 1},
                                      {is_function, 1},
                                      {is_function, 2},
                                      {is_integer, 1},
                                      {is_list, 1},
                                      {is_map, 1},
                                      {is_map_key, 2},
                                      {is_number, 1},
                                      {is_pid, 1},
                                      {is_port, 1},
                                      {is_reference, 1},
                                      {is_tuple, 1},
                                      {length, 1},
                                      {'macro_exported?', 3},
                                      {make_ref, 0},
                                      {map_size, 1},
                                      {max, 2},
                                      {min, 2},
                                      {node, 0},
                                      {node, 1},
                                      {'not', 1},
                                      {pop_in, 2},
                                      {put_elem, 3},
                                      {put_in, 3},
                                      {'rem', 2},
                                      {round, 1},
                                      {self, 0},
                                      {send, 2},
                                      {spawn, 1},
                                      {spawn, 3},
                                      {spawn_link, 1},
                                      {spawn_link, 3},
                                      {spawn_monitor, 1},
                                      {spawn_monitor, 3},
                                      {struct, 1},
                                      {struct, 2},
                                      {'struct!', 1},
                                      {'struct!', 2},
                                      {throw, 1},
                                      {tl, 1},
                                      {trunc, 1},
                                      {tuple_size, 1},
                                      {update_in, 3}]}],
                               lexical_tracker => nil, line => 381,
                               macro_aliases => [],
                               macros =>
                                   [{'Elixir.TypeCheck.Builtin', [{lazy, 1}]},
                                    {'Elixir.TypeCheck.Macros',
                                     [{'@', 1},
                                      {'opaque!', 1},
                                      {'spec!', 1},
                                      {'type!', 1},
                                      {'typep!', 1}]},
                                    {'Elixir.Kernel',
                                     [{'!', 1},
                                      {'&&', 2},
                                      {'..', 2},
                                      {'<>', 2},
                                      {'alias!', 1},
                                      {'and', 2},
                                      {binding, 0},
                                      {binding, 1},
                                      {def, 1},
                                      {def, 2},
                                      {defdelegate, 2},
                                      {defexception, 1},
                                      {defguard, 1},
                                      {defguardp, 1},
                                      {defimpl, 2},
                                      {defimpl, 3},
                                      {defmacro, 1},
                                      {defmacro, 2},
                                      {defmacrop, 1},
                                      {defmacrop, 2},
                                      {defmodule, 2},
                                      {defoverridable, 1},
                                      {defp, 1},
                                      {defp, 2},
                                      {defprotocol, 2},
                                      {defstruct, 1},
                                      {destructure, 2},
                                      {get_and_update_in, 2},
                                      {'if', 2},
                                      {in, 2},
                                      {is_nil, 1},
                                      {is_struct, 1},
                                      {'match?', 2},
                                      {'or', 2},
                                      {pop_in, 1},
                                      {put_in, 2},
                                      {raise, 1},
                                      {raise, 2},
                                      {reraise, 2},
                                      {reraise, 3},
                                      {sigil_C, 2},
                                      {sigil_D, 2},
                                      {sigil_N, 2},
                                      {sigil_R, 2},
                                      {sigil_S, 2},
                                      {sigil_T, 2},
                                      {sigil_U, 2},
                                      {sigil_W, 2},
                                      {sigil_c, 2},
                                      {sigil_r, 2},
                                      {sigil_s, 2},
                                      {sigil_w, 2},
                                      {to_char_list, 1},
                                      {to_charlist, 1},
                                      {to_string, 1},
                                      {unless, 2},
                                      {update_in, 2},
                                      {use, 1},
                                      {use, 2},
                                      {'var!', 1},
                                      {'var!', 2},
                                      {'|>', 2},
                                      {'||', 2}]},
                                    {'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                     [{'if_recompiling?', 1}, {recompile, 2}]}],
                               module => 'Elixir.TypeCheck.Builtin',
                               prematch_vars => warn,
                               requires =>
                                   ['Elixir.Application',
                                    'Elixir.Kernel',
                                    'Elixir.Kernel.Typespec',
                                    'Elixir.TypeCheck',
                                    'Elixir.TypeCheck.Builtin',
                                    'Elixir.TypeCheck.Internals.Bootstrap.Macros',
                                    'Elixir.TypeCheck.Internals.ToTypespec',
                                    'Elixir.TypeCheck.Macros'],
                               tracers => [elixir_lexical],
                               unused_vars => {#{}, 0}, vars => []}).

tuple(0) -> 'Elixir.TypeCheck.Builtin':fixed_tuple([]);
tuple(_size@1)
    when erlang:is_integer(_size@1) andalso _size@1 > 0 ->
    _elems@1 = 'Elixir.Enum':map('Elixir.Range':new(1,
                                                    _size@1),
                                 fun (_) -> 'Elixir.TypeCheck.Builtin':any()
                                 end),
    'Elixir.TypeCheck.Builtin':fixed_tuple(_elems@1).

-file("lib/type_check/spec.ex", 34).

'__type_check_spec_for_any/0__'() ->
    #{name => any, param_types => [],
      return_type =>
          #{'__struct__' => 'Elixir.TypeCheck.Builtin.FixedMap',
            keypairs =>
                [{'__struct__',
                  #{'__struct__' => 'Elixir.TypeCheck.Builtin.Literal',
                    value => 'Elixir.TypeCheck.Builtin.Any'}}]},
      '__struct__' => 'Elixir.TypeCheck.Spec'}.

-file("lib/type_check/spec.ex", 34).

'__type_check_spec_for_as_boolean/1__'() ->
    #{name => as_boolean,
      param_types =>
          [#{'__struct__' => 'Elixir.TypeCheck.Builtin.NamedType',
             name => t,
             type =>
                 #{'__struct__' => 'Elixir.TypeCheck.Builtin.Guarded',
                   guard =>
                       {{'.',
                         [{line, 18}],
                         [{'__aliases__',
                           [{counter, {'Elixir.TypeCheck.Type', 11}},
                            {line, 18}],
                           ['TypeCheck', 'Type']},
                          'is_type?']},
                        [{line, 18}],
                        [{x, [{line, 18}], nil}]},
                   type =>
                       #{'__struct__' => 'Elixir.TypeCheck.Builtin.NamedType',
                         name => x,
                         type =>
                             #{'__struct__' =>
                                   'Elixir.TypeCheck.Builtin.Any'}}}}],
      return_type =>
          #{'__struct__' => 'Elixir.TypeCheck.Builtin.Guarded',
            guard =>
                {{'.',
                  [{line, 18}],
                  [{'__aliases__',
                    [{counter, {'Elixir.TypeCheck.Type', 11}}, {line, 18}],
                    ['TypeCheck', 'Type']},
                   'is_type?']},
                 [{line, 18}],
                 [{x, [{line, 18}], nil}]},
            type =>
                #{'__struct__' => 'Elixir.TypeCheck.Builtin.NamedType',
                  name => x,
                  type =>
                      #{'__struct__' => 'Elixir.TypeCheck.Builtin.Any'}}},
      '__struct__' => 'Elixir.TypeCheck.Spec'}.

-file("lib/type_check/spec.ex", 34).

'__type_check_spec_for_atom/0__'() ->
    #{name => atom, param_types => [],
      return_type =>
          #{'__struct__' => 'Elixir.TypeCheck.Builtin.FixedMap',
            keypairs =>
                [{'__struct__',
                  #{'__struct__' => 'Elixir.TypeCheck.Builtin.Literal',
                    value => 'Elixir.TypeCheck.Builtin.Atom'}}]},
      '__struct__' => 'Elixir.TypeCheck.Spec'}.

-file("lib/type_check/spec.ex", 34).

'__type_check_spec_for_module/0__'() ->
    #{name => module, param_types => [],
      return_type =>
          #{'__struct__' => 'Elixir.TypeCheck.Builtin.FixedMap',
            keypairs =>
                [{'__struct__',
                  #{'__struct__' => 'Elixir.TypeCheck.Builtin.Literal',
                    value => 'Elixir.TypeCheck.Builtin.Atom'}}]},
      '__struct__' => 'Elixir.TypeCheck.Spec'}.

-file("lib/type_check/spec.ex", 34).

'__type_check_spec_for_term/0__'() ->
    #{name => term, param_types => [],
      return_type =>
          #{'__struct__' => 'Elixir.TypeCheck.Builtin.FixedMap',
            keypairs =>
                [{'__struct__',
                  #{'__struct__' => 'Elixir.TypeCheck.Builtin.Literal',
                    value => 'Elixir.TypeCheck.Builtin.Any'}}]},
      '__struct__' => 'Elixir.TypeCheck.Spec'}.