module 'Elixir.DebugExample' ['__TypeCheck spec for \'stringify/1\'__'/0,
			      '__info__'/1,
			      'module_info'/0,
			      'module_info'/1,
			      'stringify'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[108|[105|[98|[47|[100|[101|[98|[117|[103|[95|[101|[120|[97|[109|[112|[108|[101|[46|[101|[120]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 1
		'compile' =
		    %% Line 1
		    ['no_auto_import'|['inline'|[{'inline_size',100}|[{'inline_size',1080}]]]],
		%% Line 1
		'spec' =
		    %% Line 1
		    [{{'stringify',1},[{'type',1,'fun',[{'type',1,'product',[{'type',7,'integer',[]}]}|[{'type',7,'binary',[]}]]}]}],
		%% Line 1
		'spec' =
		    %% Line 1
		    [{{'__info__',1},[{'type',1,'fun',[{'type',1,'product',[{'type',1,'union',[{'atom',1,'attributes'}|[{'atom',1,'compile'}|[{'atom',1,'functions'}|[{'atom',1,'macros'}|[{'atom',1,'md5'}|[{'atom',1,'exports_md5'}|[{'atom',1,'module'}|[{'atom',1,'deprecated'}]]]]]]]]}]}|[{'type',1,'any',[]}]]}]}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[108|[105|[98|[47|[116|[121|[112|[101|[95|[99|[104|[101|[99|[107|[47|[115|[112|[101|[99|[46|[101|[120]]]]]]]]]]]]]]]]]]]]]],97}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[108|[105|[98|[47|[116|[121|[112|[101|[95|[99|[104|[101|[99|[107|[47|[115|[112|[101|[99|[46|[101|[120]]]]]]]]]]]]]]]]]]]]]],117}]]
'__info__'/1 =
    ( fun (_0) ->
	  ( case _0 of
	      <'module'> when 'true' ->
		  'Elixir.DebugExample'
	      <'functions'> when 'true' ->
		  [{'__TypeCheck spec for \'stringify/1\'__',0}|[{'stringify',1}]]
	      <'macros'> when 'true' ->
		  []
	      <'exports_md5'> when 'true' ->
		  #{#<22>(8,1,'integer',['unsigned'|['big']]),
		    #<189>(8,1,'integer',['unsigned'|['big']]),
		    #<2>(8,1,'integer',['unsigned'|['big']]),
		    #<137>(8,1,'integer',['unsigned'|['big']]),
		    #<254>(8,1,'integer',['unsigned'|['big']]),
		    #<140>(8,1,'integer',['unsigned'|['big']]),
		    #<158>(8,1,'integer',['unsigned'|['big']]),
		    #<156>(8,1,'integer',['unsigned'|['big']]),
		    #<160>(8,1,'integer',['unsigned'|['big']]),
		    #<69>(8,1,'integer',['unsigned'|['big']]),
		    #<227>(8,1,'integer',['unsigned'|['big']]),
		    #<68>(8,1,'integer',['unsigned'|['big']]),
		    #<26>(8,1,'integer',['unsigned'|['big']]),
		    #<226>(8,1,'integer',['unsigned'|['big']]),
		    #<64>(8,1,'integer',['unsigned'|['big']]),
		    #<110>(8,1,'integer',['unsigned'|['big']])}#
	      <Key = 'attributes'> when 'true' ->
		  call 'erlang':'get_module_info'
		      ('Elixir.DebugExample', _0)
	      <Key = 'compile'> when 'true' ->
		  call 'erlang':'get_module_info'
		      ('Elixir.DebugExample', _0)
	      <Key = 'md5'> when 'true' ->
		  call 'erlang':'get_module_info'
		      ('Elixir.DebugExample', _0)
	      <'deprecated'> when 'true' ->
		  []
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'function_clause',_0})
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'__info__',1}}] )
      -| [{'function',{'__info__',1}}] )
'__TypeCheck spec for \'stringify/1\'__'/0 =
    %% Line 1
    ( fun () ->
	  %% Line 99
	  ( ~{'__struct__'=>'Elixir.TypeCheck.Spec','name'=>'stringify','param_types'=>[~{'__struct__'=>'Elixir.TypeCheck.Builtin.Integer'}~],'return_type'=>~{'__struct__'=>'Elixir.TypeCheck.Builtin.Binary'}~}~
	    -| ['compiler_generated'] )
      -| [{'function',{'__TypeCheck spec for \'stringify/1\'__',0}},'compiler_generated'] )
'stringify'/1 =
    %% Line 1
    ( fun (_0) ->
	  let <_2> =
	      case _0 of
		%% Line 12
		( <_X_@7>
		      when ( call 'erlang':( 'is_integer'
					  -| ['compiler_generated'] )
			      (_0)
			  -| ['compiler_generated'] ) ->
		      {'ok',[]}
		  -| ['compiler_generated'] )
		%% Line 15
		( <_16> when 'true' ->
		      %% Line 16
		      ( {'error',( {~{'__struct__'=>'Elixir.TypeCheck.Builtin.Integer'}~,'no_match',( ~{}~
												      -| ['compiler_generated'] ),_0}
				   -| ['compiler_generated'] )}
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  in  do  %% Line 169
		  ( case _2 of
		      ( <( {( 'ok'
			      -| ['compiler_generated'] ),_X_@8}
			   -| ['compiler_generated'] )> when 'true' ->
			    'ok'
			-| ['compiler_generated'] )
		      ( <_18> when 'true' ->
			    ( case _2 of
				( <( {( 'error'
					-| ['compiler_generated'] ),_X_@4}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_4> =
					  call 'Elixir.DebugExample':( '__TypeCheck spec for \'stringify/1\'__'
								       -| ['compiler_generated'] )
					      ()
				      in  let <_3> =
					      ~{( 'problem'=>_X_@4
						 -| ['compiler_generated'] )|( ~{'index'=>0}~
						 -| ['compiler_generated'] )}~
					  in  let <_5> =
						  call 'Elixir.TypeCheck.TypeError':'exception'
						      (( {( {_4,'param_error',_3,[_0|[]]}
							    -| ['compiler_generated'] ),[{'file',#{#<47>(8,1,'integer',['unsigned'|['big']]),
												   #<114>(8,1,'integer',['unsigned'|['big']]),
												   #<117>(8,1,'integer',['unsigned'|['big']]),
												   #<110>(8,1,'integer',['unsigned'|['big']]),
												   #<47>(8,1,'integer',['unsigned'|['big']]),
												   #<109>(8,1,'integer',['unsigned'|['big']]),
												   #<101>(8,1,'integer',['unsigned'|['big']]),
												   #<100>(8,1,'integer',['unsigned'|['big']]),
												   #<105>(8,1,'integer',['unsigned'|['big']]),
												   #<97>(8,1,'integer',['unsigned'|['big']]),
												   #<47>(8,1,'integer',['unsigned'|['big']]),
												   #<113>(8,1,'integer',['unsigned'|['big']]),
												   #<113>(8,1,'integer',['unsigned'|['big']]),
												   #<119>(8,1,'integer',['unsigned'|['big']]),
												   #<121>(8,1,'integer',['unsigned'|['big']]),
												   #<47>(8,1,'integer',['unsigned'|['big']]),
												   #<83>(8,1,'integer',['unsigned'|['big']]),
												   #<101>(8,1,'integer',['unsigned'|['big']]),
												   #<114>(8,1,'integer',['unsigned'|['big']]),
												   #<101>(8,1,'integer',['unsigned'|['big']]),
												   #<110>(8,1,'integer',['unsigned'|['big']]),
												   #<100>(8,1,'integer',['unsigned'|['big']]),
												   #<105>(8,1,'integer',['unsigned'|['big']]),
												   #<112>(8,1,'integer',['unsigned'|['big']]),
												   #<105>(8,1,'integer',['unsigned'|['big']]),
												   #<116>(8,1,'integer',['unsigned'|['big']]),
												   #<121>(8,1,'integer',['unsigned'|['big']]),
												   #<47>(8,1,'integer',['unsigned'|['big']]),
												   #<80>(8,1,'integer',['unsigned'|['big']]),
												   #<114>(8,1,'integer',['unsigned'|['big']]),
												   #<111>(8,1,'integer',['unsigned'|['big']]),
												   #<103>(8,1,'integer',['unsigned'|['big']]),
												   #<114>(8,1,'integer',['unsigned'|['big']]),
												   #<97>(8,1,'integer',['unsigned'|['big']]),
												   #<109>(8,1,'integer',['unsigned'|['big']]),
												   #<109>(8,1,'integer',['unsigned'|['big']]),
												   #<105>(8,1,'integer',['unsigned'|['big']]),
												   #<110>(8,1,'integer',['unsigned'|['big']]),
												   #<103>(8,1,'integer',['unsigned'|['big']]),
												   #<47>(8,1,'integer',['unsigned'|['big']]),
												   #<80>(8,1,'integer',['unsigned'|['big']]),
												   #<101>(8,1,'integer',['unsigned'|['big']]),
												   #<114>(8,1,'integer',['unsigned'|['big']]),
												   #<115>(8,1,'integer',['unsigned'|['big']]),
												   #<111>(8,1,'integer',['unsigned'|['big']]),
												   #<110>(8,1,'integer',['unsigned'|['big']]),
												   #<97>(8,1,'integer',['unsigned'|['big']]),
												   #<108>(8,1,'integer',['unsigned'|['big']]),
												   #<47>(8,1,'integer',['unsigned'|['big']]),
												   #<101>(8,1,'integer',['unsigned'|['big']]),
												   #<108>(8,1,'integer',['unsigned'|['big']]),
												   #<105>(8,1,'integer',['unsigned'|['big']]),
												   #<120>(8,1,'integer',['unsigned'|['big']]),
												   #<105>(8,1,'integer',['unsigned'|['big']]),
												   #<114>(8,1,'integer',['unsigned'|['big']]),
												   #<47>(8,1,'integer',['unsigned'|['big']]),
												   #<116>(8,1,'integer',['unsigned'|['big']]),
												   #<121>(8,1,'integer',['unsigned'|['big']]),
												   #<112>(8,1,'integer',['unsigned'|['big']]),
												   #<101>(8,1,'integer',['unsigned'|['big']]),
												   #<95>(8,1,'integer',['unsigned'|['big']]),
												   #<99>(8,1,'integer',['unsigned'|['big']]),
												   #<104>(8,1,'integer',['unsigned'|['big']]),
												   #<101>(8,1,'integer',['unsigned'|['big']]),
												   #<99>(8,1,'integer',['unsigned'|['big']]),
												   #<107>(8,1,'integer',['unsigned'|['big']]),
												   #<47>(8,1,'integer',['unsigned'|['big']]),
												   #<108>(8,1,'integer',['unsigned'|['big']]),
												   #<105>(8,1,'integer',['unsigned'|['big']]),
												   #<98>(8,1,'integer',['unsigned'|['big']]),
												   #<47>(8,1,'integer',['unsigned'|['big']]),
												   #<100>(8,1,'integer',['unsigned'|['big']]),
												   #<101>(8,1,'integer',['unsigned'|['big']]),
												   #<98>(8,1,'integer',['unsigned'|['big']]),
												   #<117>(8,1,'integer',['unsigned'|['big']]),
												   #<103>(8,1,'integer',['unsigned'|['big']]),
												   #<95>(8,1,'integer',['unsigned'|['big']]),
												   #<101>(8,1,'integer',['unsigned'|['big']]),
												   #<120>(8,1,'integer',['unsigned'|['big']]),
												   #<97>(8,1,'integer',['unsigned'|['big']]),
												   #<109>(8,1,'integer',['unsigned'|['big']]),
												   #<112>(8,1,'integer',['unsigned'|['big']]),
												   #<108>(8,1,'integer',['unsigned'|['big']]),
												   #<101>(8,1,'integer',['unsigned'|['big']]),
												   #<46>(8,1,'integer',['unsigned'|['big']]),
												   #<101>(8,1,'integer',['unsigned'|['big']]),
												   #<120>(8,1,'integer',['unsigned'|['big']])}#}|[{'line',1}]]}
							 -| ['compiler_generated'] ))
					      in  call 'erlang':'error'
						      (_5)
				  -| ['compiler_generated'] )
				( <_24> when 'true' ->
				      let <_X_@3> = {_2,( 0
						-| ['compiler_generated'] ),( ~{'__struct__'=>'Elixir.TypeCheck.Builtin.Integer'}~
									      -| ['compiler_generated'] )}
				      in  ( call 'erlang':( 'error'
							    -| ['compiler_generated'] )
						(( {'with_clause',_X_@3}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
		  let <_X_super_result@1> =
		      case _0 of
			%% Line 9
			( <_X_@1>
			      when ( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'is_binary'
								       -| ['compiler_generated'] )
				      (_0)
				  -| ['compiler_generated'] ) ->
			      _0
			  -| ['compiler_generated'] )
			%% Line 9
			( <_X_@1> when 'true' ->
			      ( call ( 'Elixir.String.Chars'
				       -| ['compiler_generated'] ):( 'to_string'
								     -| ['compiler_generated'] )
				    (_0)
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		  in  let <_10> =
			  case _X_super_result@1 of
			    %% Line 12
			    ( <_X_@11>
				  when ( call 'erlang':( 'is_binary'
						      -| ['compiler_generated'] )
					  (_X_super_result@1)
				      -| ['compiler_generated'] ) ->
				  {'ok',[]}
			      -| ['compiler_generated'] )
			    %% Line 15
			    ( <_17> when 'true' ->
				  %% Line 16
				  ( {'error',( {~{'__struct__'=>'Elixir.TypeCheck.Builtin.Binary'}~,'no_match',( ~{}~
														 -| ['compiler_generated'] ),_X_super_result@1}
					       -| ['compiler_generated'] )}
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      in  do  %% Line 179
			      ( case _10 of
				  %% Line 180
				  ( <( {'ok',_X_@12}
				       -| ['compiler_generated'] )> when 'true' ->
					'ok'
				    -| ['compiler_generated'] )
				  %% Line 183
				  ( <( {'error',_X_@13}
				       -| ['compiler_generated'] )> when 'true' ->
					let <_12> =
					    call 'Elixir.DebugExample':%% Line 185
								       ( '__TypeCheck spec for \'stringify/1\'__'
									 -| ['compiler_generated'] )
						()
					in  let <_11> =
						~{%% Line 186
						 ( 'problem'=>_X_@13
						   -| ['compiler_generated'] ),%% Line 186
									       ( 'arguments'=>[_0|[]]
										 -| ['compiler_generated'] )}~
					    in  let <_13> =
						    call 'Elixir.TypeCheck.TypeError':%% Line 184
										      'exception'
							(%% Line 185
							 ( {_12,'return_error',_11,_X_super_result@1}
							   -| ['compiler_generated'] ))
						in  %% Line 184
						    call 'erlang':'error'
							(_13)
				    -| ['compiler_generated'] )
				  ( <_14> when 'true' ->
					( primop 'match_fail'
					      ({'case_clause',_10})
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
			      _X_super_result@1
      -| [{'function',{'stringify',1}},'compiler_generated'] )
'module_info'/0 =
    ( fun () ->
	  call 'erlang':'get_module_info'
	      ('Elixir.DebugExample')
      -| [{'function',{'module_info',0}}] )
'module_info'/1 =
    ( fun (_0) ->
	  call 'erlang':'get_module_info'
	      ('Elixir.DebugExample', _0)
      -| [{'function',{'module_info',1}}] )
end