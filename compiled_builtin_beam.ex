{:beam_file, TypeCheck.Builtin,
 [
   {:"MACRO-lazy", 2, 104},
   {:__info__, 1, 2},
   {:"__type_check_spec_for_any/0__", 0, 199},
   {:"__type_check_spec_for_as_boolean/1__", 0, 201},
   {:"__type_check_spec_for_atom/0__", 0, 203},
   {:"__type_check_spec_for_module/0__", 0, 205},
   {:"__type_check_spec_for_term/0__", 0, 207},
   {:any, 0, 9},
   {:arity, 0, 22},
   {:as_boolean, 1, 24},
   {:atom, 0, 40},
   {:binary, 0, 53},
   {:bitstring, 0, 55},
   {:boolean, 0, 57},
   {:byte, 0, 59},
   {:char, 0, 61},
   {:charlist, 0, 63},
   {:fixed_list, 1, 73},
   {:fixed_map, 1, 77},
   {:fixed_tuple, 1, 85},
   {:float, 0, 90},
   {:fun, 0, 92},
   {:function, 0, 94},
   {:guarded_by, 2, 96},
   {:integer, 0, 98},
   {:keyword, 0, 100},
   {:keyword, 1, 102},
   {:lazy_explicit, 3, 112},
   {:list, 0, 115},
   {:list, 1, 117},
   {:literal, 1, 120},
   {:map, 0, 123},
   {:map, 2, 126},
   {:mfa, 0, 129},
   {:module, 0, 131},
   {:module_info, 0, 209},
   {:module_info, 1, 211},
   {:named_type, 2, 144},
   {:neg_integer, 0, 147},
   {:no_return, 0, 149},
   {:non_neg_integer, 0, 151},
   {:none, 0, 153},
   {:number, 0, 155},
   {:one_of, 1, 157},
   {:one_of, 2, 161},
   {:pos_integer, 0, 170},
   {:range, 1, 172},
   {:range, 2, 177},
   {:term, 0, 181},
   {:tuple, 0, 194},
   {:tuple, 1, 196}
 ], [vsn: [183926675908194993648330921846304895374]],
 [
   version: '7.6',
   options: [
     :dialyzer,
     :no_spawn_compiler_process,
     :from_core,
     :no_core_prepare,
     :no_auto_import,
     {:inline_size, 1080}
   ],
   source: '/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex'
 ],
 [
   {:function, :__info__, 1, 2,
    [
      {:label, 1},
      {:line, 0},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :__info__}, 1},
      {:label, 2},
      {:select_val, {:x, 0}, {:f, 1},
       {:list,
        [
          atom: :attributes,
          f: 7,
          atom: :compile,
          f: 7,
          atom: :deprecated,
          f: 6,
          atom: :functions,
          f: 5,
          atom: :macros,
          f: 4,
          atom: :md5,
          f: 7,
          atom: :module,
          f: 3
        ]}},
      {:label, 3},
      {:move, {:atom, TypeCheck.Builtin}, {:x, 0}},
      :return,
      {:label, 4},
      {:move, {:literal, [lazy: 1]}, {:x, 0}},
      :return,
      {:label, 5},
      {:move,
       {:literal,
        [
          "__type_check_spec_for_any/0__": 0,
          "__type_check_spec_for_as_boolean/1__": 0,
          "__type_check_spec_for_atom/0__": 0,
          "__type_check_spec_for_module/0__": 0,
          "__type_check_spec_for_term/0__": 0,
          any: 0,
          arity: 0,
          as_boolean: 1,
          atom: 0,
          binary: 0,
          bitstring: 0,
          boolean: 0,
          byte: 0,
          char: 0,
          charlist: 0,
          fixed_list: 1,
          fixed_map: 1,
          fixed_tuple: 1,
          float: 0,
          fun: 0,
          function: 0,
          guarded_by: 2,
          integer: 0,
          keyword: 0,
          keyword: 1,
          lazy_explicit: 3,
          list: 0,
          list: 1,
          literal: 1,
          map: 0,
          map: 2,
          mfa: 0,
          module: 0,
          named_type: 2,
          neg_integer: 0,
          no_return: 0,
          non_neg_integer: 0,
          none: 0,
          number: 0,
          one_of: 1,
          one_of: 2,
          pos_integer: 0,
          range: 1,
          range: 2,
          term: 0,
          tuple: 0,
          tuple: 1
        ]}, {:x, 0}},
      :return,
      {:label, 6},
      {:move, nil, {:x, 0}},
      :return,
      {:label, 7},
      {:move, {:x, 0}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin}, {:x, 0}},
      {:line, 0},
      {:call_ext_only, 2, {:extfunc, :erlang, :get_module_info, 2}}
    ]},
   {:function, :any, 0, 9,
    [
      {:line, 1},
      {:label, 8},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :any}, 0},
      {:label, 9},
      {:allocate_zero, 2, 0},
      {:line, 1},
      {:call, 0, {TypeCheck.Builtin, :"any (overridable 1)", 0}},
      {:move, {:x, 0}, {:y, 1}},
      {:test, :is_map, {:f, 16}, [x: 0]},
      {:line, 2},
      {:call_ext, 1, {:extfunc, :maps, :keys, 1}},
      {:move, {:x, 0}, {:x, 1}},
      {:move, {:literal, [:__struct__]}, {:x, 0}},
      {:line, 2},
      {:call_ext, 2, {:extfunc, :erlang, :--, 2}},
      {:test, :is_nil, {:f, 15}, [x: 0]},
      {:line, 2},
      {:bif, :map_get, {:f, 0}, [atom: :__struct__, y: 1], {:x, 0}},
      {:test, :is_eq_exact, {:f, 10}, [x: 0, atom: TypeCheck.Builtin.Any]},
      {:move, {:literal, {:ok, []}}, {:x, 0}},
      {:jump, {:f, 11}},
      {:label, 10},
      {:test_heap, 8, 1},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type< TypeCheck.Builtin.Any >,
          atom: :not_same_value,
          literal: %{},
          x: 0
        ]}},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 0]}},
      {:label, 11},
      {:test, :is_tagged_tuple, {:f, 12}, [{:x, 0}, 2, {:atom, :ok}]},
      {:move, nil, {:x, 1}},
      {:move, {:atom, :ok}, {:x, 0}},
      {:jump, {:f, 13}},
      {:label, 12},
      {:get_tuple_element, {:x, 0}, 1, {:x, 0}},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 0}, 1,
       {:list, [atom: :key, atom: :__struct__, atom: :problem, x: 0]}},
      {:test_heap, 5, 1},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type< #TypeCheck.Type< any() > >,
          atom: :value_error,
          x: 0,
          y: 1
        ]}},
      {:move, {:x, 0}, {:x, 1}},
      {:move, {:atom, :error}, {:x, 0}},
      {:label, 13},
      {:test, :is_eq_exact, {:f, 14}, [x: 0, atom: :ok]},
      {:test_heap, 3, 2},
      {:put_tuple2, {:x, 0}, {:list, [atom: :ok, x: 1]}},
      {:jump, {:f, 17}},
      {:label, 14},
      {:test_heap, 3, 2},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 1]}},
      {:jump, {:f, 17}},
      {:label, 15},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 0}, 1,
       {:list, [atom: :keys, x: 0]}},
      {:test_heap, 8, 1},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type< #TypeCheck.Type< any() > >,
          atom: :missing_keys,
          x: 0,
          y: 1
        ]}},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 0]}},
      {:jump, {:f, 17}},
      {:label, 16},
      {:test_heap, 8, 0},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type< #TypeCheck.Type< any() > >,
          atom: :not_a_map,
          literal: %{},
          y: 1
        ]}},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 0]}},
      {:label, 17},
      {:get_tuple_element, {:x, 0}, 0, {:x, 1}},
      {:get_tuple_element, {:x, 0}, 1, {:y, 0}},
      {:test, :is_eq_exact, {:f, 18}, [x: 1, atom: :ok]},
      {:move, {:y, 1}, {:x, 0}},
      {:deallocate, 2},
      :return,
      {:label, 18},
      {:line, 2},
      {:call, 0, {TypeCheck.Builtin, :"__type_check_spec_for_any/0__", 0}},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 1}, 1,
       {:list, [{:atom, :arguments}, nil, {:atom, :problem}, {:y, 0}]}},
      {:test_heap, 5, 2},
      {:put_tuple2, {:x, 0}, {:list, [x: 0, atom: :return_error, x: 1, y: 1]}},
      {:trim, 2, 0},
      {:line, 2},
      {:call_ext, 1, {:extfunc, TypeCheck.TypeError, :exception, 1}},
      {:line, 2},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 0}
    ]},
   {:function, :"any (overridable 1)", 0, 20,
    [
      {:line, 3},
      {:label, 19},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :"any (overridable 1)"},
       0},
      {:label, 20},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:any, 0},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 36,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.Any}, {:x, 0}},
      {:line, 4},
      {:call_ext_only, 2, {:extfunc, Macro, :struct!, 2}}
    ]},
   {:function, :arity, 0, 22,
    [
      {:line, 5},
      {:label, 21},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :arity}, 0},
      {:label, 22},
      {:move, {:literal, 0..255}, {:x, 0}},
      {:line, 6},
      {:call_ext_only, 1, {:extfunc, TypeCheck.Builtin, :range, 1}}
    ]},
   {:function, :as_boolean, 1, 24,
    [
      {:line, 7},
      {:label, 23},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :as_boolean}, 1},
      {:label, 24},
      {:allocate_heap_zero, 4, 5, 1},
      {:move, {:x, 0}, {:y, 3}},
      {:put_tuple2, {:x, 0}, {:list, [atom: :x, x: 0]}},
      {:put_list, {:x, 0}, nil, {:y, 2}},
      {:move, {:literal, %{}}, {:x, 1}},
      {:move, {:y, 2}, {:x, 0}},
      {:line, 2},
      {:call_ext, 2, {:extfunc, Enum, :into, 2}},
      {:move, {:x, 0}, {:y, 1}},
      {:test, :is_map, {:f, 36}, [x: 0]},
      {:get_map_elements, {:f, 36}, {:x, 0}, {:list, [atom: :x, x: 0]}},
      {:line, 8},
      {:call_ext, 1, {:extfunc, TypeCheck.Type, :is_type?, 1}},
      {:select_val, {:x, 0}, {:f, 26},
       {:list, [atom: false, f: 25, atom: nil, f: 25]}},
      {:label, 25},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 0}, 0,
       {:list, [atom: :bindings, y: 1]}},
      {:test_heap, 8, 1},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type<
          (x :: any() when TypeCheck.Type.is_type?(x))
          >,
          atom: :guard_failed,
          x: 0,
          y: 3
        ]}},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 0]}},
      {:jump, {:f, 27}},
      {:label, 26},
      {:test_heap, 3, 0},
      {:put_tuple2, {:x, 0}, {:list, [atom: :ok, y: 2]}},
      {:label, 27},
      {:get_tuple_element, {:x, 0}, 0, {:x, 1}},
      {:get_tuple_element, {:x, 0}, 1, {:x, 0}},
      {:test, :is_eq_exact, {:f, 28}, [x: 1, atom: :ok]},
      {:test_heap, 8, 1},
      {:put_tuple2, {:x, 1}, {:list, [atom: :t, y: 3]}},
      {:put_list, {:x, 1}, {:x, 0}, {:x, 0}},
      {:put_tuple2, {:x, 0}, {:list, [atom: :ok, x: 0]}},
      {:move, {:x, 0}, {:y, 2}},
      {:jump, {:f, 29}},
      {:label, 28},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 0}, 1,
       {:list, [atom: :problem, x: 0]}},
      {:test_heap, 8, 1},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type<
          t :: (x :: any() when TypeCheck.Type.is_type?(x))
          >,
          atom: :named_type,
          x: 0,
          y: 3
        ]}},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 0]}},
      {:move, {:x, 0}, {:y, 2}},
      {:label, 29},
      {:test, :is_tagged_tuple, {:f, 34}, [{:y, 2}, 2, {:atom, :ok}]},
      {:init, {:y, 1}},
      {:init, {:y, 2}},
      {:move, {:y, 3}, {:x, 0}},
      {:line, 7},
      {:call, 1, {TypeCheck.Builtin, :"as_boolean (overridable 1)", 1}},
      {:test_heap, 5, 1},
      {:put_tuple2, {:x, 1}, {:list, [atom: :x, x: 0]}},
      {:put_list, {:x, 1}, nil, {:y, 2}},
      {:move, {:x, 0}, {:y, 1}},
      {:move, {:y, 2}, {:x, 0}},
      {:move, {:literal, %{}}, {:x, 1}},
      {:line, 2},
      {:call_ext, 2, {:extfunc, Enum, :into, 2}},
      {:move, {:x, 0}, {:y, 0}},
      {:test, :is_map, {:f, 35}, [x: 0]},
      {:get_map_elements, {:f, 35}, {:x, 0}, {:list, [atom: :x, x: 0]}},
      {:line, 8},
      {:call_ext, 1, {:extfunc, TypeCheck.Type, :is_type?, 1}},
      {:select_val, {:x, 0}, {:f, 31},
       {:list, [atom: false, f: 30, atom: nil, f: 30]}},
      {:label, 30},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 0}, 0,
       {:list, [atom: :bindings, y: 0]}},
      {:test_heap, 8, 1},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type<
          (x :: any() when TypeCheck.Type.is_type?(x))
          >,
          atom: :guard_failed,
          x: 0,
          y: 1
        ]}},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 0]}},
      {:jump, {:f, 32}},
      {:label, 31},
      {:test_heap, 3, 0},
      {:put_tuple2, {:x, 0}, {:list, [atom: :ok, y: 2]}},
      {:label, 32},
      {:get_tuple_element, {:x, 0}, 0, {:x, 1}},
      {:get_tuple_element, {:x, 0}, 1, {:y, 2}},
      {:test, :is_eq_exact, {:f, 33}, [x: 1, atom: :ok]},
      {:move, {:y, 1}, {:x, 0}},
      {:deallocate, 4},
      :return,
      {:label, 33},
      {:trim, 1, 3},
      {:line, 2},
      {:call, 0,
       {TypeCheck.Builtin, :"__type_check_spec_for_as_boolean/1__", 0}},
      {:test_heap, 2, 1},
      {:put_list, {:y, 2}, nil, {:x, 1}},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 1}, 2,
       {:list, [atom: :arguments, x: 1, atom: :problem, y: 1]}},
      {:test_heap, 5, 2},
      {:put_tuple2, {:x, 0}, {:list, [x: 0, atom: :return_error, x: 1, y: 0]}},
      {:trim, 3, 0},
      {:line, 2},
      {:call_ext, 1, {:extfunc, TypeCheck.TypeError, :exception, 1}},
      {:line, 2},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 0},
      {:label, 34},
      {:trim, 2, 2},
      {:line, 2},
      {:call, 0,
       {TypeCheck.Builtin, :"__type_check_spec_for_as_boolean/1__", 0}},
      {:get_tuple_element, {:y, 0}, 1, {:x, 1}},
      {:put_map_assoc, {:f, 0}, {:literal, %{index: 0}}, {:x, 1}, 2,
       {:list, [atom: :problem, x: 1]}},
      {:test_heap, 10, 2},
      {:put_list, {:y, 1}, nil, {:x, 2}},
      {:put_tuple2, {:x, 0}, {:list, [x: 0, atom: :param_error, x: 1, x: 2]}},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          x: 0,
          literal: [
            file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
            line: 1
          ]
        ]}},
      {:trim, 2, 0},
      {:line, 2},
      {:call_ext, 1, {:extfunc, TypeCheck.TypeError, :exception, 1}},
      {:line, 2},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 0},
      {:label, 35},
      {:line, 2},
      {:badmatch, {:y, 0}},
      {:label, 36},
      {:line, 2},
      {:badmatch, {:y, 1}}
    ]},
   {:function, :"as_boolean (overridable 1)", 1, 38,
    [
      {:line, 9},
      {:label, 37},
      {:func_info, {:atom, TypeCheck.Builtin},
       {:atom, :"as_boolean (overridable 1)"}, 1},
      {:label, 38},
      :return
    ]},
   {:function, :atom, 0, 40,
    [
      {:line, 10},
      {:label, 39},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :atom}, 0},
      {:label, 40},
      {:allocate_zero, 2, 0},
      {:line, 10},
      {:call, 0, {TypeCheck.Builtin, :"atom (overridable 1)", 0}},
      {:move, {:x, 0}, {:y, 1}},
      {:test, :is_map, {:f, 47}, [x: 0]},
      {:line, 2},
      {:call_ext, 1, {:extfunc, :maps, :keys, 1}},
      {:move, {:x, 0}, {:x, 1}},
      {:move, {:literal, [:__struct__]}, {:x, 0}},
      {:line, 2},
      {:call_ext, 2, {:extfunc, :erlang, :--, 2}},
      {:test, :is_nil, {:f, 46}, [x: 0]},
      {:line, 2},
      {:bif, :map_get, {:f, 0}, [atom: :__struct__, y: 1], {:x, 0}},
      {:test, :is_eq_exact, {:f, 41}, [x: 0, atom: TypeCheck.Builtin.Atom]},
      {:move, {:literal, {:ok, []}}, {:x, 0}},
      {:jump, {:f, 42}},
      {:label, 41},
      {:test_heap, 8, 1},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type< TypeCheck.Builtin.Atom >,
          atom: :not_same_value,
          literal: %{},
          x: 0
        ]}},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 0]}},
      {:label, 42},
      {:test, :is_tagged_tuple, {:f, 43}, [{:x, 0}, 2, {:atom, :ok}]},
      {:move, nil, {:x, 1}},
      {:move, {:atom, :ok}, {:x, 0}},
      {:jump, {:f, 44}},
      {:label, 43},
      {:get_tuple_element, {:x, 0}, 1, {:x, 0}},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 0}, 1,
       {:list, [atom: :key, atom: :__struct__, atom: :problem, x: 0]}},
      {:test_heap, 5, 1},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type< #TypeCheck.Type< atom() > >,
          atom: :value_error,
          x: 0,
          y: 1
        ]}},
      {:move, {:x, 0}, {:x, 1}},
      {:move, {:atom, :error}, {:x, 0}},
      {:label, 44},
      {:test, :is_eq_exact, {:f, 45}, [x: 0, atom: :ok]},
      {:test_heap, 3, 2},
      {:put_tuple2, {:x, 0}, {:list, [atom: :ok, x: 1]}},
      {:jump, {:f, 48}},
      {:label, 45},
      {:test_heap, 3, 2},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 1]}},
      {:jump, {:f, 48}},
      {:label, 46},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 0}, 1,
       {:list, [atom: :keys, x: 0]}},
      {:test_heap, 8, 1},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type< #TypeCheck.Type< atom() > >,
          atom: :missing_keys,
          x: 0,
          y: 1
        ]}},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 0]}},
      {:jump, {:f, 48}},
      {:label, 47},
      {:test_heap, 8, 0},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type< #TypeCheck.Type< atom() > >,
          atom: :not_a_map,
          literal: %{},
          y: 1
        ]}},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 0]}},
      {:label, 48},
      {:get_tuple_element, {:x, 0}, 0, {:x, 1}},
      {:get_tuple_element, {:x, 0}, 1, {:y, 0}},
      {:test, :is_eq_exact, {:f, 49}, [x: 1, atom: :ok]},
      {:move, {:y, 1}, {:x, 0}},
      {:deallocate, 2},
      :return,
      {:label, 49},
      {:line, 2},
      {:call, 0, {TypeCheck.Builtin, :"__type_check_spec_for_atom/0__", 0}},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 1}, 1,
       {:list, [{:atom, :arguments}, nil, {:atom, :problem}, {:y, 0}]}},
      {:test_heap, 5, 2},
      {:put_tuple2, {:x, 0}, {:list, [x: 0, atom: :return_error, x: 1, y: 1]}},
      {:trim, 2, 0},
      {:line, 2},
      {:call_ext, 1, {:extfunc, TypeCheck.TypeError, :exception, 1}},
      {:line, 2},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 0}
    ]},
   {:function, :"atom (overridable 1)", 0, 51,
    [
      {:line, 11},
      {:label, 50},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :"atom (overridable 1)"},
       0},
      {:label, 51},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:atom, 0},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 63,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.Atom}, {:x, 0}},
      {:line, 12},
      {:call_ext_only, 2, {:extfunc, Macro, :struct!, 2}}
    ]},
   {:function, :binary, 0, 53,
    [
      {:line, 13},
      {:label, 52},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :binary}, 0},
      {:label, 53},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:binary, 0},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 110,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.Binary}, {:x, 0}},
      {:line, 14},
      {:call_ext_only, 2, {:extfunc, Macro, :struct!, 2}}
    ]},
   {:function, :bitstring, 0, 55,
    [
      {:line, 15},
      {:label, 54},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :bitstring}, 0},
      {:label, 55},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:bitstring, 0},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 120,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.Bitstring}, {:x, 0}},
      {:line, 16},
      {:call_ext_only, 2, {:extfunc, Macro, :struct!, 2}}
    ]},
   {:function, :boolean, 0, 57,
    [
      {:line, 17},
      {:label, 56},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :boolean}, 0},
      {:label, 57},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:boolean, 0},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 132,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.Boolean}, {:x, 0}},
      {:line, 18},
      {:call_ext_only, 2, {:extfunc, Macro, :struct!, 2}}
    ]},
   {:function, :byte, 0, 59,
    [
      {:line, 19},
      {:label, 58},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :byte}, 0},
      {:label, 59},
      {:move, {:literal, 0..255}, {:x, 0}},
      {:line, 20},
      {:call_ext_only, 1, {:extfunc, TypeCheck.Builtin, :range, 1}}
    ]},
   {:function, :char, 0, 61,
    [
      {:line, 21},
      {:label, 60},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :char}, 0},
      {:label, 61},
      {:move, {:literal, 0..1114111}, {:x, 0}},
      {:line, 22},
      {:call_ext_only, 1, {:extfunc, TypeCheck.Builtin, :range, 1}}
    ]},
   {:function, :charlist, 0, 63,
    [
      {:line, 23},
      {:label, 62},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :charlist}, 0},
      {:label, 63},
      {:allocate, 0, 0},
      {:line, 24},
      {:call_ext, 0, {:extfunc, TypeCheck.Builtin, :char, 0}},
      {:line, 24},
      {:call_ext_last, 1, {:extfunc, TypeCheck.Builtin, :list, 1}, 0}
    ]},
   {:function, :find_matching_module, 3, 65,
    [
      {:line, 25},
      {:label, 64},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :find_matching_module},
       3},
      {:label, 65},
      {:allocate, 4, 3},
      {:init, {:y, 0}},
      {:move, {:x, 2}, {:y, 1}},
      {:move, {:x, 1}, {:y, 2}},
      {:move, {:x, 0}, {:y, 3}},
      {:test, :is_map, {:f, 67}, [x: 0]},
      {:get_map_elements, {:f, 66}, {:x, 0}, {:list, [atom: :functions, x: 0]}},
      {:move, {:x, 0}, {:y, 0}},
      {:jump, {:f, 68}},
      {:label, 66},
      {:test_heap, 4, 0},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badkey, atom: :functions, y: 3]}},
      {:line, 26},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 4},
      {:label, 67},
      {:move, {:atom, :functions}, {:x, 1}},
      {:line, 26},
      {:apply, 0},
      {:move, {:x, 0}, {:y, 0}},
      {:label, 68},
      {:test, :is_map, {:f, 70}, [y: 3]},
      {:get_map_elements, {:f, 69}, {:y, 3}, {:list, [atom: :module, x: 0]}},
      {:move, {:x, 0}, {:y, 3}},
      {:jump, {:f, 71}},
      {:label, 69},
      {:test_heap, 4, 0},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badkey, atom: :module, y: 3]}},
      {:line, 26},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 4},
      {:label, 70},
      {:move, {:atom, :module}, {:x, 1}},
      {:move, {:y, 3}, {:x, 0}},
      {:init, {:y, 3}},
      {:line, 26},
      {:apply, 0},
      {:move, {:x, 0}, {:y, 3}},
      {:label, 71},
      {:move, {:y, 1}, {:x, 1}},
      {:move, {:y, 2}, {:x, 0}},
      {:make_fun2, {TypeCheck.Builtin, :"-find_matching_module/3-fun-1-", 3}, 0,
       72546282, 2},
      {:test_heap, 3, 1},
      {:put_tuple2, {:x, 1}, {:list, [{:y, 3}, nil]}},
      {:move, {:x, 0}, {:x, 2}},
      {:move, {:y, 0}, {:x, 0}},
      {:trim, 4, 0},
      {:line, 26},
      {:call_ext, 3, {:extfunc, Enum, :find, 3}},
      {:line, 27},
      {:bif, :element, {:f, 0}, [integer: 1, x: 0], {:x, 0}},
      {:deallocate, 0},
      :return
    ]},
   {:function, :fixed_list, 1, 73,
    [
      {:line, 28},
      {:label, 72},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :fixed_list}, 1},
      {:label, 73},
      {:test, :is_map, {:f, 74}, [x: 0]},
      {:get_map_elements, {:f, 74}, {:x, 0}, {:list, [atom: :__struct__, x: 1]}},
      {:test, :is_eq_exact, {:f, 74}, [x: 1, atom: TypeCheck.Builtin.FixedList]},
      :return,
      {:label, 74},
      {:test, :is_list, {:f, 72}, [x: 0]},
      {:allocate, 1, 1},
      {:move, {:x, 0}, {:y, 0}},
      {:move, {:literal, &TypeCheck.Type.ensure_type!/1}, {:x, 1}},
      {:line, 29},
      {:call_ext, 2, {:extfunc, Enum, :map, 2}},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:fixed_list, 1},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 599,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.FixedList}, {:x, 0}},
      {:line, 30},
      {:call_ext, 2, {:extfunc, Macro, :struct!, 2}},
      {:test, :is_map, {:f, 75}, [x: 0]},
      {:put_map_assoc, {:f, 0}, {:x, 0}, {:x, 0}, 1,
       {:list, [atom: :element_types, y: 0]}},
      {:deallocate, 1},
      :return,
      {:label, 75},
      {:test_heap, 3, 1},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badmap, x: 0]}},
      {:line, 31},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 1}
    ]},
   {:function, :fixed_map, 1, 77,
    [
      {:line, 32},
      {:label, 76},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :fixed_map}, 1},
      {:label, 77},
      {:test, :is_map, {:f, 81}, [x: 0]},
      {:get_map_elements, {:f, 82}, {:x, 0}, {:list, [atom: :__struct__, x: 1]}},
      {:select_val, {:x, 1}, {:f, 82},
       {:list,
        [
          atom: TypeCheck.Builtin.FixedList,
          f: 79,
          atom: TypeCheck.Builtin.FixedMap,
          f: 78
        ]}},
      {:label, 78},
      :return,
      {:label, 79},
      {:get_map_elements, {:f, 80}, {:x, 0},
       {:list, [atom: :element_types, x: 1]}},
      {:allocate, 1, 2},
      {:move, {:x, 1}, {:y, 0}},
      {:make_fun2, {TypeCheck.Builtin, :"-fixed_map/1-fun-0-", 1}, 1, 72546282,
       0},
      {:move, {:x, 0}, {:x, 1}},
      {:move, {:y, 0}, {:x, 0}},
      {:trim, 1, 0},
      {:line, 33},
      {:call_ext, 2, {:extfunc, Enum, :map, 2}},
      {:line, 34},
      {:call_ext_last, 1, {:extfunc, TypeCheck.Builtin, :fixed_map, 1}, 0},
      {:label, 80},
      {:test_heap, 4, 1},
      {:put_tuple2, {:x, 0},
       {:list, [atom: :badkey, atom: :element_types, x: 0]}},
      {:line, 35},
      {:call_ext_only, 1, {:extfunc, :erlang, :error, 1}},
      {:label, 81},
      {:test, :is_list, {:f, 76}, [x: 0]},
      {:label, 82},
      {:allocate, 1, 1},
      {:move, {:x, 0}, {:y, 0}},
      {:make_fun2, {TypeCheck.Builtin, :"-fixed_map/1-fun-1-", 1}, 2, 72546282,
       0},
      {:move, {:x, 0}, {:x, 1}},
      {:move, {:y, 0}, {:x, 0}},
      {:line, 36},
      {:call_ext, 2, {:extfunc, Enum, :map, 2}},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:fixed_map, 1},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 574,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.FixedMap}, {:x, 0}},
      {:line, 37},
      {:call_ext, 2, {:extfunc, Macro, :struct!, 2}},
      {:swap, {:y, 0}, {:x, 0}},
      {:move, nil, {:x, 1}},
      {:line, 38},
      {:call_ext, 2, {:extfunc, Enum, :into, 2}},
      {:test, :is_map, {:f, 83}, [y: 0]},
      {:put_map_assoc, {:f, 0}, {:y, 0}, {:x, 0}, 1,
       {:list, [atom: :keypairs, x: 0]}},
      {:deallocate, 1},
      :return,
      {:label, 83},
      {:test_heap, 3, 0},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badmap, y: 0]}},
      {:line, 38},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 1}
    ]},
   {:function, :fixed_tuple, 1, 85,
    [
      {:line, 39},
      {:label, 84},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :fixed_tuple}, 1},
      {:label, 85},
      {:test, :is_map, {:f, 87}, [x: 0]},
      {:get_map_elements, {:f, 87}, {:x, 0}, {:list, [atom: :__struct__, x: 1]}},
      {:test, :is_eq_exact, {:f, 87}, [x: 1, atom: TypeCheck.Builtin.FixedList]},
      {:get_map_elements, {:f, 86}, {:x, 0},
       {:list, [atom: :element_types, x: 1]}},
      {:move, {:x, 1}, {:x, 0}},
      {:line, 40},
      {:call_ext_only, 1, {:extfunc, TypeCheck.Builtin, :fixed_tuple, 1}},
      {:label, 86},
      {:test_heap, 4, 1},
      {:put_tuple2, {:x, 0},
       {:list, [atom: :badkey, atom: :element_types, x: 0]}},
      {:line, 40},
      {:call_ext_only, 1, {:extfunc, :erlang, :error, 1}},
      {:label, 87},
      {:test, :is_list, {:f, 84}, [x: 0]},
      {:allocate, 1, 1},
      {:move, {:x, 0}, {:y, 0}},
      {:move, {:literal, &TypeCheck.Type.ensure_type!/1}, {:x, 1}},
      {:line, 41},
      {:call_ext, 2, {:extfunc, Enum, :map, 2}},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:fixed_tuple, 1},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 350,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.FixedTuple}, {:x, 0}},
      {:line, 42},
      {:call_ext, 2, {:extfunc, Macro, :struct!, 2}},
      {:test, :is_map, {:f, 88}, [x: 0]},
      {:put_map_assoc, {:f, 0}, {:x, 0}, {:x, 0}, 1,
       {:list, [atom: :element_types, y: 0]}},
      {:deallocate, 1},
      :return,
      {:label, 88},
      {:test_heap, 3, 1},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badmap, x: 0]}},
      {:line, 43},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 1}
    ]},
   {:function, :float, 0, 90,
    [
      {:line, 44},
      {:label, 89},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :float}, 0},
      {:label, 90},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:float, 0},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 230,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.Float}, {:x, 0}},
      {:line, 45},
      {:call_ext_only, 2, {:extfunc, Macro, :struct!, 2}}
    ]},
   {:function, :fun, 0, 92,
    [
      {:line, 46},
      {:label, 91},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :fun}, 0},
      {:label, 92},
      {:line, 47},
      {:call_ext_only, 0, {:extfunc, TypeCheck.Builtin, :function, 0}}
    ]},
   {:function, :function, 0, 94,
    [
      {:line, 48},
      {:label, 93},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :function}, 0},
      {:label, 94},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:function, 0},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 172,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.Function}, {:x, 0}},
      {:line, 49},
      {:call_ext_only, 2, {:extfunc, Macro, :struct!, 2}}
    ]},
   {:function, :guarded_by, 2, 96,
    [
      {:line, 50},
      {:label, 95},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :guarded_by}, 2},
      {:label, 96},
      {:allocate, 2, 2},
      {:move, {:x, 1}, {:y, 0}},
      {:move, {:x, 0}, {:y, 1}},
      {:line, 51},
      {:call_ext, 1, {:extfunc, TypeCheck.Type, :ensure_type!, 1}},
      {:move, {:y, 1}, {:x, 0}},
      {:line, 52},
      {:call_ext, 1, {:extfunc, TypeCheck.Builtin.Guarded, :extract_names, 1}},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 0}, 0,
       {:list,
        [
          atom: :__struct__,
          atom: TypeCheck.Builtin.Guarded,
          atom: :guard,
          y: 0,
          atom: :type,
          y: 1
        ]}},
      {:deallocate, 2},
      :return
    ]},
   {:function, :integer, 0, 98,
    [
      {:line, 53},
      {:label, 97},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :integer}, 0},
      {:label, 98},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:integer, 0},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 190,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.Integer}, {:x, 0}},
      {:line, 54},
      {:call_ext_only, 2, {:extfunc, Macro, :struct!, 2}}
    ]},
   {:function, :keyword, 0, 100,
    [
      {:line, 55},
      {:label, 99},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :keyword}, 0},
      {:label, 100},
      {:allocate, 0, 0},
      {:line, 56},
      {:call_ext, 0, {:extfunc, TypeCheck.Builtin, :any, 0}},
      {:line, 56},
      {:call_ext_last, 1, {:extfunc, TypeCheck.Builtin, :keyword, 1}, 0}
    ]},
   {:function, :keyword, 1, 102,
    [
      {:line, 57},
      {:label, 101},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :keyword}, 1},
      {:label, 102},
      {:allocate, 1, 1},
      {:move, {:x, 0}, {:y, 0}},
      {:line, 58},
      {:call_ext, 0, {:extfunc, TypeCheck.Builtin, :atom, 0}},
      {:test_heap, 4, 1},
      {:put_list, {:y, 0}, nil, {:x, 1}},
      {:put_list, {:x, 0}, {:x, 1}, {:x, 0}},
      {:trim, 1, 0},
      {:line, 58},
      {:call_ext, 1, {:extfunc, TypeCheck.Builtin, :fixed_tuple, 1}},
      {:line, 58},
      {:call_ext_last, 1, {:extfunc, TypeCheck.Builtin, :list, 1}, 0}
    ]},
   {:function, :"MACRO-lazy", 2, 104,
    [
      {:line, 59},
      {:label, 103},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :"MACRO-lazy"}, 2},
      {:label, 104},
      {:allocate_zero, 3, 2},
      {:move, {:x, 1}, {:y, 2}},
      {:line, 59},
      {:call_ext, 1, {:extfunc, :elixir_env, :linify, 1}},
      {:move, {:x, 0}, {:y, 1}},
      {:test, :is_map, {:f, 106}, [x: 0]},
      {:get_map_elements, {:f, 105}, {:x, 0}, {:list, [atom: :module, x: 0]}},
      {:move, {:x, 0}, {:y, 0}},
      {:jump, {:f, 107}},
      {:label, 105},
      {:test_heap, 4, 0},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badkey, atom: :module, y: 1]}},
      {:line, 60},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 3},
      {:label, 106},
      {:move, {:atom, :module}, {:x, 1}},
      {:line, 60},
      {:apply, 0},
      {:move, {:x, 0}, {:y, 0}},
      {:label, 107},
      {:line, 60},
      {:call_ext, 0, {:extfunc, TypeCheck.Options, :new, 0}},
      {:move, {:atom, TypeCheck.Options}, {:x, 1}},
      {:move, {:x, 0}, {:x, 2}},
      {:move, {:y, 0}, {:x, 0}},
      {:init, {:y, 0}},
      {:line, 60},
      {:call_ext, 3, {:extfunc, Module, :get_attribute, 3}},
      {:move, {:y, 1}, {:x, 1}},
      {:move, {:x, 0}, {:x, 2}},
      {:move, {:y, 2}, {:x, 0}},
      {:init, {:y, 2}},
      {:line, 61},
      {:call_ext, 3, {:extfunc, TypeCheck.Internals.PreExpander, :rewrite, 3}},
      {:line, 62},
      {:call_ext, 1, {:extfunc, Macro, :decompose_call, 1}},
      {:move, {:x, 0}, {:y, 2}},
      {:test, :is_tuple, {:f, 108}, [x: 0]},
      {:test, :test_arity, {:f, 108}, [{:x, 0}, 2]},
      {:get_tuple_element, {:y, 2}, 1, {:y, 0}},
      {:line, 63},
      {:gc_bif, :length, {:f, 0}, 0, [y: 0], {:x, 2}},
      {:get_tuple_element, {:y, 2}, 0, {:y, 2}},
      {:move, {:y, 2}, {:x, 1}},
      {:move, {:y, 1}, {:x, 0}},
      {:init, {:y, 1}},
      {:line, 63},
      {:call, 3, {TypeCheck.Builtin, :find_matching_module, 3}},
      {:test_heap, 4, 1},
      {:put_tuple2, {:x, 0}, {:list, [x: 0, y: 2, y: 0]}},
      {:jump, {:f, 109}},
      {:label, 108},
      {:move, {:y, 2}, {:x, 0}},
      {:label, 109},
      {:test, :is_tuple, {:f, 110}, [x: 0]},
      {:test, :test_arity, {:f, 110}, [{:x, 0}, 3]},
      {:test_heap, 10, 1},
      {:get_tuple_element, {:x, 0}, 0, {:x, 1}},
      {:get_tuple_element, {:x, 0}, 1, {:x, 2}},
      {:get_tuple_element, {:x, 0}, 2, {:x, 0}},
      {:put_list, {:x, 0}, nil, {:x, 0}},
      {:put_list, {:x, 2}, {:x, 0}, {:x, 0}},
      {:put_list, {:x, 1}, {:x, 0}, {:x, 0}},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          atom: :lazy_explicit,
          literal: [
            keep: {"lib/type_check/builtin.ex", 739},
            context: TypeCheck.Builtin,
            import: TypeCheck.Builtin
          ],
          x: 0
        ]}},
      {:deallocate, 3},
      :return,
      {:label, 110},
      {:line, 64},
      {:badmatch, {:x, 0}}
    ]},
   {:function, :lazy_explicit, 3, 112,
    [
      {:line, 65},
      {:label, 111},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :lazy_explicit}, 3},
      {:label, 112},
      {:allocate, 3, 3},
      {:move, {:x, 2}, {:y, 0}},
      {:move, {:x, 1}, {:y, 1}},
      {:move, {:x, 0}, {:y, 2}},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:lazy_explicit, 3},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 752,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.Lazy}, {:x, 0}},
      {:line, 66},
      {:call_ext, 2, {:extfunc, Macro, :struct!, 2}},
      {:test, :is_map, {:f, 113}, [x: 0]},
      {:put_map_assoc, {:f, 0}, {:x, 0}, {:x, 0}, 1,
       {:list,
        [atom: :arguments, y: 0, atom: :function, y: 1, atom: :module, y: 2]}},
      {:deallocate, 3},
      :return,
      {:label, 113},
      {:test_heap, 3, 1},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badmap, x: 0]}},
      {:line, 67},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 3}
    ]},
   {:function, :list, 0, 115,
    [
      {:line, 68},
      {:label, 114},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :list}, 0},
      {:label, 115},
      {:allocate, 0, 0},
      {:line, 69},
      {:call_ext, 0, {:extfunc, TypeCheck.Builtin, :any, 0}},
      {:line, 69},
      {:call_ext_last, 1, {:extfunc, TypeCheck.Builtin, :list, 1}, 0}
    ]},
   {:function, :list, 1, 117,
    [
      {:line, 70},
      {:label, 116},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :list}, 1},
      {:label, 117},
      {:allocate, 1, 1},
      {:move, {:x, 0}, {:y, 0}},
      {:line, 71},
      {:call_ext, 1, {:extfunc, TypeCheck.Type, :ensure_type!, 1}},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:list, 1},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 279,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.List}, {:x, 0}},
      {:line, 72},
      {:call_ext, 2, {:extfunc, Macro, :struct!, 2}},
      {:test, :is_map, {:f, 118}, [x: 0]},
      {:put_map_assoc, {:f, 0}, {:x, 0}, {:x, 0}, 1,
       {:list, [atom: :element_type, y: 0]}},
      {:deallocate, 1},
      :return,
      {:label, 118},
      {:test_heap, 3, 1},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badmap, x: 0]}},
      {:line, 73},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 1}
    ]},
   {:function, :literal, 1, 120,
    [
      {:line, 74},
      {:label, 119},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :literal}, 1},
      {:label, 120},
      {:allocate, 1, 1},
      {:move, {:x, 0}, {:y, 0}},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:literal, 1},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 402,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.Literal}, {:x, 0}},
      {:line, 75},
      {:call_ext, 2, {:extfunc, Macro, :struct!, 2}},
      {:test, :is_map, {:f, 121}, [x: 0]},
      {:put_map_assoc, {:f, 0}, {:x, 0}, {:x, 0}, 1,
       {:list, [atom: :value, y: 0]}},
      {:deallocate, 1},
      :return,
      {:label, 121},
      {:test_heap, 3, 1},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badmap, x: 0]}},
      {:line, 76},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 1}
    ]},
   {:function, :map, 0, 123,
    [
      {:line, 77},
      {:label, 122},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :map}, 0},
      {:label, 123},
      {:allocate_zero, 2, 0},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:map, 0},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 507,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.Map}, {:x, 0}},
      {:line, 78},
      {:call_ext, 2, {:extfunc, Macro, :struct!, 2}},
      {:move, {:x, 0}, {:y, 1}},
      {:line, 79},
      {:call_ext, 0, {:extfunc, TypeCheck.Builtin, :any, 0}},
      {:move, {:x, 0}, {:y, 0}},
      {:line, 80},
      {:call_ext, 0, {:extfunc, TypeCheck.Builtin, :any, 0}},
      {:test, :is_map, {:f, 124}, [y: 1]},
      {:put_map_assoc, {:f, 0}, {:y, 1}, {:x, 0}, 1,
       {:list, [atom: :key_type, y: 0, atom: :value_type, x: 0]}},
      {:deallocate, 2},
      :return,
      {:label, 124},
      {:test_heap, 3, 0},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badmap, y: 1]}},
      {:line, 80},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 2}
    ]},
   {:function, :map, 2, 126,
    [
      {:line, 81},
      {:label, 125},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :map}, 2},
      {:label, 126},
      {:allocate, 2, 2},
      {:move, {:x, 1}, {:y, 0}},
      {:move, {:x, 0}, {:y, 1}},
      {:line, 82},
      {:call_ext, 1, {:extfunc, TypeCheck.Type, :ensure_type!, 1}},
      {:move, {:y, 0}, {:x, 0}},
      {:line, 83},
      {:call_ext, 1, {:extfunc, TypeCheck.Type, :ensure_type!, 1}},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:map, 2},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 524,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.Map}, {:x, 0}},
      {:line, 84},
      {:call_ext, 2, {:extfunc, Macro, :struct!, 2}},
      {:test, :is_map, {:f, 127}, [x: 0]},
      {:put_map_assoc, {:f, 0}, {:x, 0}, {:x, 0}, 1,
       {:list, [atom: :key_type, y: 1, atom: :value_type, y: 0]}},
      {:deallocate, 2},
      :return,
      {:label, 127},
      {:test_heap, 3, 1},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badmap, x: 0]}},
      {:line, 85},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 2}
    ]},
   {:function, :mfa, 0, 129,
    [
      {:line, 86},
      {:label, 128},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :mfa}, 0},
      {:label, 129},
      {:allocate_zero, 2, 0},
      {:line, 87},
      {:call_ext, 0, {:extfunc, TypeCheck.Builtin, :module, 0}},
      {:move, {:x, 0}, {:y, 1}},
      {:line, 87},
      {:call_ext, 0, {:extfunc, TypeCheck.Builtin, :atom, 0}},
      {:move, {:x, 0}, {:y, 0}},
      {:line, 87},
      {:call_ext, 0, {:extfunc, TypeCheck.Builtin, :arity, 0}},
      {:test_heap, 6, 1},
      {:put_list, {:x, 0}, nil, {:x, 0}},
      {:put_list, {:y, 0}, {:x, 0}, {:x, 0}},
      {:put_list, {:y, 1}, {:x, 0}, {:x, 0}},
      {:line, 87},
      {:call_ext_last, 1, {:extfunc, TypeCheck.Builtin, :fixed_tuple, 1}, 2}
    ]},
   {:function, :module, 0, 131,
    [
      {:line, 88},
      {:label, 130},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :module}, 0},
      {:label, 131},
      {:allocate_zero, 2, 0},
      {:line, 88},
      {:call, 0, {TypeCheck.Builtin, :"module (overridable 1)", 0}},
      {:move, {:x, 0}, {:y, 1}},
      {:test, :is_map, {:f, 138}, [x: 0]},
      {:line, 2},
      {:call_ext, 1, {:extfunc, :maps, :keys, 1}},
      {:move, {:x, 0}, {:x, 1}},
      {:move, {:literal, [:__struct__]}, {:x, 0}},
      {:line, 2},
      {:call_ext, 2, {:extfunc, :erlang, :--, 2}},
      {:test, :is_nil, {:f, 137}, [x: 0]},
      {:line, 2},
      {:bif, :map_get, {:f, 0}, [atom: :__struct__, y: 1], {:x, 0}},
      {:test, :is_eq_exact, {:f, 132}, [x: 0, atom: TypeCheck.Builtin.Atom]},
      {:move, {:literal, {:ok, []}}, {:x, 0}},
      {:jump, {:f, 133}},
      {:label, 132},
      {:test_heap, 8, 1},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type< TypeCheck.Builtin.Atom >,
          atom: :not_same_value,
          literal: %{},
          x: 0
        ]}},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 0]}},
      {:label, 133},
      {:test, :is_tagged_tuple, {:f, 134}, [{:x, 0}, 2, {:atom, :ok}]},
      {:move, nil, {:x, 1}},
      {:move, {:atom, :ok}, {:x, 0}},
      {:jump, {:f, 135}},
      {:label, 134},
      {:get_tuple_element, {:x, 0}, 1, {:x, 0}},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 0}, 1,
       {:list, [atom: :key, atom: :__struct__, atom: :problem, x: 0]}},
      {:test_heap, 5, 1},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type< #TypeCheck.Type< atom() > >,
          atom: :value_error,
          x: 0,
          y: 1
        ]}},
      {:move, {:x, 0}, {:x, 1}},
      {:move, {:atom, :error}, {:x, 0}},
      {:label, 135},
      {:test, :is_eq_exact, {:f, 136}, [x: 0, atom: :ok]},
      {:test_heap, 3, 2},
      {:put_tuple2, {:x, 0}, {:list, [atom: :ok, x: 1]}},
      {:jump, {:f, 139}},
      {:label, 136},
      {:test_heap, 3, 2},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 1]}},
      {:jump, {:f, 139}},
      {:label, 137},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 0}, 1,
       {:list, [atom: :keys, x: 0]}},
      {:test_heap, 8, 1},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type< #TypeCheck.Type< atom() > >,
          atom: :missing_keys,
          x: 0,
          y: 1
        ]}},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 0]}},
      {:jump, {:f, 139}},
      {:label, 138},
      {:test_heap, 8, 0},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type< #TypeCheck.Type< atom() > >,
          atom: :not_a_map,
          literal: %{},
          y: 1
        ]}},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 0]}},
      {:label, 139},
      {:get_tuple_element, {:x, 0}, 0, {:x, 1}},
      {:get_tuple_element, {:x, 0}, 1, {:y, 0}},
      {:test, :is_eq_exact, {:f, 140}, [x: 1, atom: :ok]},
      {:move, {:y, 1}, {:x, 0}},
      {:deallocate, 2},
      :return,
      {:label, 140},
      {:line, 2},
      {:call, 0, {TypeCheck.Builtin, :"__type_check_spec_for_module/0__", 0}},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 1}, 1,
       {:list, [{:atom, :arguments}, nil, {:atom, :problem}, {:y, 0}]}},
      {:test_heap, 5, 2},
      {:put_tuple2, {:x, 0}, {:list, [x: 0, atom: :return_error, x: 1, y: 1]}},
      {:trim, 2, 0},
      {:line, 2},
      {:call_ext, 1, {:extfunc, TypeCheck.TypeError, :exception, 1}},
      {:line, 2},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 0}
    ]},
   {:function, :"module (overridable 1)", 0, 142,
    [
      {:line, 89},
      {:label, 141},
      {:func_info, {:atom, TypeCheck.Builtin},
       {:atom, :"module (overridable 1)"}, 0},
      {:label, 142},
      {:line, 89},
      {:call_ext_only, 0, {:extfunc, TypeCheck.Builtin, :atom, 0}}
    ]},
   {:function, :named_type, 2, 144,
    [
      {:line, 90},
      {:label, 143},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :named_type}, 2},
      {:label, 144},
      {:allocate, 2, 2},
      {:move, {:x, 1}, {:y, 0}},
      {:move, {:x, 0}, {:y, 1}},
      {:move, {:x, 1}, {:x, 0}},
      {:line, 91},
      {:call_ext, 1, {:extfunc, TypeCheck.Type, :ensure_type!, 1}},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:named_type, 2},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 618,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.NamedType}, {:x, 0}},
      {:line, 92},
      {:call_ext, 2, {:extfunc, Macro, :struct!, 2}},
      {:test, :is_map, {:f, 145}, [x: 0]},
      {:put_map_assoc, {:f, 0}, {:x, 0}, {:x, 0}, 1,
       {:list, [atom: :name, y: 1, atom: :type, y: 0]}},
      {:deallocate, 2},
      :return,
      {:label, 145},
      {:test_heap, 3, 1},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badmap, x: 0]}},
      {:line, 93},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 2}
    ]},
   {:function, :neg_integer, 0, 147,
    [
      {:line, 94},
      {:label, 146},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :neg_integer}, 0},
      {:label, 147},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:neg_integer, 0},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 200,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.NegInteger}, {:x, 0}},
      {:line, 95},
      {:call_ext_only, 2, {:extfunc, Macro, :struct!, 2}}
    ]},
   {:function, :no_return, 0, 149,
    [
      {:line, 96},
      {:label, 148},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :no_return}, 0},
      {:label, 149},
      {:line, 96},
      {:call_ext_only, 0, {:extfunc, TypeCheck.Builtin, :none, 0}}
    ]},
   {:function, :non_neg_integer, 0, 151,
    [
      {:line, 97},
      {:label, 150},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :non_neg_integer}, 0},
      {:label, 151},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:non_neg_integer, 0},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 210,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.NonNegInteger}, {:x, 0}},
      {:line, 98},
      {:call_ext_only, 2, {:extfunc, Macro, :struct!, 2}}
    ]},
   {:function, :none, 0, 153,
    [
      {:line, 99},
      {:label, 152},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :none}, 0},
      {:label, 153},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:none, 0},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 768,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.None}, {:x, 0}},
      {:line, 100},
      {:call_ext_only, 2, {:extfunc, Macro, :struct!, 2}}
    ]},
   {:function, :number, 0, 155,
    [
      {:line, 101},
      {:label, 154},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :number}, 0},
      {:label, 155},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:number, 0},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 242,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.Number}, {:x, 0}},
      {:line, 102},
      {:call_ext_only, 2, {:extfunc, Macro, :struct!, 2}}
    ]},
   {:function, :one_of, 1, 157,
    [
      {:line, 103},
      {:label, 156},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :one_of}, 1},
      {:label, 157},
      {:test, :is_map, {:f, 159}, [x: 0]},
      {:get_map_elements, {:f, 159}, {:x, 0},
       {:list, [atom: :__struct__, x: 1]}},
      {:test, :is_eq_exact, {:f, 159},
       [x: 1, atom: TypeCheck.Builtin.FixedList]},
      {:get_map_elements, {:f, 158}, {:x, 0},
       {:list, [atom: :element_types, x: 1]}},
      {:move, {:x, 1}, {:x, 0}},
      {:line, 104},
      {:call_ext_only, 1, {:extfunc, TypeCheck.Builtin, :one_of, 1}},
      {:label, 158},
      {:test_heap, 4, 1},
      {:put_tuple2, {:x, 0},
       {:list, [atom: :badkey, atom: :element_types, x: 0]}},
      {:line, 104},
      {:call_ext_only, 1, {:extfunc, :erlang, :error, 1}},
      {:label, 159},
      {:test, :is_list, {:f, 156}, [x: 0]},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 0}, 1,
       {:list,
        [atom: :__struct__, atom: TypeCheck.Builtin.OneOf, atom: :choices, x: 0]}},
      :return
    ]},
   {:function, :one_of, 2, 161,
    [
      {:line, 105},
      {:label, 160},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :one_of}, 2},
      {:label, 161},
      {:test, :is_map, {:f, 166}, [x: 0]},
      {:get_map_elements, {:f, 166}, {:x, 0},
       {:list, [atom: :__struct__, x: 2]}},
      {:test, :is_eq_exact, {:f, 166}, [x: 2, atom: TypeCheck.Builtin.OneOf]},
      {:test, :is_map, {:f, 164}, [x: 1]},
      {:get_map_elements, {:f, 164}, {:x, 1},
       {:list, [atom: :__struct__, x: 2]}},
      {:test, :is_eq_exact, {:f, 164}, [x: 2, atom: TypeCheck.Builtin.OneOf]},
      {:get_map_elements, {:f, 163}, {:x, 0}, {:list, [atom: :choices, x: 2]}},
      {:get_map_elements, {:f, 162}, {:x, 1}, {:list, [atom: :choices, x: 0]}},
      {:allocate, 0, 3},
      {:move, {:x, 0}, {:x, 1}},
      {:move, {:x, 2}, {:x, 0}},
      {:line, 106},
      {:call_ext, 2, {:extfunc, :erlang, :++, 2}},
      {:line, 106},
      {:call_ext_last, 1, {:extfunc, TypeCheck.Builtin, :one_of, 1}, 0},
      {:label, 162},
      {:test_heap, 4, 2},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badkey, atom: :choices, x: 1]}},
      {:line, 106},
      {:call_ext_only, 1, {:extfunc, :erlang, :error, 1}},
      {:label, 163},
      {:test_heap, 4, 1},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badkey, atom: :choices, x: 0]}},
      {:line, 106},
      {:call_ext_only, 1, {:extfunc, :erlang, :error, 1}},
      {:label, 164},
      {:get_map_elements, {:f, 165}, {:x, 0}, {:list, [atom: :choices, x: 2]}},
      {:allocate_heap, 0, 2, 3},
      {:put_list, {:x, 1}, nil, {:x, 1}},
      {:move, {:x, 2}, {:x, 0}},
      {:line, 107},
      {:call_ext, 2, {:extfunc, :erlang, :++, 2}},
      {:line, 107},
      {:call_ext_last, 1, {:extfunc, TypeCheck.Builtin, :one_of, 1}, 0},
      {:label, 165},
      {:test_heap, 4, 1},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badkey, atom: :choices, x: 0]}},
      {:line, 107},
      {:call_ext_only, 1, {:extfunc, :erlang, :error, 1}},
      {:label, 166},
      {:test, :is_map, {:f, 168}, [x: 1]},
      {:get_map_elements, {:f, 168}, {:x, 1},
       {:list, [atom: :__struct__, x: 2]}},
      {:test, :is_eq_exact, {:f, 168}, [x: 2, atom: TypeCheck.Builtin.OneOf]},
      {:get_map_elements, {:f, 167}, {:x, 1}, {:list, [atom: :choices, x: 2]}},
      {:test_heap, 2, 3},
      {:put_list, {:x, 0}, {:x, 2}, {:x, 0}},
      {:line, 108},
      {:call_ext_only, 1, {:extfunc, TypeCheck.Builtin, :one_of, 1}},
      {:label, 167},
      {:test_heap, 4, 2},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badkey, atom: :choices, x: 1]}},
      {:line, 108},
      {:call_ext_only, 1, {:extfunc, :erlang, :error, 1}},
      {:label, 168},
      {:test_heap, 4, 2},
      {:put_list, {:x, 1}, nil, {:x, 1}},
      {:put_list, {:x, 0}, {:x, 1}, {:x, 0}},
      {:line, 109},
      {:call_ext_only, 1, {:extfunc, TypeCheck.Builtin, :one_of, 1}}
    ]},
   {:function, :pos_integer, 0, 170,
    [
      {:line, 110},
      {:label, 169},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :pos_integer}, 0},
      {:label, 170},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:pos_integer, 0},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 220,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.PosInteger}, {:x, 0}},
      {:line, 111},
      {:call_ext_only, 2, {:extfunc, Macro, :struct!, 2}}
    ]},
   {:function, :range, 1, 172,
    [
      {:line, 112},
      {:label, 171},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :range}, 1},
      {:label, 172},
      {:test, :is_map, {:f, 171}, [x: 0]},
      {:get_map_elements, {:f, 171}, {:x, 0},
       {:list, [atom: :__struct__, x: 1]}},
      {:select_val, {:x, 1}, {:f, 171},
       {:list, [atom: Range, f: 174, atom: TypeCheck.Builtin.Literal, f: 173]}},
      {:label, 173},
      {:get_map_elements, {:f, 171}, {:x, 0}, {:list, [atom: :value, x: 1]}},
      {:test, :is_map, {:f, 171}, [x: 1]},
      {:get_map_elements, {:f, 171}, {:x, 1},
       {:list, [atom: :__struct__, x: 2]}},
      {:test, :is_eq_exact, {:f, 171}, [x: 2, atom: Range]},
      {:move, {:x, 1}, {:x, 0}},
      {:line, 113},
      {:call_ext_only, 1, {:extfunc, TypeCheck.Builtin, :range, 1}},
      {:label, 174},
      {:test, :has_map_fields, {:f, 171}, {:x, 0},
       {:list, [atom: :first, atom: :last]}},
      {:allocate, 1, 1},
      {:move, {:x, 0}, {:y, 0}},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:range, 1},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 467,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.Range}, {:x, 0}},
      {:line, 114},
      {:call_ext, 2, {:extfunc, Macro, :struct!, 2}},
      {:test, :is_map, {:f, 175}, [x: 0]},
      {:put_map_assoc, {:f, 0}, {:x, 0}, {:x, 0}, 1,
       {:list, [atom: :range, y: 0]}},
      {:deallocate, 1},
      :return,
      {:label, 175},
      {:test_heap, 3, 1},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badmap, x: 0]}},
      {:line, 115},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 1}
    ]},
   {:function, :range, 2, 177,
    [
      {:line, 116},
      {:label, 176},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :range}, 2},
      {:label, 177},
      {:test, :is_map, {:f, 178}, [x: 0]},
      {:get_map_elements, {:f, 178}, {:x, 0},
       {:list, [atom: :value, x: 3, atom: :__struct__, x: 2]}},
      {:test, :is_eq_exact, {:f, 178}, [x: 2, atom: TypeCheck.Builtin.Literal]},
      {:test, :is_map, {:f, 178}, [x: 1]},
      {:get_map_elements, {:f, 178}, {:x, 1},
       {:list, [atom: :value, x: 4, atom: :__struct__, x: 2]}},
      {:test, :is_eq_exact, {:f, 178}, [x: 2, atom: TypeCheck.Builtin.Literal]},
      {:move, {:x, 4}, {:x, 1}},
      {:move, {:x, 3}, {:x, 0}},
      {:line, 117},
      {:call_ext_only, 2, {:extfunc, TypeCheck.Builtin, :range, 2}},
      {:label, 178},
      {:allocate, 2, 2},
      {:move, {:x, 1}, {:y, 0}},
      {:move, {:x, 0}, {:y, 1}},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:range, 2},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 496,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.Range}, {:x, 0}},
      {:line, 118},
      {:call_ext, 2, {:extfunc, Macro, :struct!, 2}},
      {:move, {:y, 0}, {:x, 2}},
      {:swap, {:y, 1}, {:x, 0}},
      {:move, {:x, 2}, {:x, 1}},
      {:init, {:y, 0}},
      {:line, 119},
      {:call_ext, 2, {:extfunc, Range, :new, 2}},
      {:test, :is_map, {:f, 179}, [y: 1]},
      {:put_map_assoc, {:f, 0}, {:y, 1}, {:x, 0}, 1,
       {:list, [atom: :range, x: 0]}},
      {:deallocate, 2},
      :return,
      {:label, 179},
      {:test_heap, 3, 0},
      {:put_tuple2, {:x, 0}, {:list, [atom: :badmap, y: 1]}},
      {:line, 119},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 2}
    ]},
   {:function, :term, 0, 181,
    [
      {:line, 120},
      {:label, 180},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :term}, 0},
      {:label, 181},
      {:allocate_zero, 2, 0},
      {:line, 120},
      {:call, 0, {TypeCheck.Builtin, :"term (overridable 1)", 0}},
      {:move, {:x, 0}, {:y, 1}},
      {:test, :is_map, {:f, 188}, [x: 0]},
      {:line, 2},
      {:call_ext, 1, {:extfunc, :maps, :keys, 1}},
      {:move, {:x, 0}, {:x, 1}},
      {:move, {:literal, [:__struct__]}, {:x, 0}},
      {:line, 2},
      {:call_ext, 2, {:extfunc, :erlang, :--, 2}},
      {:test, :is_nil, {:f, 187}, [x: 0]},
      {:line, 2},
      {:bif, :map_get, {:f, 0}, [atom: :__struct__, y: 1], {:x, 0}},
      {:test, :is_eq_exact, {:f, 182}, [x: 0, atom: TypeCheck.Builtin.Any]},
      {:move, {:literal, {:ok, []}}, {:x, 0}},
      {:jump, {:f, 183}},
      {:label, 182},
      {:test_heap, 8, 1},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type< TypeCheck.Builtin.Any >,
          atom: :not_same_value,
          literal: %{},
          x: 0
        ]}},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 0]}},
      {:label, 183},
      {:test, :is_tagged_tuple, {:f, 184}, [{:x, 0}, 2, {:atom, :ok}]},
      {:move, nil, {:x, 1}},
      {:move, {:atom, :ok}, {:x, 0}},
      {:jump, {:f, 185}},
      {:label, 184},
      {:get_tuple_element, {:x, 0}, 1, {:x, 0}},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 0}, 1,
       {:list, [atom: :key, atom: :__struct__, atom: :problem, x: 0]}},
      {:test_heap, 5, 1},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type< #TypeCheck.Type< any() > >,
          atom: :value_error,
          x: 0,
          y: 1
        ]}},
      {:move, {:x, 0}, {:x, 1}},
      {:move, {:atom, :error}, {:x, 0}},
      {:label, 185},
      {:test, :is_eq_exact, {:f, 186}, [x: 0, atom: :ok]},
      {:test_heap, 3, 2},
      {:put_tuple2, {:x, 0}, {:list, [atom: :ok, x: 1]}},
      {:jump, {:f, 189}},
      {:label, 186},
      {:test_heap, 3, 2},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 1]}},
      {:jump, {:f, 189}},
      {:label, 187},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 0}, 1,
       {:list, [atom: :keys, x: 0]}},
      {:test_heap, 8, 1},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type< #TypeCheck.Type< any() > >,
          atom: :missing_keys,
          x: 0,
          y: 1
        ]}},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 0]}},
      {:jump, {:f, 189}},
      {:label, 188},
      {:test_heap, 8, 0},
      {:put_tuple2, {:x, 0},
       {:list,
        [
          literal: #TypeCheck.Type< #TypeCheck.Type< any() > >,
          atom: :not_a_map,
          literal: %{},
          y: 1
        ]}},
      {:put_tuple2, {:x, 0}, {:list, [atom: :error, x: 0]}},
      {:label, 189},
      {:get_tuple_element, {:x, 0}, 0, {:x, 1}},
      {:get_tuple_element, {:x, 0}, 1, {:y, 0}},
      {:test, :is_eq_exact, {:f, 190}, [x: 1, atom: :ok]},
      {:move, {:y, 1}, {:x, 0}},
      {:deallocate, 2},
      :return,
      {:label, 190},
      {:line, 2},
      {:call, 0, {TypeCheck.Builtin, :"__type_check_spec_for_term/0__", 0}},
      {:put_map_assoc, {:f, 0}, {:literal, %{}}, {:x, 1}, 1,
       {:list, [{:atom, :arguments}, nil, {:atom, :problem}, {:y, 0}]}},
      {:test_heap, 5, 2},
      {:put_tuple2, {:x, 0}, {:list, [x: 0, atom: :return_error, x: 1, y: 1]}},
      {:trim, 2, 0},
      {:line, 2},
      {:call_ext, 1, {:extfunc, TypeCheck.TypeError, :exception, 1}},
      {:line, 2},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 0}
    ]},
   {:function, :"term (overridable 1)", 0, 192,
    [
      {:line, 121},
      {:label, 191},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :"term (overridable 1)"},
       0},
      {:label, 192},
      {:line, 121},
      {:call_ext_only, 0, {:extfunc, TypeCheck.Builtin, :any, 0}}
    ]},
   {:function, :tuple, 0, 194,
    [
      {:line, 122},
      {:label, 193},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :tuple}, 0},
      {:label, 194},
      {:move,
       {:literal,
        #Macro.Env<
          aliases: [],
          context: nil,
          context_modules: [TypeCheck.Builtin],
          file: "/run/media/qqwy/Serendipity/Programming/Personal/elixir/type_check/lib/type_check/builtin.ex",
          function: {:tuple, 0},
          functions: [
            {TypeCheck.Builtin, [any: 0, arity: 0, as_boolean: 1, ...]},
            {Kernel, [!=: 2, !==: 2, ...]}
          ],
          lexical_tracker: nil,
          line: 381,
          macro_aliases: [],
          macros: [{TypeCheck.Builtin, ...}, {...}, ...],
          module: TypeCheck.Builtin,
          requires: [...],
          ...
        >}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin.Tuple}, {:x, 0}},
      {:line, 123},
      {:call_ext_only, 2, {:extfunc, Macro, :struct!, 2}}
    ]},
   {:function, :tuple, 1, 196,
    [
      {:line, 124},
      {:label, 195},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :tuple}, 1},
      {:label, 196},
      {:test, :is_eq_exact, {:f, 197}, [x: 0, integer: 0]},
      {:move, nil, {:x, 0}},
      {:line, 124},
      {:call_ext_only, 1, {:extfunc, TypeCheck.Builtin, :fixed_tuple, 1}},
      {:label, 197},
      {:test, :is_integer, {:f, 195}, [x: 0]},
      {:test, :is_lt, {:f, 195}, [integer: 0, x: 0]},
      {:allocate_zero, 1, 1},
      {:move, {:x, 0}, {:x, 1}},
      {:move, {:integer, 1}, {:x, 0}},
      {:line, 125},
      {:call_ext, 2, {:extfunc, Range, :new, 2}},
      {:move, {:x, 0}, {:y, 0}},
      {:make_fun2, {TypeCheck.Builtin, :"-tuple/1-fun-0-", 1}, 3, 72546282, 0},
      {:move, {:x, 0}, {:x, 1}},
      {:move, {:y, 0}, {:x, 0}},
      {:trim, 1, 0},
      {:line, 126},
      {:call_ext, 2, {:extfunc, Enum, :map, 2}},
      {:line, 127},
      {:call_ext_last, 1, {:extfunc, TypeCheck.Builtin, :fixed_tuple, 1}, 0}
    ]},
   {:function, :"__type_check_spec_for_any/0__", 0, 199,
    [
      {:line, 128},
      {:label, 198},
      {:func_info, {:atom, TypeCheck.Builtin},
       {:atom, :"__type_check_spec_for_any/0__"}, 0},
      {:label, 199},
      {:move, {:literal, #TypeCheck.Spec<  any() :: #TypeCheck.Type< any() > >},
       {:x, 0}},
      :return
    ]},
   {:function, :"__type_check_spec_for_as_boolean/1__", 0, 201,
    [
      {:line, 128},
      {:label, 200},
      {:func_info, {:atom, TypeCheck.Builtin},
       {:atom, :"__type_check_spec_for_as_boolean/1__"}, 0},
      {:label, 201},
      {:move,
       {:literal,
        #TypeCheck.Spec< 
        as_boolean(t :: (x :: any() when TypeCheck.Type.is_type?(x)))
        ::
        (x :: any() when TypeCheck.Type.is_type?(x))
        >}, {:x, 0}},
      :return
    ]},
   {:function, :"__type_check_spec_for_atom/0__", 0, 203,
    [
      {:line, 128},
      {:label, 202},
      {:func_info, {:atom, TypeCheck.Builtin},
       {:atom, :"__type_check_spec_for_atom/0__"}, 0},
      {:label, 203},
      {:move,
       {:literal, #TypeCheck.Spec<  atom() :: #TypeCheck.Type< atom() > >},
       {:x, 0}},
      :return
    ]},
   {:function, :"__type_check_spec_for_module/0__", 0, 205,
    [
      {:line, 128},
      {:label, 204},
      {:func_info, {:atom, TypeCheck.Builtin},
       {:atom, :"__type_check_spec_for_module/0__"}, 0},
      {:label, 205},
      {:move,
       {:literal, #TypeCheck.Spec<  module() :: #TypeCheck.Type< atom() > >},
       {:x, 0}},
      :return
    ]},
   {:function, :"__type_check_spec_for_term/0__", 0, 207,
    [
      {:line, 128},
      {:label, 206},
      {:func_info, {:atom, TypeCheck.Builtin},
       {:atom, :"__type_check_spec_for_term/0__"}, 0},
      {:label, 207},
      {:move,
       {:literal, #TypeCheck.Spec<  term() :: #TypeCheck.Type< any() > >},
       {:x, 0}},
      :return
    ]},
   {:function, :module_info, 0, 209,
    [
      {:line, 0},
      {:label, 208},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :module_info}, 0},
      {:label, 209},
      {:move, {:atom, TypeCheck.Builtin}, {:x, 0}},
      {:line, 0},
      {:call_ext_only, 1, {:extfunc, :erlang, :get_module_info, 1}}
    ]},
   {:function, :module_info, 1, 211,
    [
      {:line, 0},
      {:label, 210},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :module_info}, 1},
      {:label, 211},
      {:move, {:x, 0}, {:x, 1}},
      {:move, {:atom, TypeCheck.Builtin}, {:x, 0}},
      {:line, 0},
      {:call_ext_only, 2, {:extfunc, :erlang, :get_module_info, 2}}
    ]},
   {:function, :"-tuple/1-fun-0-", 1, 213,
    [
      {:line, 126},
      {:label, 212},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :"-tuple/1-fun-0-"}, 1},
      {:label, 213},
      {:line, 126},
      {:call_ext_only, 0, {:extfunc, TypeCheck.Builtin, :any, 0}}
    ]},
   {:function, :"-fixed_map/1-fun-1-", 1, 215,
    [
      {:line, 36},
      {:label, 214},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :"-fixed_map/1-fun-1-"},
       1},
      {:label, 215},
      {:line, 36},
      {:bif, :element, {:f, 0}, [integer: 2, x: 0], {:x, 0}},
      {:line, 36},
      {:call_ext_only, 1, {:extfunc, TypeCheck.Type, :ensure_type!, 1}}
    ]},
   {:function, :"-fixed_map/1-fun-0-", 1, 217,
    [
      {:line, 33},
      {:label, 216},
      {:func_info, {:atom, TypeCheck.Builtin}, {:atom, :"-fixed_map/1-fun-0-"},
       1},
      {:label, 217},
      {:test, :is_map, {:f, 219}, [x: 0]},
      {:get_map_elements, {:f, 219}, {:x, 0},
       {:list, [atom: :element_types, x: 2, atom: :__struct__, x: 1]}},
      {:test, :is_eq_exact, {:f, 219},
       [x: 1, atom: TypeCheck.Builtin.FixedTuple]},
      {:gc_bif, :length, {:f, 218}, 3, [x: 2], {:x, 1}},
      {:test, :is_eq_exact, {:f, 218}, [x: 1, integer: 2]},
      {:line, 129},
      {:bif, :hd, {:f, 0}, [x: 2], {:x, 0}},
      {:get_tl, {:x, 2}, {:x, 1}},
      {:line, 129},
      {:bif, :hd, {:f, 0}, [x: 1], {:x, 1}},
      {:test_heap, 3, 2},
      {:put_tuple2, {:x, 0}, {:list, [x: 0, x: 1]}},
      :return,
      {:label, 218},
      {:gc_bif, :length, {:f, 219}, 3, [x: 2], {:x, 1}},
      {:test, :is_ne_exact, {:f, 219}, [x: 1, integer: 2]},
      {:allocate, 0, 1},
      {:line, 130},
      {:call_ext, 1, {:extfunc, Kernel, :inspect, 1}},
      {:line, 130},
      {:gc_bif, :byte_size, {:f, 0}, 1, [x: 0], {:x, 1}},
      {:bs_add, {:f, 0}, [{:x, 1}, {:integer, 38}, 1], {:x, 1}},
      {:line, 130},
      {:bs_init2, {:f, 0}, {:x, 1}, 0, 2, {:field_flags, 0}, {:x, 1}},
      {:bs_put_string, 38, {:string, 'Improper type passed to `fixed_map/1` '}},
      {:bs_put_binary, {:f, 0}, {:atom, :all}, 8, {:field_flags, 0}, {:x, 0}},
      {:move, {:x, 1}, {:x, 0}},
      {:line, 130},
      {:call_ext, 1, {:extfunc, RuntimeError, :exception, 1}},
      {:line, 130},
      {:call_ext_last, 1, {:extfunc, :erlang, :error, 1}, 0},
      {:label, 219},
      {:line, 131},
      {:call_ext_only, 1, {:extfunc, TypeCheck.Type, :ensure_type!, 1}}
    ]},
   {:function, :"-find_matching_module/3-fun-1-", 3, 221,
    [
      {:line, 26},
      {:label, 220},
      {:func_info, {:atom, TypeCheck.Builtin},
       {:atom, :"-find_matching_module/3-fun-1-"}, 3},
      {:label, 221},
      {:test, :is_tuple, {:f, 222}, [x: 0]},
      {:test, :test_arity, {:f, 222}, [{:x, 0}, 2]},
      {:allocate, 1, 3},
      {:move, {:x, 0}, {:y, 0}},
      {:move, {:x, 1}, {:x, 0}},
      {:move, {:x, 2}, {:x, 1}},
      {:make_fun2, {TypeCheck.Builtin, :"-find_matching_module/3-fun-0-", 3}, 4,
       72546282, 2},
      {:get_tuple_element, {:y, 0}, 1, {:x, 1}},
      {:swap, {:x, 0}, {:x, 1}},
      {:line, 132},
      {:call_ext_last, 2, {:extfunc, Enum, :any?, 2}, 1},
      {:label, 222},
      {:test_heap, 2, 1},
      {:put_list, {:x, 0}, nil, {:x, 1}},
      {:move, {:atom, :function_clause}, {:x, 0}},
      {:line, 26},
      {:call_ext_only, 2, {:extfunc, :erlang, :error, 2}}
    ]},
   {:function, :"-find_matching_module/3-fun-0-", 3, 224,
    [
      {:line, 132},
      {:label, 223},
      {:func_info, {:atom, TypeCheck.Builtin},
       {:atom, :"-find_matching_module/3-fun-0-"}, 3},
      {:label, 224},
      {:test_heap, 3, 3},
      {:put_tuple2, {:x, 1}, {:list, [x: 1, x: 2]}},
      {:bif, :==, {:f, 0}, [x: 0, x: 1], {:x, 0}},
      :return
    ]}
 ]}